//
// This file was auto-generated using the following command:
//
// jai modules/Vulkan-1.3/generator.jai
//



USE_PLATFORM_XLIB_KHR :: 1;
VERSION_1_0 :: 1;

USE_64_BIT_PTR_DEFINES :: 1;

HEADER_VERSION :: 250;

VERSION_1_1 :: 1;

VERSION_1_2 :: 1;

VERSION_1_3 :: 1;

KHR_surface :: 1;

KHR_SURFACE_SPEC_VERSION :: 25;
KHR_SURFACE_EXTENSION_NAME :: "VK_KHR_surface";

KHR_swapchain :: 1;

KHR_SWAPCHAIN_SPEC_VERSION :: 70;
KHR_SWAPCHAIN_EXTENSION_NAME :: "VK_KHR_swapchain";

KHR_display :: 1;

KHR_DISPLAY_SPEC_VERSION :: 23;
KHR_DISPLAY_EXTENSION_NAME :: "VK_KHR_display";

KHR_display_swapchain :: 1;
KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION :: 10;
KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME :: "VK_KHR_display_swapchain";

KHR_sampler_mirror_clamp_to_edge :: 1;
KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION :: 3;
KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME :: "VK_KHR_sampler_mirror_clamp_to_edge";

KHR_video_queue :: 1;

KHR_VIDEO_QUEUE_SPEC_VERSION :: 8;
KHR_VIDEO_QUEUE_EXTENSION_NAME :: "VK_KHR_video_queue";

KHR_video_decode_queue :: 1;
KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION :: 7;
KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME :: "VK_KHR_video_decode_queue";

KHR_video_decode_h264 :: 1;

video_codec_h264std :: 1;

STD_VIDEO_H264_CPB_CNT_LIST_SIZE :: 32;
STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS :: 6;
STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS :: 16;
STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS :: 6;
STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS :: 64;
STD_VIDEO_H264_MAX_NUM_LIST_REF :: 32;
STD_VIDEO_H264_MAX_CHROMA_PLANES :: 2;

video_codec_h264std_decode :: 1;

STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE :: 2;

STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME :: "VK_STD_vulkan_video_codec_h264_decode";

KHR_VIDEO_DECODE_H264_SPEC_VERSION :: 8;
KHR_VIDEO_DECODE_H264_EXTENSION_NAME :: "VK_KHR_video_decode_h264";

KHR_dynamic_rendering :: 1;
KHR_DYNAMIC_RENDERING_SPEC_VERSION :: 1;
KHR_DYNAMIC_RENDERING_EXTENSION_NAME :: "VK_KHR_dynamic_rendering";

KHR_multiview :: 1;
KHR_MULTIVIEW_SPEC_VERSION :: 1;
KHR_MULTIVIEW_EXTENSION_NAME :: "VK_KHR_multiview";

KHR_get_physical_device_properties2 :: 1;
KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION :: 2;
KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME :: "VK_KHR_get_physical_device_properties2";

KHR_device_group :: 1;
KHR_DEVICE_GROUP_SPEC_VERSION :: 4;
KHR_DEVICE_GROUP_EXTENSION_NAME :: "VK_KHR_device_group";

KHR_shader_draw_parameters :: 1;
KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION :: 1;
KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME :: "VK_KHR_shader_draw_parameters";

KHR_maintenance1 :: 1;
KHR_MAINTENANCE_1_SPEC_VERSION :: 2;
KHR_MAINTENANCE_1_EXTENSION_NAME :: "VK_KHR_maintenance1";
KHR_MAINTENANCE1_SPEC_VERSION :: KHR_MAINTENANCE_1_SPEC_VERSION;
KHR_MAINTENANCE1_EXTENSION_NAME :: KHR_MAINTENANCE_1_EXTENSION_NAME;

KHR_device_group_creation :: 1;
KHR_DEVICE_GROUP_CREATION_SPEC_VERSION :: 1;
KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME :: "VK_KHR_device_group_creation";
MAX_DEVICE_GROUP_SIZE_KHR :: MAX_DEVICE_GROUP_SIZE;

KHR_external_memory_capabilities :: 1;
KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION :: 1;
KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME :: "VK_KHR_external_memory_capabilities";
LUID_SIZE_KHR :: LUID_SIZE;

KHR_external_memory :: 1;
KHR_EXTERNAL_MEMORY_SPEC_VERSION :: 1;
KHR_EXTERNAL_MEMORY_EXTENSION_NAME :: "VK_KHR_external_memory";
QUEUE_FAMILY_EXTERNAL_KHR :: QUEUE_FAMILY_EXTERNAL;

KHR_external_memory_fd :: 1;
KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION :: 1;
KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME :: "VK_KHR_external_memory_fd";

KHR_external_semaphore_capabilities :: 1;
KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION :: 1;
KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME :: "VK_KHR_external_semaphore_capabilities";

KHR_external_semaphore :: 1;
KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION :: 1;
KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME :: "VK_KHR_external_semaphore";

KHR_external_semaphore_fd :: 1;
KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION :: 1;
KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME :: "VK_KHR_external_semaphore_fd";

KHR_push_descriptor :: 1;
KHR_PUSH_DESCRIPTOR_SPEC_VERSION :: 2;
KHR_PUSH_DESCRIPTOR_EXTENSION_NAME :: "VK_KHR_push_descriptor";

KHR_shader_float16_int8 :: 1;
KHR_SHADER_FLOAT16_INT8_SPEC_VERSION :: 1;
KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME :: "VK_KHR_shader_float16_int8";

KHR_16bit_storage :: 1;
KHR_16BIT_STORAGE_SPEC_VERSION :: 1;
KHR_16BIT_STORAGE_EXTENSION_NAME :: "VK_KHR_16bit_storage";

KHR_incremental_present :: 1;
KHR_INCREMENTAL_PRESENT_SPEC_VERSION :: 2;
KHR_INCREMENTAL_PRESENT_EXTENSION_NAME :: "VK_KHR_incremental_present";

KHR_descriptor_update_template :: 1;

KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION :: 1;
KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME :: "VK_KHR_descriptor_update_template";

KHR_imageless_framebuffer :: 1;
KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION :: 1;
KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME :: "VK_KHR_imageless_framebuffer";

KHR_create_renderpass2 :: 1;
KHR_CREATE_RENDERPASS_2_SPEC_VERSION :: 1;
KHR_CREATE_RENDERPASS_2_EXTENSION_NAME :: "VK_KHR_create_renderpass2";

KHR_shared_presentable_image :: 1;
KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION :: 1;
KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME :: "VK_KHR_shared_presentable_image";

KHR_external_fence_capabilities :: 1;
KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION :: 1;
KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME :: "VK_KHR_external_fence_capabilities";

KHR_external_fence :: 1;
KHR_EXTERNAL_FENCE_SPEC_VERSION :: 1;
KHR_EXTERNAL_FENCE_EXTENSION_NAME :: "VK_KHR_external_fence";

KHR_external_fence_fd :: 1;
KHR_EXTERNAL_FENCE_FD_SPEC_VERSION :: 1;
KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME :: "VK_KHR_external_fence_fd";

KHR_performance_query :: 1;
KHR_PERFORMANCE_QUERY_SPEC_VERSION :: 1;
KHR_PERFORMANCE_QUERY_EXTENSION_NAME :: "VK_KHR_performance_query";

KHR_maintenance2 :: 1;
KHR_MAINTENANCE_2_SPEC_VERSION :: 1;
KHR_MAINTENANCE_2_EXTENSION_NAME :: "VK_KHR_maintenance2";
KHR_MAINTENANCE2_SPEC_VERSION :: KHR_MAINTENANCE_2_SPEC_VERSION;
KHR_MAINTENANCE2_EXTENSION_NAME :: KHR_MAINTENANCE_2_EXTENSION_NAME;

KHR_get_surface_capabilities2 :: 1;
KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION :: 1;
KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME :: "VK_KHR_get_surface_capabilities2";

KHR_variable_pointers :: 1;
KHR_VARIABLE_POINTERS_SPEC_VERSION :: 1;
KHR_VARIABLE_POINTERS_EXTENSION_NAME :: "VK_KHR_variable_pointers";

KHR_get_display_properties2 :: 1;
KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION :: 1;
KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME :: "VK_KHR_get_display_properties2";

KHR_dedicated_allocation :: 1;
KHR_DEDICATED_ALLOCATION_SPEC_VERSION :: 3;
KHR_DEDICATED_ALLOCATION_EXTENSION_NAME :: "VK_KHR_dedicated_allocation";

KHR_storage_buffer_storage_class :: 1;
KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION :: 1;
KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME :: "VK_KHR_storage_buffer_storage_class";

KHR_relaxed_block_layout :: 1;
KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION :: 1;
KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME :: "VK_KHR_relaxed_block_layout";

KHR_get_memory_requirements2 :: 1;
KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION :: 1;
KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME :: "VK_KHR_get_memory_requirements2";

KHR_image_format_list :: 1;
KHR_IMAGE_FORMAT_LIST_SPEC_VERSION :: 1;
KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME :: "VK_KHR_image_format_list";

KHR_sampler_ycbcr_conversion :: 1;

KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION :: 14;
KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME :: "VK_KHR_sampler_ycbcr_conversion";

KHR_bind_memory2 :: 1;
KHR_BIND_MEMORY_2_SPEC_VERSION :: 1;
KHR_BIND_MEMORY_2_EXTENSION_NAME :: "VK_KHR_bind_memory2";

KHR_maintenance3 :: 1;
KHR_MAINTENANCE_3_SPEC_VERSION :: 1;
KHR_MAINTENANCE_3_EXTENSION_NAME :: "VK_KHR_maintenance3";
KHR_MAINTENANCE3_SPEC_VERSION :: KHR_MAINTENANCE_3_SPEC_VERSION;
KHR_MAINTENANCE3_EXTENSION_NAME :: KHR_MAINTENANCE_3_EXTENSION_NAME;

KHR_draw_indirect_count :: 1;
KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION :: 1;
KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME :: "VK_KHR_draw_indirect_count";

KHR_shader_subgroup_extended_types :: 1;
KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION :: 1;
KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME :: "VK_KHR_shader_subgroup_extended_types";

KHR_8bit_storage :: 1;
KHR_8BIT_STORAGE_SPEC_VERSION :: 1;
KHR_8BIT_STORAGE_EXTENSION_NAME :: "VK_KHR_8bit_storage";

KHR_shader_atomic_int64 :: 1;
KHR_SHADER_ATOMIC_INT64_SPEC_VERSION :: 1;
KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME :: "VK_KHR_shader_atomic_int64";

KHR_shader_clock :: 1;
KHR_SHADER_CLOCK_SPEC_VERSION :: 1;
KHR_SHADER_CLOCK_EXTENSION_NAME :: "VK_KHR_shader_clock";

KHR_video_decode_h265 :: 1;

video_codec_h265std :: 1;
STD_VIDEO_H265_SUBLAYERS_LIST_SIZE :: 7;
STD_VIDEO_H265_CPB_CNT_LIST_SIZE :: 32;
STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS :: 6;
STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS :: 16;
STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS :: 6;
STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS :: 64;
STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS :: 6;
STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS :: 64;
STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS :: 2;
STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS :: 64;
STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE :: 3;
STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE :: 128;
STD_VIDEO_H265_MAX_DPB_SIZE :: 16;
STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS :: 32;
STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE :: 6;
STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE :: 19;
STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE :: 21;
STD_VIDEO_H265_MAX_NUM_LIST_REF :: 15;
STD_VIDEO_H265_MAX_CHROMA_PLANES :: 2;
STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS :: 64;
STD_VIDEO_H265_MAX_LONG_TERM_PICS :: 16;
STD_VIDEO_H265_MAX_DELTA_POC :: 48;

video_codec_h265std_decode :: 1;

STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE :: 8;

STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME :: "VK_STD_vulkan_video_codec_h265_decode";

KHR_VIDEO_DECODE_H265_SPEC_VERSION :: 7;
KHR_VIDEO_DECODE_H265_EXTENSION_NAME :: "VK_KHR_video_decode_h265";

KHR_global_priority :: 1;
MAX_GLOBAL_PRIORITY_SIZE_KHR :: 16;
KHR_GLOBAL_PRIORITY_SPEC_VERSION :: 1;
KHR_GLOBAL_PRIORITY_EXTENSION_NAME :: "VK_KHR_global_priority";

KHR_driver_properties :: 1;
KHR_DRIVER_PROPERTIES_SPEC_VERSION :: 1;
KHR_DRIVER_PROPERTIES_EXTENSION_NAME :: "VK_KHR_driver_properties";
MAX_DRIVER_NAME_SIZE_KHR :: MAX_DRIVER_NAME_SIZE;
MAX_DRIVER_INFO_SIZE_KHR :: MAX_DRIVER_INFO_SIZE;

KHR_shader_float_controls :: 1;
KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION :: 4;
KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME :: "VK_KHR_shader_float_controls";

KHR_depth_stencil_resolve :: 1;
KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION :: 1;
KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME :: "VK_KHR_depth_stencil_resolve";

KHR_swapchain_mutable_format :: 1;
KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION :: 1;
KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME :: "VK_KHR_swapchain_mutable_format";

KHR_timeline_semaphore :: 1;
KHR_TIMELINE_SEMAPHORE_SPEC_VERSION :: 2;
KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME :: "VK_KHR_timeline_semaphore";

KHR_vulkan_memory_model :: 1;
KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION :: 3;
KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME :: "VK_KHR_vulkan_memory_model";

KHR_shader_terminate_invocation :: 1;
KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION :: 1;
KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME :: "VK_KHR_shader_terminate_invocation";

KHR_fragment_shading_rate :: 1;
KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION :: 2;
KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME :: "VK_KHR_fragment_shading_rate";

KHR_spirv_1_4 :: 1;
KHR_SPIRV_1_4_SPEC_VERSION :: 1;
KHR_SPIRV_1_4_EXTENSION_NAME :: "VK_KHR_spirv_1_4";

KHR_surface_protected_capabilities :: 1;
KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION :: 1;
KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME :: "VK_KHR_surface_protected_capabilities";

KHR_separate_depth_stencil_layouts :: 1;
KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION :: 1;
KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME :: "VK_KHR_separate_depth_stencil_layouts";

KHR_present_wait :: 1;
KHR_PRESENT_WAIT_SPEC_VERSION :: 1;
KHR_PRESENT_WAIT_EXTENSION_NAME :: "VK_KHR_present_wait";

KHR_uniform_buffer_standard_layout :: 1;
KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION :: 1;
KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME :: "VK_KHR_uniform_buffer_standard_layout";

KHR_buffer_device_address :: 1;
KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION :: 1;
KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME :: "VK_KHR_buffer_device_address";

KHR_deferred_host_operations :: 1;

KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION :: 4;
KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME :: "VK_KHR_deferred_host_operations";

KHR_pipeline_executable_properties :: 1;
KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION :: 1;
KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME :: "VK_KHR_pipeline_executable_properties";

KHR_map_memory2 :: 1;
KHR_MAP_MEMORY_2_SPEC_VERSION :: 1;
KHR_MAP_MEMORY_2_EXTENSION_NAME :: "VK_KHR_map_memory2";

KHR_shader_integer_dot_product :: 1;
KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION :: 1;
KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME :: "VK_KHR_shader_integer_dot_product";

KHR_pipeline_library :: 1;
KHR_PIPELINE_LIBRARY_SPEC_VERSION :: 1;
KHR_PIPELINE_LIBRARY_EXTENSION_NAME :: "VK_KHR_pipeline_library";

KHR_shader_non_semantic_info :: 1;
KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION :: 1;
KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME :: "VK_KHR_shader_non_semantic_info";

KHR_present_id :: 1;
KHR_PRESENT_ID_SPEC_VERSION :: 1;
KHR_PRESENT_ID_EXTENSION_NAME :: "VK_KHR_present_id";

KHR_synchronization2 :: 1;
KHR_SYNCHRONIZATION_2_SPEC_VERSION :: 1;
KHR_SYNCHRONIZATION_2_EXTENSION_NAME :: "VK_KHR_synchronization2";

KHR_fragment_shader_barycentric :: 1;
KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION :: 1;
KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME :: "VK_KHR_fragment_shader_barycentric";

KHR_shader_subgroup_uniform_control_flow :: 1;
KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION :: 1;
KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME :: "VK_KHR_shader_subgroup_uniform_control_flow";

KHR_zero_initialize_workgroup_memory :: 1;
KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION :: 1;
KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME :: "VK_KHR_zero_initialize_workgroup_memory";

KHR_workgroup_memory_explicit_layout :: 1;
KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION :: 1;
KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME :: "VK_KHR_workgroup_memory_explicit_layout";

KHR_copy_commands2 :: 1;
KHR_COPY_COMMANDS_2_SPEC_VERSION :: 1;
KHR_COPY_COMMANDS_2_EXTENSION_NAME :: "VK_KHR_copy_commands2";

KHR_format_feature_flags2 :: 1;
KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION :: 2;
KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME :: "VK_KHR_format_feature_flags2";

KHR_ray_tracing_maintenance1 :: 1;
KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION :: 1;
KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME :: "VK_KHR_ray_tracing_maintenance1";

KHR_portability_enumeration :: 1;
KHR_PORTABILITY_ENUMERATION_SPEC_VERSION :: 1;
KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME :: "VK_KHR_portability_enumeration";

KHR_maintenance4 :: 1;
KHR_MAINTENANCE_4_SPEC_VERSION :: 2;
KHR_MAINTENANCE_4_EXTENSION_NAME :: "VK_KHR_maintenance4";

KHR_ray_tracing_position_fetch :: 1;
KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION :: 1;
KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME :: "VK_KHR_ray_tracing_position_fetch";

EXT_debug_report :: 1;

EXT_DEBUG_REPORT_SPEC_VERSION :: 10;
EXT_DEBUG_REPORT_EXTENSION_NAME :: "VK_EXT_debug_report";

NV_glsl_shader :: 1;
NV_GLSL_SHADER_SPEC_VERSION :: 1;
NV_GLSL_SHADER_EXTENSION_NAME :: "VK_NV_glsl_shader";

EXT_depth_range_unrestricted :: 1;
EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION :: 1;
EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME :: "VK_EXT_depth_range_unrestricted";

IMG_filter_cubic :: 1;
IMG_FILTER_CUBIC_SPEC_VERSION :: 1;
IMG_FILTER_CUBIC_EXTENSION_NAME :: "VK_IMG_filter_cubic";

AMD_rasterization_order :: 1;
AMD_RASTERIZATION_ORDER_SPEC_VERSION :: 1;
AMD_RASTERIZATION_ORDER_EXTENSION_NAME :: "VK_AMD_rasterization_order";

AMD_shader_trinary_minmax :: 1;
AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION :: 1;
AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME :: "VK_AMD_shader_trinary_minmax";

AMD_shader_explicit_vertex_parameter :: 1;
AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION :: 1;
AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME :: "VK_AMD_shader_explicit_vertex_parameter";

EXT_debug_marker :: 1;
EXT_DEBUG_MARKER_SPEC_VERSION :: 4;
EXT_DEBUG_MARKER_EXTENSION_NAME :: "VK_EXT_debug_marker";

AMD_gcn_shader :: 1;
AMD_GCN_SHADER_SPEC_VERSION :: 1;
AMD_GCN_SHADER_EXTENSION_NAME :: "VK_AMD_gcn_shader";

NV_dedicated_allocation :: 1;
NV_DEDICATED_ALLOCATION_SPEC_VERSION :: 1;
NV_DEDICATED_ALLOCATION_EXTENSION_NAME :: "VK_NV_dedicated_allocation";

EXT_transform_feedback :: 1;
EXT_TRANSFORM_FEEDBACK_SPEC_VERSION :: 1;
EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME :: "VK_EXT_transform_feedback";

NVX_binary_import :: 1;

NVX_BINARY_IMPORT_SPEC_VERSION :: 1;
NVX_BINARY_IMPORT_EXTENSION_NAME :: "VK_NVX_binary_import";

NVX_image_view_handle :: 1;
NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION :: 2;
NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME :: "VK_NVX_image_view_handle";

AMD_draw_indirect_count :: 1;
AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION :: 2;
AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME :: "VK_AMD_draw_indirect_count";

AMD_negative_viewport_height :: 1;
AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION :: 1;
AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME :: "VK_AMD_negative_viewport_height";

AMD_gpu_shader_half_float :: 1;
AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION :: 2;
AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME :: "VK_AMD_gpu_shader_half_float";

AMD_shader_ballot :: 1;
AMD_SHADER_BALLOT_SPEC_VERSION :: 1;
AMD_SHADER_BALLOT_EXTENSION_NAME :: "VK_AMD_shader_ballot";

AMD_texture_gather_bias_lod :: 1;
AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION :: 1;
AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME :: "VK_AMD_texture_gather_bias_lod";

AMD_shader_info :: 1;
AMD_SHADER_INFO_SPEC_VERSION :: 1;
AMD_SHADER_INFO_EXTENSION_NAME :: "VK_AMD_shader_info";

AMD_shader_image_load_store_lod :: 1;
AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION :: 1;
AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME :: "VK_AMD_shader_image_load_store_lod";

NV_corner_sampled_image :: 1;
NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION :: 2;
NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME :: "VK_NV_corner_sampled_image";

IMG_format_pvrtc :: 1;
IMG_FORMAT_PVRTC_SPEC_VERSION :: 1;
IMG_FORMAT_PVRTC_EXTENSION_NAME :: "VK_IMG_format_pvrtc";

NV_external_memory_capabilities :: 1;
NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION :: 1;
NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME :: "VK_NV_external_memory_capabilities";

NV_external_memory :: 1;
NV_EXTERNAL_MEMORY_SPEC_VERSION :: 1;
NV_EXTERNAL_MEMORY_EXTENSION_NAME :: "VK_NV_external_memory";

EXT_validation_flags :: 1;
EXT_VALIDATION_FLAGS_SPEC_VERSION :: 2;
EXT_VALIDATION_FLAGS_EXTENSION_NAME :: "VK_EXT_validation_flags";

EXT_shader_subgroup_ballot :: 1;
EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION :: 1;
EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME :: "VK_EXT_shader_subgroup_ballot";

EXT_shader_subgroup_vote :: 1;
EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION :: 1;
EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME :: "VK_EXT_shader_subgroup_vote";

EXT_texture_compression_astc_hdr :: 1;
EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION :: 1;
EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME :: "VK_EXT_texture_compression_astc_hdr";

EXT_astc_decode_mode :: 1;
EXT_ASTC_DECODE_MODE_SPEC_VERSION :: 1;
EXT_ASTC_DECODE_MODE_EXTENSION_NAME :: "VK_EXT_astc_decode_mode";

EXT_pipeline_robustness :: 1;
EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION :: 1;
EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME :: "VK_EXT_pipeline_robustness";

EXT_conditional_rendering :: 1;
EXT_CONDITIONAL_RENDERING_SPEC_VERSION :: 2;
EXT_CONDITIONAL_RENDERING_EXTENSION_NAME :: "VK_EXT_conditional_rendering";

NV_clip_space_w_scaling :: 1;
NV_CLIP_SPACE_W_SCALING_SPEC_VERSION :: 1;
NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME :: "VK_NV_clip_space_w_scaling";

EXT_direct_mode_display :: 1;
EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION :: 1;
EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME :: "VK_EXT_direct_mode_display";

EXT_display_surface_counter :: 1;
EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION :: 1;
EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME :: "VK_EXT_display_surface_counter";

EXT_display_control :: 1;
EXT_DISPLAY_CONTROL_SPEC_VERSION :: 1;
EXT_DISPLAY_CONTROL_EXTENSION_NAME :: "VK_EXT_display_control";

GOOGLE_display_timing :: 1;
GOOGLE_DISPLAY_TIMING_SPEC_VERSION :: 1;
GOOGLE_DISPLAY_TIMING_EXTENSION_NAME :: "VK_GOOGLE_display_timing";

NV_sample_mask_override_coverage :: 1;
NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION :: 1;
NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME :: "VK_NV_sample_mask_override_coverage";

NV_geometry_shader_passthrough :: 1;
NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION :: 1;
NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME :: "VK_NV_geometry_shader_passthrough";

NV_viewport_array2 :: 1;
NV_VIEWPORT_ARRAY_2_SPEC_VERSION :: 1;
NV_VIEWPORT_ARRAY_2_EXTENSION_NAME :: "VK_NV_viewport_array2";
NV_VIEWPORT_ARRAY2_SPEC_VERSION :: NV_VIEWPORT_ARRAY_2_SPEC_VERSION;
NV_VIEWPORT_ARRAY2_EXTENSION_NAME :: NV_VIEWPORT_ARRAY_2_EXTENSION_NAME;

NVX_multiview_per_view_attributes :: 1;
NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION :: 1;
NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME :: "VK_NVX_multiview_per_view_attributes";

NV_viewport_swizzle :: 1;
NV_VIEWPORT_SWIZZLE_SPEC_VERSION :: 1;
NV_VIEWPORT_SWIZZLE_EXTENSION_NAME :: "VK_NV_viewport_swizzle";

EXT_discard_rectangles :: 1;
EXT_DISCARD_RECTANGLES_SPEC_VERSION :: 2;
EXT_DISCARD_RECTANGLES_EXTENSION_NAME :: "VK_EXT_discard_rectangles";

EXT_conservative_rasterization :: 1;
EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION :: 1;
EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME :: "VK_EXT_conservative_rasterization";

EXT_depth_clip_enable :: 1;
EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION :: 1;
EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME :: "VK_EXT_depth_clip_enable";

EXT_swapchain_colorspace :: 1;
EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION :: 4;
EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME :: "VK_EXT_swapchain_colorspace";

EXT_hdr_metadata :: 1;
EXT_HDR_METADATA_SPEC_VERSION :: 2;
EXT_HDR_METADATA_EXTENSION_NAME :: "VK_EXT_hdr_metadata";

EXT_external_memory_dma_buf :: 1;
EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION :: 1;
EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME :: "VK_EXT_external_memory_dma_buf";

EXT_queue_family_foreign :: 1;
EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION :: 1;
EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME :: "VK_EXT_queue_family_foreign";
QUEUE_FAMILY_FOREIGN_EXT :: ~2;

EXT_debug_utils :: 1;

EXT_DEBUG_UTILS_SPEC_VERSION :: 2;
EXT_DEBUG_UTILS_EXTENSION_NAME :: "VK_EXT_debug_utils";

EXT_sampler_filter_minmax :: 1;
EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION :: 2;
EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME :: "VK_EXT_sampler_filter_minmax";

AMD_gpu_shader_int16 :: 1;
AMD_GPU_SHADER_INT16_SPEC_VERSION :: 2;
AMD_GPU_SHADER_INT16_EXTENSION_NAME :: "VK_AMD_gpu_shader_int16";

AMD_mixed_attachment_samples :: 1;
AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION :: 1;
AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME :: "VK_AMD_mixed_attachment_samples";

AMD_shader_fragment_mask :: 1;
AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION :: 1;
AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME :: "VK_AMD_shader_fragment_mask";

EXT_inline_uniform_block :: 1;
EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION :: 1;
EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME :: "VK_EXT_inline_uniform_block";

EXT_shader_stencil_export :: 1;
EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION :: 1;
EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME :: "VK_EXT_shader_stencil_export";

EXT_sample_locations :: 1;
EXT_SAMPLE_LOCATIONS_SPEC_VERSION :: 1;
EXT_SAMPLE_LOCATIONS_EXTENSION_NAME :: "VK_EXT_sample_locations";

EXT_blend_operation_advanced :: 1;
EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION :: 2;
EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME :: "VK_EXT_blend_operation_advanced";

NV_fragment_coverage_to_color :: 1;
NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION :: 1;
NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME :: "VK_NV_fragment_coverage_to_color";

NV_framebuffer_mixed_samples :: 1;
NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION :: 1;
NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME :: "VK_NV_framebuffer_mixed_samples";

NV_fill_rectangle :: 1;
NV_FILL_RECTANGLE_SPEC_VERSION :: 1;
NV_FILL_RECTANGLE_EXTENSION_NAME :: "VK_NV_fill_rectangle";

NV_shader_sm_builtins :: 1;
NV_SHADER_SM_BUILTINS_SPEC_VERSION :: 1;
NV_SHADER_SM_BUILTINS_EXTENSION_NAME :: "VK_NV_shader_sm_builtins";

EXT_post_depth_coverage :: 1;
EXT_POST_DEPTH_COVERAGE_SPEC_VERSION :: 1;
EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME :: "VK_EXT_post_depth_coverage";

EXT_image_drm_format_modifier :: 1;
EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION :: 2;
EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME :: "VK_EXT_image_drm_format_modifier";

EXT_validation_cache :: 1;

EXT_VALIDATION_CACHE_SPEC_VERSION :: 1;
EXT_VALIDATION_CACHE_EXTENSION_NAME :: "VK_EXT_validation_cache";

EXT_descriptor_indexing :: 1;
EXT_DESCRIPTOR_INDEXING_SPEC_VERSION :: 2;
EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME :: "VK_EXT_descriptor_indexing";

EXT_shader_viewport_index_layer :: 1;
EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION :: 1;
EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME :: "VK_EXT_shader_viewport_index_layer";

NV_shading_rate_image :: 1;
NV_SHADING_RATE_IMAGE_SPEC_VERSION :: 3;
NV_SHADING_RATE_IMAGE_EXTENSION_NAME :: "VK_NV_shading_rate_image";

NV_ray_tracing :: 1;

NV_RAY_TRACING_SPEC_VERSION :: 3;
NV_RAY_TRACING_EXTENSION_NAME :: "VK_NV_ray_tracing";

SHADER_UNUSED_NV :: SHADER_UNUSED_KHR;

NV_representative_fragment_test :: 1;
NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION :: 2;
NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME :: "VK_NV_representative_fragment_test";

EXT_filter_cubic :: 1;
EXT_FILTER_CUBIC_SPEC_VERSION :: 3;
EXT_FILTER_CUBIC_EXTENSION_NAME :: "VK_EXT_filter_cubic";

QCOM_render_pass_shader_resolve :: 1;
QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION :: 4;
QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME :: "VK_QCOM_render_pass_shader_resolve";

EXT_global_priority :: 1;
EXT_GLOBAL_PRIORITY_SPEC_VERSION :: 2;
EXT_GLOBAL_PRIORITY_EXTENSION_NAME :: "VK_EXT_global_priority";

EXT_external_memory_host :: 1;
EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION :: 1;
EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME :: "VK_EXT_external_memory_host";

AMD_buffer_marker :: 1;
AMD_BUFFER_MARKER_SPEC_VERSION :: 1;
AMD_BUFFER_MARKER_EXTENSION_NAME :: "VK_AMD_buffer_marker";

AMD_pipeline_compiler_control :: 1;
AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION :: 1;
AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME :: "VK_AMD_pipeline_compiler_control";

EXT_calibrated_timestamps :: 1;
EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION :: 2;
EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME :: "VK_EXT_calibrated_timestamps";

AMD_shader_core_properties :: 1;
AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION :: 2;
AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME :: "VK_AMD_shader_core_properties";

AMD_memory_overallocation_behavior :: 1;
AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION :: 1;
AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME :: "VK_AMD_memory_overallocation_behavior";

EXT_vertex_attribute_divisor :: 1;
EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION :: 3;
EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME :: "VK_EXT_vertex_attribute_divisor";

EXT_pipeline_creation_feedback :: 1;
EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION :: 1;
EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME :: "VK_EXT_pipeline_creation_feedback";

NV_shader_subgroup_partitioned :: 1;
NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION :: 1;
NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME :: "VK_NV_shader_subgroup_partitioned";

NV_compute_shader_derivatives :: 1;
NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION :: 1;
NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME :: "VK_NV_compute_shader_derivatives";

NV_mesh_shader :: 1;
NV_MESH_SHADER_SPEC_VERSION :: 1;
NV_MESH_SHADER_EXTENSION_NAME :: "VK_NV_mesh_shader";

NV_fragment_shader_barycentric :: 1;
NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION :: 1;
NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME :: "VK_NV_fragment_shader_barycentric";

NV_shader_image_footprint :: 1;
NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION :: 2;
NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME :: "VK_NV_shader_image_footprint";

NV_scissor_exclusive :: 1;
NV_SCISSOR_EXCLUSIVE_SPEC_VERSION :: 2;
NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME :: "VK_NV_scissor_exclusive";

NV_device_diagnostic_checkpoints :: 1;
NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION :: 2;
NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME :: "VK_NV_device_diagnostic_checkpoints";

INTEL_shader_integer_functions2 :: 1;
INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION :: 1;
INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME :: "VK_INTEL_shader_integer_functions2";

INTEL_performance_query :: 1;

INTEL_PERFORMANCE_QUERY_SPEC_VERSION :: 2;
INTEL_PERFORMANCE_QUERY_EXTENSION_NAME :: "VK_INTEL_performance_query";

EXT_pci_bus_info :: 1;
EXT_PCI_BUS_INFO_SPEC_VERSION :: 2;
EXT_PCI_BUS_INFO_EXTENSION_NAME :: "VK_EXT_pci_bus_info";

AMD_display_native_hdr :: 1;
AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION :: 1;
AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME :: "VK_AMD_display_native_hdr";

EXT_fragment_density_map :: 1;
EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION :: 2;
EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME :: "VK_EXT_fragment_density_map";

EXT_scalar_block_layout :: 1;
EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION :: 1;
EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME :: "VK_EXT_scalar_block_layout";

GOOGLE_hlsl_functionality1 :: 1;
GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION :: 1;
GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME :: "VK_GOOGLE_hlsl_functionality1";
GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION :: GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION;
GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME :: GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME;

GOOGLE_decorate_string :: 1;
GOOGLE_DECORATE_STRING_SPEC_VERSION :: 1;
GOOGLE_DECORATE_STRING_EXTENSION_NAME :: "VK_GOOGLE_decorate_string";

EXT_subgroup_size_control :: 1;
EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION :: 2;
EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME :: "VK_EXT_subgroup_size_control";

AMD_shader_core_properties2 :: 1;
AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION :: 1;
AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME :: "VK_AMD_shader_core_properties2";

AMD_device_coherent_memory :: 1;
AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION :: 1;
AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME :: "VK_AMD_device_coherent_memory";

EXT_shader_image_atomic_int64 :: 1;
EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION :: 1;
EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME :: "VK_EXT_shader_image_atomic_int64";

EXT_memory_budget :: 1;
EXT_MEMORY_BUDGET_SPEC_VERSION :: 1;
EXT_MEMORY_BUDGET_EXTENSION_NAME :: "VK_EXT_memory_budget";

EXT_memory_priority :: 1;
EXT_MEMORY_PRIORITY_SPEC_VERSION :: 1;
EXT_MEMORY_PRIORITY_EXTENSION_NAME :: "VK_EXT_memory_priority";

NV_dedicated_allocation_image_aliasing :: 1;
NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION :: 1;
NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME :: "VK_NV_dedicated_allocation_image_aliasing";

EXT_buffer_device_address :: 1;
EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION :: 2;
EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME :: "VK_EXT_buffer_device_address";

EXT_tooling_info :: 1;
EXT_TOOLING_INFO_SPEC_VERSION :: 1;
EXT_TOOLING_INFO_EXTENSION_NAME :: "VK_EXT_tooling_info";

EXT_separate_stencil_usage :: 1;
EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION :: 1;
EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME :: "VK_EXT_separate_stencil_usage";

EXT_validation_features :: 1;
EXT_VALIDATION_FEATURES_SPEC_VERSION :: 5;
EXT_VALIDATION_FEATURES_EXTENSION_NAME :: "VK_EXT_validation_features";

NV_cooperative_matrix :: 1;
NV_COOPERATIVE_MATRIX_SPEC_VERSION :: 1;
NV_COOPERATIVE_MATRIX_EXTENSION_NAME :: "VK_NV_cooperative_matrix";

NV_coverage_reduction_mode :: 1;
NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION :: 1;
NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME :: "VK_NV_coverage_reduction_mode";

EXT_fragment_shader_interlock :: 1;
EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION :: 1;
EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME :: "VK_EXT_fragment_shader_interlock";

EXT_ycbcr_image_arrays :: 1;
EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION :: 1;
EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME :: "VK_EXT_ycbcr_image_arrays";

EXT_provoking_vertex :: 1;
EXT_PROVOKING_VERTEX_SPEC_VERSION :: 1;
EXT_PROVOKING_VERTEX_EXTENSION_NAME :: "VK_EXT_provoking_vertex";

EXT_headless_surface :: 1;
EXT_HEADLESS_SURFACE_SPEC_VERSION :: 1;
EXT_HEADLESS_SURFACE_EXTENSION_NAME :: "VK_EXT_headless_surface";

EXT_line_rasterization :: 1;
EXT_LINE_RASTERIZATION_SPEC_VERSION :: 1;
EXT_LINE_RASTERIZATION_EXTENSION_NAME :: "VK_EXT_line_rasterization";

EXT_shader_atomic_float :: 1;
EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION :: 1;
EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME :: "VK_EXT_shader_atomic_float";

EXT_host_query_reset :: 1;
EXT_HOST_QUERY_RESET_SPEC_VERSION :: 1;
EXT_HOST_QUERY_RESET_EXTENSION_NAME :: "VK_EXT_host_query_reset";

EXT_index_type_uint8 :: 1;
EXT_INDEX_TYPE_UINT8_SPEC_VERSION :: 1;
EXT_INDEX_TYPE_UINT8_EXTENSION_NAME :: "VK_EXT_index_type_uint8";

EXT_extended_dynamic_state :: 1;
EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION :: 1;
EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME :: "VK_EXT_extended_dynamic_state";

EXT_shader_atomic_float2 :: 1;
EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION :: 1;
EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME :: "VK_EXT_shader_atomic_float2";

EXT_surface_maintenance1 :: 1;
EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION :: 1;
EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME :: "VK_EXT_surface_maintenance1";

EXT_swapchain_maintenance1 :: 1;
EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION :: 1;
EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME :: "VK_EXT_swapchain_maintenance1";

EXT_shader_demote_to_helper_invocation :: 1;
EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION :: 1;
EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME :: "VK_EXT_shader_demote_to_helper_invocation";

NV_device_generated_commands :: 1;

NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION :: 3;
NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME :: "VK_NV_device_generated_commands";

NV_inherited_viewport_scissor :: 1;
NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION :: 1;
NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME :: "VK_NV_inherited_viewport_scissor";

EXT_texel_buffer_alignment :: 1;
EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION :: 1;
EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME :: "VK_EXT_texel_buffer_alignment";

QCOM_render_pass_transform :: 1;
QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION :: 3;
QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME :: "VK_QCOM_render_pass_transform";

EXT_device_memory_report :: 1;
EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION :: 2;
EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME :: "VK_EXT_device_memory_report";

EXT_acquire_drm_display :: 1;
EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION :: 1;
EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME :: "VK_EXT_acquire_drm_display";

EXT_robustness2 :: 1;
EXT_ROBUSTNESS_2_SPEC_VERSION :: 1;
EXT_ROBUSTNESS_2_EXTENSION_NAME :: "VK_EXT_robustness2";

EXT_custom_border_color :: 1;
EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION :: 12;
EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME :: "VK_EXT_custom_border_color";

GOOGLE_user_type :: 1;
GOOGLE_USER_TYPE_SPEC_VERSION :: 1;
GOOGLE_USER_TYPE_EXTENSION_NAME :: "VK_GOOGLE_user_type";

NV_present_barrier :: 1;
NV_PRESENT_BARRIER_SPEC_VERSION :: 1;
NV_PRESENT_BARRIER_EXTENSION_NAME :: "VK_NV_present_barrier";

EXT_private_data :: 1;

EXT_PRIVATE_DATA_SPEC_VERSION :: 1;
EXT_PRIVATE_DATA_EXTENSION_NAME :: "VK_EXT_private_data";

EXT_pipeline_creation_cache_control :: 1;
EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION :: 3;
EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME :: "VK_EXT_pipeline_creation_cache_control";

NV_device_diagnostics_config :: 1;
NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION :: 2;
NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME :: "VK_NV_device_diagnostics_config";

QCOM_render_pass_store_ops :: 1;
QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION :: 2;
QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME :: "VK_QCOM_render_pass_store_ops";

NV_low_latency :: 1;
NV_LOW_LATENCY_SPEC_VERSION :: 1;
NV_LOW_LATENCY_EXTENSION_NAME :: "VK_NV_low_latency";

EXT_descriptor_buffer :: 1;

EXT_DESCRIPTOR_BUFFER_SPEC_VERSION :: 1;
EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME :: "VK_EXT_descriptor_buffer";

EXT_graphics_pipeline_library :: 1;
EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION :: 1;
EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME :: "VK_EXT_graphics_pipeline_library";

AMD_shader_early_and_late_fragment_tests :: 1;
AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION :: 1;
AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME :: "VK_AMD_shader_early_and_late_fragment_tests";

NV_fragment_shading_rate_enums :: 1;
NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION :: 1;
NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME :: "VK_NV_fragment_shading_rate_enums";

NV_ray_tracing_motion_blur :: 1;
NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION :: 1;
NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME :: "VK_NV_ray_tracing_motion_blur";

EXT_ycbcr_2plane_444_formats :: 1;
EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION :: 1;
EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME :: "VK_EXT_ycbcr_2plane_444_formats";

EXT_fragment_density_map2 :: 1;
EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION :: 1;
EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME :: "VK_EXT_fragment_density_map2";

QCOM_rotated_copy_commands :: 1;
QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION :: 1;
QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME :: "VK_QCOM_rotated_copy_commands";

EXT_image_robustness :: 1;
EXT_IMAGE_ROBUSTNESS_SPEC_VERSION :: 1;
EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME :: "VK_EXT_image_robustness";

EXT_image_compression_control :: 1;
EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION :: 1;
EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME :: "VK_EXT_image_compression_control";

EXT_attachment_feedback_loop_layout :: 1;
EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION :: 2;
EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME :: "VK_EXT_attachment_feedback_loop_layout";

EXT_4444_formats :: 1;
EXT_4444_FORMATS_SPEC_VERSION :: 1;
EXT_4444_FORMATS_EXTENSION_NAME :: "VK_EXT_4444_formats";

EXT_device_fault :: 1;
EXT_DEVICE_FAULT_SPEC_VERSION :: 2;
EXT_DEVICE_FAULT_EXTENSION_NAME :: "VK_EXT_device_fault";

ARM_rasterization_order_attachment_access :: 1;
ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION :: 1;
ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME :: "VK_ARM_rasterization_order_attachment_access";

EXT_rgba10x6_formats :: 1;
EXT_RGBA10X6_FORMATS_SPEC_VERSION :: 1;
EXT_RGBA10X6_FORMATS_EXTENSION_NAME :: "VK_EXT_rgba10x6_formats";

VALVE_mutable_descriptor_type :: 1;
VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION :: 1;
VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME :: "VK_VALVE_mutable_descriptor_type";

EXT_vertex_input_dynamic_state :: 1;
EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION :: 2;
EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME :: "VK_EXT_vertex_input_dynamic_state";

EXT_physical_device_drm :: 1;
EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION :: 1;
EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME :: "VK_EXT_physical_device_drm";

EXT_device_address_binding_report :: 1;
EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION :: 1;
EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME :: "VK_EXT_device_address_binding_report";

EXT_depth_clip_control :: 1;
EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION :: 1;
EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME :: "VK_EXT_depth_clip_control";

EXT_primitive_topology_list_restart :: 1;
EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION :: 1;
EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME :: "VK_EXT_primitive_topology_list_restart";

HUAWEI_subpass_shading :: 1;
HUAWEI_SUBPASS_SHADING_SPEC_VERSION :: 2;
HUAWEI_SUBPASS_SHADING_EXTENSION_NAME :: "VK_HUAWEI_subpass_shading";

HUAWEI_invocation_mask :: 1;
HUAWEI_INVOCATION_MASK_SPEC_VERSION :: 1;
HUAWEI_INVOCATION_MASK_EXTENSION_NAME :: "VK_HUAWEI_invocation_mask";

NV_external_memory_rdma :: 1;

NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION :: 1;
NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME :: "VK_NV_external_memory_rdma";

EXT_pipeline_properties :: 1;
EXT_PIPELINE_PROPERTIES_SPEC_VERSION :: 1;
EXT_PIPELINE_PROPERTIES_EXTENSION_NAME :: "VK_EXT_pipeline_properties";

EXT_multisampled_render_to_single_sampled :: 1;
EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION :: 1;
EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME :: "VK_EXT_multisampled_render_to_single_sampled";

EXT_extended_dynamic_state2 :: 1;
EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION :: 1;
EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME :: "VK_EXT_extended_dynamic_state2";

EXT_color_write_enable :: 1;
EXT_COLOR_WRITE_ENABLE_SPEC_VERSION :: 1;
EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME :: "VK_EXT_color_write_enable";

EXT_primitives_generated_query :: 1;
EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION :: 1;
EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME :: "VK_EXT_primitives_generated_query";

EXT_global_priority_query :: 1;
EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION :: 1;
EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME :: "VK_EXT_global_priority_query";
MAX_GLOBAL_PRIORITY_SIZE_EXT :: MAX_GLOBAL_PRIORITY_SIZE_KHR;

EXT_image_view_min_lod :: 1;
EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION :: 1;
EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME :: "VK_EXT_image_view_min_lod";

EXT_multi_draw :: 1;
EXT_MULTI_DRAW_SPEC_VERSION :: 1;
EXT_MULTI_DRAW_EXTENSION_NAME :: "VK_EXT_multi_draw";

EXT_image_2d_view_of_3d :: 1;
EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION :: 1;
EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME :: "VK_EXT_image_2d_view_of_3d";

EXT_shader_tile_image :: 1;
EXT_SHADER_TILE_IMAGE_SPEC_VERSION :: 1;
EXT_SHADER_TILE_IMAGE_EXTENSION_NAME :: "VK_EXT_shader_tile_image";

EXT_opacity_micromap :: 1;

EXT_OPACITY_MICROMAP_SPEC_VERSION :: 2;
EXT_OPACITY_MICROMAP_EXTENSION_NAME :: "VK_EXT_opacity_micromap";

EXT_load_store_op_none :: 1;
EXT_LOAD_STORE_OP_NONE_SPEC_VERSION :: 1;
EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME :: "VK_EXT_load_store_op_none";

HUAWEI_cluster_culling_shader :: 1;
HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION :: 2;
HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME :: "VK_HUAWEI_cluster_culling_shader";

EXT_border_color_swizzle :: 1;
EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION :: 1;
EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME :: "VK_EXT_border_color_swizzle";

EXT_pageable_device_local_memory :: 1;
EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION :: 1;
EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME :: "VK_EXT_pageable_device_local_memory";

ARM_shader_core_properties :: 1;
ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION :: 1;
ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME :: "VK_ARM_shader_core_properties";

EXT_image_sliced_view_of_3d :: 1;
EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION :: 1;
EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME :: "VK_EXT_image_sliced_view_of_3d";

VALVE_descriptor_set_host_mapping :: 1;
VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION :: 1;
VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME :: "VK_VALVE_descriptor_set_host_mapping";

EXT_depth_clamp_zero_one :: 1;
EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION :: 1;
EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME :: "VK_EXT_depth_clamp_zero_one";

EXT_non_seamless_cube_map :: 1;
EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION :: 1;
EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME :: "VK_EXT_non_seamless_cube_map";

QCOM_fragment_density_map_offset :: 1;
QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION :: 1;
QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME :: "VK_QCOM_fragment_density_map_offset";

NV_copy_memory_indirect :: 1;
NV_COPY_MEMORY_INDIRECT_SPEC_VERSION :: 1;
NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME :: "VK_NV_copy_memory_indirect";

NV_memory_decompression :: 1;
NV_MEMORY_DECOMPRESSION_SPEC_VERSION :: 1;
NV_MEMORY_DECOMPRESSION_EXTENSION_NAME :: "VK_NV_memory_decompression";

NV_linear_color_attachment :: 1;
NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION :: 1;
NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME :: "VK_NV_linear_color_attachment";

GOOGLE_surfaceless_query :: 1;
GOOGLE_SURFACELESS_QUERY_SPEC_VERSION :: 2;
GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME :: "VK_GOOGLE_surfaceless_query";

EXT_image_compression_control_swapchain :: 1;
EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION :: 1;
EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME :: "VK_EXT_image_compression_control_swapchain";

QCOM_image_processing :: 1;
QCOM_IMAGE_PROCESSING_SPEC_VERSION :: 1;
QCOM_IMAGE_PROCESSING_EXTENSION_NAME :: "VK_QCOM_image_processing";

EXT_extended_dynamic_state3 :: 1;
EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION :: 2;
EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME :: "VK_EXT_extended_dynamic_state3";

EXT_subpass_merge_feedback :: 1;
EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION :: 2;
EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME :: "VK_EXT_subpass_merge_feedback";

LUNARG_direct_driver_loading :: 1;
LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION :: 1;
LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME :: "VK_LUNARG_direct_driver_loading";

EXT_shader_module_identifier :: 1;
MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT :: 32;
EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION :: 1;
EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME :: "VK_EXT_shader_module_identifier";

EXT_rasterization_order_attachment_access :: 1;
EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION :: 1;
EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME :: "VK_EXT_rasterization_order_attachment_access";

NV_optical_flow :: 1;

NV_OPTICAL_FLOW_SPEC_VERSION :: 1;
NV_OPTICAL_FLOW_EXTENSION_NAME :: "VK_NV_optical_flow";

EXT_legacy_dithering :: 1;
EXT_LEGACY_DITHERING_SPEC_VERSION :: 1;
EXT_LEGACY_DITHERING_EXTENSION_NAME :: "VK_EXT_legacy_dithering";

EXT_pipeline_protected_access :: 1;
EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION :: 1;
EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME :: "VK_EXT_pipeline_protected_access";

EXT_shader_object :: 1;

EXT_SHADER_OBJECT_SPEC_VERSION :: 1;
EXT_SHADER_OBJECT_EXTENSION_NAME :: "VK_EXT_shader_object";

QCOM_tile_properties :: 1;
QCOM_TILE_PROPERTIES_SPEC_VERSION :: 1;
QCOM_TILE_PROPERTIES_EXTENSION_NAME :: "VK_QCOM_tile_properties";

SEC_amigo_profiling :: 1;
SEC_AMIGO_PROFILING_SPEC_VERSION :: 1;
SEC_AMIGO_PROFILING_EXTENSION_NAME :: "VK_SEC_amigo_profiling";

QCOM_multiview_per_view_viewports :: 1;
QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION :: 1;
QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME :: "VK_QCOM_multiview_per_view_viewports";

NV_ray_tracing_invocation_reorder :: 1;
NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION :: 1;
NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME :: "VK_NV_ray_tracing_invocation_reorder";

EXT_mutable_descriptor_type :: 1;
EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION :: 1;
EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME :: "VK_EXT_mutable_descriptor_type";

ARM_shader_core_builtins :: 1;
ARM_SHADER_CORE_BUILTINS_SPEC_VERSION :: 2;
ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME :: "VK_ARM_shader_core_builtins";

EXT_pipeline_library_group_handles :: 1;
EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION :: 1;
EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME :: "VK_EXT_pipeline_library_group_handles";

QCOM_multiview_per_view_render_areas :: 1;
QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION :: 1;
QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME :: "VK_QCOM_multiview_per_view_render_areas";

EXT_attachment_feedback_loop_dynamic_state :: 1;
EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION :: 1;
EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME :: "VK_EXT_attachment_feedback_loop_dynamic_state";

KHR_acceleration_structure :: 1;
KHR_ACCELERATION_STRUCTURE_SPEC_VERSION :: 13;
KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME :: "VK_KHR_acceleration_structure";

KHR_ray_tracing_pipeline :: 1;
KHR_RAY_TRACING_PIPELINE_SPEC_VERSION :: 1;
KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME :: "VK_KHR_ray_tracing_pipeline";

KHR_ray_query :: 1;
KHR_RAY_QUERY_SPEC_VERSION :: 1;
KHR_RAY_QUERY_EXTENSION_NAME :: "VK_KHR_ray_query";

EXT_mesh_shader :: 1;
EXT_MESH_SHADER_SPEC_VERSION :: 1;
EXT_MESH_SHADER_EXTENSION_NAME :: "VK_EXT_mesh_shader";

KHR_xlib_surface :: 1;
KHR_XLIB_SURFACE_SPEC_VERSION :: 6;
KHR_XLIB_SURFACE_EXTENSION_NAME :: "VK_KHR_xlib_surface";

DeviceAddress :: u64;
DeviceSize :: u64;
Flags :: u32;
SampleMask :: u32;
Buffer_T :: struct {}
Buffer :: *Buffer_T;
Image_T :: struct {}
Image :: *Image_T;
Instance_T :: struct {}
Instance :: *Instance_T;
PhysicalDevice_T :: struct {}
PhysicalDevice :: *PhysicalDevice_T;
Device_T :: struct {}
Device :: *Device_T;
Queue_T :: struct {}
Queue :: *Queue_T;
Semaphore_T :: struct {}
Semaphore :: *Semaphore_T;
CommandBuffer_T :: struct {}
CommandBuffer :: *CommandBuffer_T;
Fence_T :: struct {}
Fence :: *Fence_T;
DeviceMemory_T :: struct {}
DeviceMemory :: *DeviceMemory_T;
Event_T :: struct {}
Event :: *Event_T;
QueryPool_T :: struct {}
QueryPool :: *QueryPool_T;
BufferView_T :: struct {}
BufferView :: *BufferView_T;
ImageView_T :: struct {}
ImageView :: *ImageView_T;
ShaderModule_T :: struct {}
ShaderModule :: *ShaderModule_T;
PipelineCache_T :: struct {}
PipelineCache :: *PipelineCache_T;
PipelineLayout_T :: struct {}
PipelineLayout :: *PipelineLayout_T;
Pipeline_T :: struct {}
Pipeline :: *Pipeline_T;
RenderPass_T :: struct {}
RenderPass :: *RenderPass_T;
DescriptorSetLayout_T :: struct {}
DescriptorSetLayout :: *DescriptorSetLayout_T;
Sampler_T :: struct {}
Sampler :: *Sampler_T;
DescriptorSet_T :: struct {}
DescriptorSet :: *DescriptorSet_T;
DescriptorPool_T :: struct {}
DescriptorPool :: *DescriptorPool_T;
Framebuffer_T :: struct {}
Framebuffer :: *Framebuffer_T;
CommandPool_T :: struct {}
CommandPool :: *CommandPool_T;

Result :: enum s32 {
    SUCCESS                                            :: 0;
    NOT_READY                                          :: 1;
    TIMEOUT                                            :: 2;
    EVENT_SET                                          :: 3;
    EVENT_RESET                                        :: 4;
    INCOMPLETE                                         :: 5;
    ERROR_OUT_OF_HOST_MEMORY                           :: -1;
    ERROR_OUT_OF_DEVICE_MEMORY                         :: -2;
    ERROR_INITIALIZATION_FAILED                        :: -3;
    ERROR_DEVICE_LOST                                  :: -4;
    ERROR_MEMORY_MAP_FAILED                            :: -5;
    ERROR_LAYER_NOT_PRESENT                            :: -6;
    ERROR_EXTENSION_NOT_PRESENT                        :: -7;
    ERROR_FEATURE_NOT_PRESENT                          :: -8;
    ERROR_INCOMPATIBLE_DRIVER                          :: -9;
    ERROR_TOO_MANY_OBJECTS                             :: -10;
    ERROR_FORMAT_NOT_SUPPORTED                         :: -11;
    ERROR_FRAGMENTED_POOL                              :: -12;
    ERROR_UNKNOWN                                      :: -13;
    ERROR_OUT_OF_POOL_MEMORY                           :: -1000069000;
    ERROR_INVALID_EXTERNAL_HANDLE                      :: -1000072003;
    ERROR_FRAGMENTATION                                :: -1000161000;
    ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS               :: -1000257000;
    PIPELINE_COMPILE_REQUIRED                          :: 1000297000;
    ERROR_SURFACE_LOST_KHR                             :: -1000000000;
    ERROR_NATIVE_WINDOW_IN_USE_KHR                     :: -1000000001;
    SUBOPTIMAL_KHR                                     :: 1000001003;
    ERROR_OUT_OF_DATE_KHR                              :: -1000001004;
    ERROR_INCOMPATIBLE_DISPLAY_KHR                     :: -1000003001;
    ERROR_VALIDATION_FAILED_EXT                        :: -1000011001;
    ERROR_INVALID_SHADER_NV                            :: -1000012000;
    ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR                :: -1000023000;
    ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR       :: -1000023001;
    ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR    :: -1000023002;
    ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR       :: -1000023003;
    ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR        :: -1000023004;
    ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR          :: -1000023005;
    ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT :: -1000158000;
    ERROR_NOT_PERMITTED_KHR                            :: -1000174001;
    ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT          :: -1000255000;
    THREAD_IDLE_KHR                                    :: 1000268000;
    THREAD_DONE_KHR                                    :: 1000268001;
    OPERATION_DEFERRED_KHR                             :: 1000268002;
    OPERATION_NOT_DEFERRED_KHR                         :: 1000268003;

    ERROR_COMPRESSION_EXHAUSTED_EXT                    :: -1000338000;
    ERROR_INCOMPATIBLE_SHADER_BINARY_EXT               :: 1000482000;
    ERROR_OUT_OF_POOL_MEMORY_KHR                       :: -1000069000;
    ERROR_INVALID_EXTERNAL_HANDLE_KHR                  :: -1000072003;
    ERROR_FRAGMENTATION_EXT                            :: -1000161000;
    ERROR_NOT_PERMITTED_EXT                            :: -1000174001;
    ERROR_INVALID_DEVICE_ADDRESS_EXT                   :: -1000257000;
    ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR           :: -1000257000;
    PIPELINE_COMPILE_REQUIRED_EXT                      :: 1000297000;
    ERROR_PIPELINE_COMPILE_REQUIRED_EXT                :: 1000297000;
    RESULT_MAX_ENUM                                    :: 2147483647;

    VK_SUCCESS                                            :: SUCCESS;
    VK_NOT_READY                                          :: NOT_READY;
    VK_TIMEOUT                                            :: TIMEOUT;
    VK_EVENT_SET                                          :: EVENT_SET;
    VK_EVENT_RESET                                        :: EVENT_RESET;
    VK_INCOMPLETE                                         :: INCOMPLETE;
    VK_ERROR_OUT_OF_HOST_MEMORY                           :: ERROR_OUT_OF_HOST_MEMORY;
    VK_ERROR_OUT_OF_DEVICE_MEMORY                         :: ERROR_OUT_OF_DEVICE_MEMORY;
    VK_ERROR_INITIALIZATION_FAILED                        :: ERROR_INITIALIZATION_FAILED;
    VK_ERROR_DEVICE_LOST                                  :: ERROR_DEVICE_LOST;
    VK_ERROR_MEMORY_MAP_FAILED                            :: ERROR_MEMORY_MAP_FAILED;
    VK_ERROR_LAYER_NOT_PRESENT                            :: ERROR_LAYER_NOT_PRESENT;
    VK_ERROR_EXTENSION_NOT_PRESENT                        :: ERROR_EXTENSION_NOT_PRESENT;
    VK_ERROR_FEATURE_NOT_PRESENT                          :: ERROR_FEATURE_NOT_PRESENT;
    VK_ERROR_INCOMPATIBLE_DRIVER                          :: ERROR_INCOMPATIBLE_DRIVER;
    VK_ERROR_TOO_MANY_OBJECTS                             :: ERROR_TOO_MANY_OBJECTS;
    VK_ERROR_FORMAT_NOT_SUPPORTED                         :: ERROR_FORMAT_NOT_SUPPORTED;
    VK_ERROR_FRAGMENTED_POOL                              :: ERROR_FRAGMENTED_POOL;
    VK_ERROR_UNKNOWN                                      :: ERROR_UNKNOWN;
    VK_ERROR_OUT_OF_POOL_MEMORY                           :: ERROR_OUT_OF_POOL_MEMORY;
    VK_ERROR_INVALID_EXTERNAL_HANDLE                      :: ERROR_INVALID_EXTERNAL_HANDLE;
    VK_ERROR_FRAGMENTATION                                :: ERROR_FRAGMENTATION;
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS               :: ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
    VK_PIPELINE_COMPILE_REQUIRED                          :: PIPELINE_COMPILE_REQUIRED;
    VK_ERROR_SURFACE_LOST_KHR                             :: ERROR_SURFACE_LOST_KHR;
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR                     :: ERROR_NATIVE_WINDOW_IN_USE_KHR;
    VK_SUBOPTIMAL_KHR                                     :: SUBOPTIMAL_KHR;
    VK_ERROR_OUT_OF_DATE_KHR                              :: ERROR_OUT_OF_DATE_KHR;
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR                     :: ERROR_INCOMPATIBLE_DISPLAY_KHR;
    VK_ERROR_VALIDATION_FAILED_EXT                        :: ERROR_VALIDATION_FAILED_EXT;
    VK_ERROR_INVALID_SHADER_NV                            :: ERROR_INVALID_SHADER_NV;
    VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR                :: ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR;
    VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR       :: ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR;
    VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR    :: ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR;
    VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR       :: ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR;
    VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR        :: ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR;
    VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR          :: ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR;
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT :: ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT;
    VK_ERROR_NOT_PERMITTED_KHR                            :: ERROR_NOT_PERMITTED_KHR;
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT          :: ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT;
    VK_THREAD_IDLE_KHR                                    :: THREAD_IDLE_KHR;
    VK_THREAD_DONE_KHR                                    :: THREAD_DONE_KHR;
    VK_OPERATION_DEFERRED_KHR                             :: OPERATION_DEFERRED_KHR;
    VK_OPERATION_NOT_DEFERRED_KHR                         :: OPERATION_NOT_DEFERRED_KHR;

    VK_ERROR_COMPRESSION_EXHAUSTED_EXT                    :: ERROR_COMPRESSION_EXHAUSTED_EXT;
    VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT               :: ERROR_INCOMPATIBLE_SHADER_BINARY_EXT;
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR                       :: ERROR_OUT_OF_POOL_MEMORY_KHR;
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR                  :: ERROR_INVALID_EXTERNAL_HANDLE_KHR;
    VK_ERROR_FRAGMENTATION_EXT                            :: ERROR_FRAGMENTATION_EXT;
    VK_ERROR_NOT_PERMITTED_EXT                            :: ERROR_NOT_PERMITTED_EXT;
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT                   :: ERROR_INVALID_DEVICE_ADDRESS_EXT;
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR           :: ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR;
    VK_PIPELINE_COMPILE_REQUIRED_EXT                      :: PIPELINE_COMPILE_REQUIRED_EXT;
    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT                :: ERROR_PIPELINE_COMPILE_REQUIRED_EXT;
    VK_RESULT_MAX_ENUM                                    :: RESULT_MAX_ENUM;
}

StructureType :: enum u32 {
    APPLICATION_INFO                                                    :: 0;
    INSTANCE_CREATE_INFO                                                :: 1;
    DEVICE_QUEUE_CREATE_INFO                                            :: 2;
    DEVICE_CREATE_INFO                                                  :: 3;
    SUBMIT_INFO                                                         :: 4;
    MEMORY_ALLOCATE_INFO                                                :: 5;
    MAPPED_MEMORY_RANGE                                                 :: 6;
    BIND_SPARSE_INFO                                                    :: 7;
    FENCE_CREATE_INFO                                                   :: 8;
    SEMAPHORE_CREATE_INFO                                               :: 9;
    EVENT_CREATE_INFO                                                   :: 10;
    QUERY_POOL_CREATE_INFO                                              :: 11;
    BUFFER_CREATE_INFO                                                  :: 12;
    BUFFER_VIEW_CREATE_INFO                                             :: 13;
    IMAGE_CREATE_INFO                                                   :: 14;
    IMAGE_VIEW_CREATE_INFO                                              :: 15;
    SHADER_MODULE_CREATE_INFO                                           :: 16;
    PIPELINE_CACHE_CREATE_INFO                                          :: 17;
    PIPELINE_SHADER_STAGE_CREATE_INFO                                   :: 18;
    PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO                             :: 19;
    PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO                           :: 20;
    PIPELINE_TESSELLATION_STATE_CREATE_INFO                             :: 21;
    PIPELINE_VIEWPORT_STATE_CREATE_INFO                                 :: 22;
    PIPELINE_RASTERIZATION_STATE_CREATE_INFO                            :: 23;
    PIPELINE_MULTISAMPLE_STATE_CREATE_INFO                              :: 24;
    PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO                            :: 25;
    PIPELINE_COLOR_BLEND_STATE_CREATE_INFO                              :: 26;
    PIPELINE_DYNAMIC_STATE_CREATE_INFO                                  :: 27;
    GRAPHICS_PIPELINE_CREATE_INFO                                       :: 28;
    COMPUTE_PIPELINE_CREATE_INFO                                        :: 29;
    PIPELINE_LAYOUT_CREATE_INFO                                         :: 30;
    SAMPLER_CREATE_INFO                                                 :: 31;
    DESCRIPTOR_SET_LAYOUT_CREATE_INFO                                   :: 32;
    DESCRIPTOR_POOL_CREATE_INFO                                         :: 33;
    DESCRIPTOR_SET_ALLOCATE_INFO                                        :: 34;
    WRITE_DESCRIPTOR_SET                                                :: 35;
    COPY_DESCRIPTOR_SET                                                 :: 36;
    FRAMEBUFFER_CREATE_INFO                                             :: 37;
    RENDER_PASS_CREATE_INFO                                             :: 38;
    COMMAND_POOL_CREATE_INFO                                            :: 39;
    COMMAND_BUFFER_ALLOCATE_INFO                                        :: 40;
    COMMAND_BUFFER_INHERITANCE_INFO                                     :: 41;
    COMMAND_BUFFER_BEGIN_INFO                                           :: 42;
    RENDER_PASS_BEGIN_INFO                                              :: 43;
    BUFFER_MEMORY_BARRIER                                               :: 44;
    IMAGE_MEMORY_BARRIER                                                :: 45;
    MEMORY_BARRIER                                                      :: 46;
    LOADER_INSTANCE_CREATE_INFO                                         :: 47;
    LOADER_DEVICE_CREATE_INFO                                           :: 48;
    PHYSICAL_DEVICE_SUBGROUP_PROPERTIES                                 :: 1000094000;
    BIND_BUFFER_MEMORY_INFO                                             :: 1000157000;
    BIND_IMAGE_MEMORY_INFO                                              :: 1000157001;
    PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES                              :: 1000083000;
    MEMORY_DEDICATED_REQUIREMENTS                                       :: 1000127000;
    MEMORY_DEDICATED_ALLOCATE_INFO                                      :: 1000127001;
    MEMORY_ALLOCATE_FLAGS_INFO                                          :: 1000060000;
    DEVICE_GROUP_RENDER_PASS_BEGIN_INFO                                 :: 1000060003;
    DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO                              :: 1000060004;
    DEVICE_GROUP_SUBMIT_INFO                                            :: 1000060005;
    DEVICE_GROUP_BIND_SPARSE_INFO                                       :: 1000060006;
    BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO                                :: 1000060013;
    BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO                                 :: 1000060014;
    PHYSICAL_DEVICE_GROUP_PROPERTIES                                    :: 1000070000;
    DEVICE_GROUP_DEVICE_CREATE_INFO                                     :: 1000070001;
    BUFFER_MEMORY_REQUIREMENTS_INFO_2                                   :: 1000146000;
    IMAGE_MEMORY_REQUIREMENTS_INFO_2                                    :: 1000146001;
    IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2                             :: 1000146002;
    MEMORY_REQUIREMENTS_2                                               :: 1000146003;
    SPARSE_IMAGE_MEMORY_REQUIREMENTS_2                                  :: 1000146004;
    PHYSICAL_DEVICE_FEATURES_2                                          :: 1000059000;
    PHYSICAL_DEVICE_PROPERTIES_2                                        :: 1000059001;
    FORMAT_PROPERTIES_2                                                 :: 1000059002;
    IMAGE_FORMAT_PROPERTIES_2                                           :: 1000059003;
    PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2                                 :: 1000059004;
    QUEUE_FAMILY_PROPERTIES_2                                           :: 1000059005;
    PHYSICAL_DEVICE_MEMORY_PROPERTIES_2                                 :: 1000059006;
    SPARSE_IMAGE_FORMAT_PROPERTIES_2                                    :: 1000059007;
    PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2                          :: 1000059008;
    PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES                           :: 1000117000;
    RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO                     :: 1000117001;
    IMAGE_VIEW_USAGE_CREATE_INFO                                        :: 1000117002;
    PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO               :: 1000117003;
    RENDER_PASS_MULTIVIEW_CREATE_INFO                                   :: 1000053000;
    PHYSICAL_DEVICE_MULTIVIEW_FEATURES                                  :: 1000053001;
    PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES                                :: 1000053002;
    PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES                          :: 1000120000;
    PROTECTED_SUBMIT_INFO                                               :: 1000145000;
    PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES                           :: 1000145001;
    PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES                         :: 1000145002;
    DEVICE_QUEUE_INFO_2                                                 :: 1000145003;
    SAMPLER_YCBCR_CONVERSION_CREATE_INFO                                :: 1000156000;
    SAMPLER_YCBCR_CONVERSION_INFO                                       :: 1000156001;
    BIND_IMAGE_PLANE_MEMORY_INFO                                        :: 1000156002;
    IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO                                :: 1000156003;
    PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES                   :: 1000156004;
    SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES                    :: 1000156005;
    DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO                              :: 1000085000;
    PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO                          :: 1000071000;
    EXTERNAL_IMAGE_FORMAT_PROPERTIES                                    :: 1000071001;
    PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO                                :: 1000071002;
    EXTERNAL_BUFFER_PROPERTIES                                          :: 1000071003;
    PHYSICAL_DEVICE_ID_PROPERTIES                                       :: 1000071004;
    EXTERNAL_MEMORY_BUFFER_CREATE_INFO                                  :: 1000072000;
    EXTERNAL_MEMORY_IMAGE_CREATE_INFO                                   :: 1000072001;
    EXPORT_MEMORY_ALLOCATE_INFO                                         :: 1000072002;
    PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO                                 :: 1000112000;
    EXTERNAL_FENCE_PROPERTIES                                           :: 1000112001;
    EXPORT_FENCE_CREATE_INFO                                            :: 1000113000;
    EXPORT_SEMAPHORE_CREATE_INFO                                        :: 1000077000;
    PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO                             :: 1000076000;
    EXTERNAL_SEMAPHORE_PROPERTIES                                       :: 1000076001;
    PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES                            :: 1000168000;
    DESCRIPTOR_SET_LAYOUT_SUPPORT                                       :: 1000168001;
    PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES                     :: 1000063000;
    PHYSICAL_DEVICE_VULKAN_1_1_FEATURES                                 :: 49;
    PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES                               :: 50;
    PHYSICAL_DEVICE_VULKAN_1_2_FEATURES                                 :: 51;
    PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES                               :: 52;
    IMAGE_FORMAT_LIST_CREATE_INFO                                       :: 1000147000;
    ATTACHMENT_DESCRIPTION_2                                            :: 1000109000;
    ATTACHMENT_REFERENCE_2                                              :: 1000109001;
    SUBPASS_DESCRIPTION_2                                               :: 1000109002;
    SUBPASS_DEPENDENCY_2                                                :: 1000109003;
    RENDER_PASS_CREATE_INFO_2                                           :: 1000109004;
    SUBPASS_BEGIN_INFO                                                  :: 1000109005;
    SUBPASS_END_INFO                                                    :: 1000109006;
    PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES                               :: 1000177000;
    PHYSICAL_DEVICE_DRIVER_PROPERTIES                                   :: 1000196000;
    PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES                        :: 1000180000;
    PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES                        :: 1000082000;
    PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES                           :: 1000197000;
    DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO                     :: 1000161000;
    PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES                        :: 1000161001;
    PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES                      :: 1000161002;
    DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO              :: 1000161003;
    DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT             :: 1000161004;
    PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES                    :: 1000199000;
    SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE                           :: 1000199001;
    PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES                        :: 1000221000;
    IMAGE_STENCIL_USAGE_CREATE_INFO                                     :: 1000246000;
    PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES                    :: 1000130000;
    SAMPLER_REDUCTION_MODE_CREATE_INFO                                  :: 1000130001;
    PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES                        :: 1000211000;
    PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES                      :: 1000108000;
    FRAMEBUFFER_ATTACHMENTS_CREATE_INFO                                 :: 1000108001;
    FRAMEBUFFER_ATTACHMENT_IMAGE_INFO                                   :: 1000108002;
    RENDER_PASS_ATTACHMENT_BEGIN_INFO                                   :: 1000108003;
    PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES             :: 1000253000;
    PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES             :: 1000175000;
    PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES             :: 1000241000;
    ATTACHMENT_REFERENCE_STENCIL_LAYOUT                                 :: 1000241001;
    ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT                               :: 1000241002;
    PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES                           :: 1000261000;
    PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES                         :: 1000207000;
    PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES                       :: 1000207001;
    SEMAPHORE_TYPE_CREATE_INFO                                          :: 1000207002;
    TIMELINE_SEMAPHORE_SUBMIT_INFO                                      :: 1000207003;
    SEMAPHORE_WAIT_INFO                                                 :: 1000207004;
    SEMAPHORE_SIGNAL_INFO                                               :: 1000207005;
    PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES                      :: 1000257000;
    BUFFER_DEVICE_ADDRESS_INFO                                          :: 1000244001;
    BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO                           :: 1000257002;
    MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO                         :: 1000257003;
    DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO                           :: 1000257004;
    PHYSICAL_DEVICE_VULKAN_1_3_FEATURES                                 :: 53;
    PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES                               :: 54;
    PIPELINE_CREATION_FEEDBACK_CREATE_INFO                              :: 1000192000;
    PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES                :: 1000215000;
    PHYSICAL_DEVICE_TOOL_PROPERTIES                                     :: 1000245000;
    PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES         :: 1000276000;
    PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES                               :: 1000295000;
    DEVICE_PRIVATE_DATA_CREATE_INFO                                     :: 1000295001;
    PRIVATE_DATA_SLOT_CREATE_INFO                                       :: 1000295002;
    PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES            :: 1000297000;
    MEMORY_BARRIER_2                                                    :: 1000314000;
    BUFFER_MEMORY_BARRIER_2                                             :: 1000314001;
    IMAGE_MEMORY_BARRIER_2                                              :: 1000314002;
    DEPENDENCY_INFO                                                     :: 1000314003;
    SUBMIT_INFO_2                                                       :: 1000314004;
    SEMAPHORE_SUBMIT_INFO                                               :: 1000314005;
    COMMAND_BUFFER_SUBMIT_INFO                                          :: 1000314006;
    PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES                          :: 1000314007;
    PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES           :: 1000325000;
    PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES                           :: 1000335000;
    COPY_BUFFER_INFO_2                                                  :: 1000337000;
    COPY_IMAGE_INFO_2                                                   :: 1000337001;
    COPY_BUFFER_TO_IMAGE_INFO_2                                         :: 1000337002;
    COPY_IMAGE_TO_BUFFER_INFO_2                                         :: 1000337003;
    BLIT_IMAGE_INFO_2                                                   :: 1000337004;
    RESOLVE_IMAGE_INFO_2                                                :: 1000337005;
    BUFFER_COPY_2                                                       :: 1000337006;
    IMAGE_COPY_2                                                        :: 1000337007;
    IMAGE_BLIT_2                                                        :: 1000337008;
    BUFFER_IMAGE_COPY_2                                                 :: 1000337009;
    IMAGE_RESOLVE_2                                                     :: 1000337010;
    PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES                    :: 1000225000;
    PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO            :: 1000225001;
    PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES                      :: 1000225002;
    PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES                       :: 1000138000;
    PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES                     :: 1000138001;
    WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK                           :: 1000138002;
    DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO                    :: 1000138003;
    PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES               :: 1000066000;
    RENDERING_INFO                                                      :: 1000044000;
    RENDERING_ATTACHMENT_INFO                                           :: 1000044001;
    PIPELINE_RENDERING_CREATE_INFO                                      :: 1000044002;
    PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES                          :: 1000044003;
    COMMAND_BUFFER_INHERITANCE_RENDERING_INFO                           :: 1000044004;
    PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES                 :: 1000280000;
    PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES               :: 1000280001;
    PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES                   :: 1000281001;
    FORMAT_PROPERTIES_3                                                 :: 1000360000;
    PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES                              :: 1000413000;
    PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES                            :: 1000413001;
    DEVICE_BUFFER_MEMORY_REQUIREMENTS                                   :: 1000413002;
    DEVICE_IMAGE_MEMORY_REQUIREMENTS                                    :: 1000413003;
    SWAPCHAIN_CREATE_INFO_KHR                                           :: 1000001000;
    PRESENT_INFO_KHR                                                    :: 1000001001;
    DEVICE_GROUP_PRESENT_CAPABILITIES_KHR                               :: 1000060007;
    IMAGE_SWAPCHAIN_CREATE_INFO_KHR                                     :: 1000060008;
    BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR                                :: 1000060009;
    ACQUIRE_NEXT_IMAGE_INFO_KHR                                         :: 1000060010;
    DEVICE_GROUP_PRESENT_INFO_KHR                                       :: 1000060011;
    DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR                              :: 1000060012;
    DISPLAY_MODE_CREATE_INFO_KHR                                        :: 1000002000;
    DISPLAY_SURFACE_CREATE_INFO_KHR                                     :: 1000002001;
    DISPLAY_PRESENT_INFO_KHR                                            :: 1000003000;
    XLIB_SURFACE_CREATE_INFO_KHR                                        :: 1000004000;
    XCB_SURFACE_CREATE_INFO_KHR                                         :: 1000005000;
    WAYLAND_SURFACE_CREATE_INFO_KHR                                     :: 1000006000;
    ANDROID_SURFACE_CREATE_INFO_KHR                                     :: 1000008000;
    WIN32_SURFACE_CREATE_INFO_KHR                                       :: 1000009000;
    DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT                               :: 1000011000;
    PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD                :: 1000018000;
    DEBUG_MARKER_OBJECT_NAME_INFO_EXT                                   :: 1000022000;
    DEBUG_MARKER_OBJECT_TAG_INFO_EXT                                    :: 1000022001;
    DEBUG_MARKER_MARKER_INFO_EXT                                        :: 1000022002;
    VIDEO_PROFILE_INFO_KHR                                              :: 1000023000;
    VIDEO_CAPABILITIES_KHR                                              :: 1000023001;
    VIDEO_PICTURE_RESOURCE_INFO_KHR                                     :: 1000023002;
    VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR                               :: 1000023003;
    BIND_VIDEO_SESSION_MEMORY_INFO_KHR                                  :: 1000023004;
    VIDEO_SESSION_CREATE_INFO_KHR                                       :: 1000023005;
    VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR                            :: 1000023006;
    VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR                            :: 1000023007;
    VIDEO_BEGIN_CODING_INFO_KHR                                         :: 1000023008;
    VIDEO_END_CODING_INFO_KHR                                           :: 1000023009;
    VIDEO_CODING_CONTROL_INFO_KHR                                       :: 1000023010;
    VIDEO_REFERENCE_SLOT_INFO_KHR                                       :: 1000023011;
    QUEUE_FAMILY_VIDEO_PROPERTIES_KHR                                   :: 1000023012;
    VIDEO_PROFILE_LIST_INFO_KHR                                         :: 1000023013;
    PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR                               :: 1000023014;
    VIDEO_FORMAT_PROPERTIES_KHR                                         :: 1000023015;
    QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR                     :: 1000023016;
    VIDEO_DECODE_INFO_KHR                                               :: 1000024000;
    VIDEO_DECODE_CAPABILITIES_KHR                                       :: 1000024001;
    VIDEO_DECODE_USAGE_INFO_KHR                                         :: 1000024002;
    DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV                           :: 1000026000;
    DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV                          :: 1000026001;
    DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV                        :: 1000026002;
    PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT                     :: 1000028000;
    PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT                   :: 1000028001;
    PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT                 :: 1000028002;
    CU_MODULE_CREATE_INFO_NVX                                           :: 1000029000;
    CU_FUNCTION_CREATE_INFO_NVX                                         :: 1000029001;
    CU_LAUNCH_INFO_NVX                                                  :: 1000029002;
    IMAGE_VIEW_HANDLE_INFO_NVX                                          :: 1000030000;
    IMAGE_VIEW_ADDRESS_PROPERTIES_NVX                                   :: 1000030001;

    VIDEO_DECODE_H264_CAPABILITIES_KHR                                  :: 1000040000;
    VIDEO_DECODE_H264_PICTURE_INFO_KHR                                  :: 1000040001;
    VIDEO_DECODE_H264_PROFILE_INFO_KHR                                  :: 1000040003;
    VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR                :: 1000040004;
    VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR                   :: 1000040005;
    VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR                                 :: 1000040006;
    TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD                            :: 1000041000;
    RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR                 :: 1000044006;
    RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT                  :: 1000044007;
    ATTACHMENT_SAMPLE_COUNT_INFO_AMD                                    :: 1000044008;
    MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX                              :: 1000044009;
    STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP                           :: 1000049000;
    PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV                    :: 1000050000;
    EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV                                :: 1000056000;
    EXPORT_MEMORY_ALLOCATE_INFO_NV                                      :: 1000056001;
    IMPORT_MEMORY_WIN32_HANDLE_INFO_NV                                  :: 1000057000;
    EXPORT_MEMORY_WIN32_HANDLE_INFO_NV                                  :: 1000057001;
    WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV                           :: 1000058000;
    VALIDATION_FLAGS_EXT                                                :: 1000061000;
    VI_SURFACE_CREATE_INFO_NN                                           :: 1000062000;
    IMAGE_VIEW_ASTC_DECODE_MODE_EXT                                     :: 1000067000;
    PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT                            :: 1000067001;
    PIPELINE_ROBUSTNESS_CREATE_INFO_EXT                                 :: 1000068000;
    PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT                    :: 1000068001;
    PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT                  :: 1000068002;
    IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR                                 :: 1000073000;
    EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR                                 :: 1000073001;
    MEMORY_WIN32_HANDLE_PROPERTIES_KHR                                  :: 1000073002;
    MEMORY_GET_WIN32_HANDLE_INFO_KHR                                    :: 1000073003;
    IMPORT_MEMORY_FD_INFO_KHR                                           :: 1000074000;
    MEMORY_FD_PROPERTIES_KHR                                            :: 1000074001;
    MEMORY_GET_FD_INFO_KHR                                              :: 1000074002;
    WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR                          :: 1000075000;
    IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                              :: 1000078000;
    EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                              :: 1000078001;
    D3D12_FENCE_SUBMIT_INFO_KHR                                         :: 1000078002;
    SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR                                 :: 1000078003;
    IMPORT_SEMAPHORE_FD_INFO_KHR                                        :: 1000079000;
    SEMAPHORE_GET_FD_INFO_KHR                                           :: 1000079001;
    PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR                      :: 1000080000;
    COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT           :: 1000081000;
    PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT                  :: 1000081001;
    CONDITIONAL_RENDERING_BEGIN_INFO_EXT                                :: 1000081002;
    PRESENT_REGIONS_KHR                                                 :: 1000084000;
    PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV                    :: 1000087000;
    SURFACE_CAPABILITIES_2_EXT                                          :: 1000090000;
    DISPLAY_POWER_INFO_EXT                                              :: 1000091000;
    DEVICE_EVENT_INFO_EXT                                               :: 1000091001;
    DISPLAY_EVENT_INFO_EXT                                              :: 1000091002;
    SWAPCHAIN_COUNTER_CREATE_INFO_EXT                                   :: 1000091003;
    PRESENT_TIMES_INFO_GOOGLE                                           :: 1000092000;
    PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX        :: 1000097000;
    PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV                      :: 1000098000;
    PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT                    :: 1000099000;
    PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT                    :: 1000099001;
    PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT           :: 1000101000;
    PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT           :: 1000101001;
    PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT                      :: 1000102000;
    PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT             :: 1000102001;
    HDR_METADATA_EXT                                                    :: 1000105000;
    SHARED_PRESENT_SURFACE_CAPABILITIES_KHR                             :: 1000111000;
    IMPORT_FENCE_WIN32_HANDLE_INFO_KHR                                  :: 1000114000;
    EXPORT_FENCE_WIN32_HANDLE_INFO_KHR                                  :: 1000114001;
    FENCE_GET_WIN32_HANDLE_INFO_KHR                                     :: 1000114002;
    IMPORT_FENCE_FD_INFO_KHR                                            :: 1000115000;
    FENCE_GET_FD_INFO_KHR                                               :: 1000115001;
    PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR                      :: 1000116000;
    PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR                    :: 1000116001;
    QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR                              :: 1000116002;
    PERFORMANCE_QUERY_SUBMIT_INFO_KHR                                   :: 1000116003;
    ACQUIRE_PROFILING_LOCK_INFO_KHR                                     :: 1000116004;
    PERFORMANCE_COUNTER_KHR                                             :: 1000116005;
    PERFORMANCE_COUNTER_DESCRIPTION_KHR                                 :: 1000116006;
    PHYSICAL_DEVICE_SURFACE_INFO_2_KHR                                  :: 1000119000;
    SURFACE_CAPABILITIES_2_KHR                                          :: 1000119001;
    SURFACE_FORMAT_2_KHR                                                :: 1000119002;
    DISPLAY_PROPERTIES_2_KHR                                            :: 1000121000;
    DISPLAY_PLANE_PROPERTIES_2_KHR                                      :: 1000121001;
    DISPLAY_MODE_PROPERTIES_2_KHR                                       :: 1000121002;
    DISPLAY_PLANE_INFO_2_KHR                                            :: 1000121003;
    DISPLAY_PLANE_CAPABILITIES_2_KHR                                    :: 1000121004;
    IOS_SURFACE_CREATE_INFO_MVK                                         :: 1000122000;
    MACOS_SURFACE_CREATE_INFO_MVK                                       :: 1000123000;
    DEBUG_UTILS_OBJECT_NAME_INFO_EXT                                    :: 1000128000;
    DEBUG_UTILS_OBJECT_TAG_INFO_EXT                                     :: 1000128001;
    DEBUG_UTILS_LABEL_EXT                                               :: 1000128002;
    DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT                             :: 1000128003;
    DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT                               :: 1000128004;
    ANDROID_HARDWARE_BUFFER_USAGE_ANDROID                               :: 1000129000;
    ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID                          :: 1000129001;
    ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID                   :: 1000129002;
    IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID                         :: 1000129003;
    MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID                     :: 1000129004;
    EXTERNAL_FORMAT_ANDROID                                             :: 1000129005;
    ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID                 :: 1000129006;
    SAMPLE_LOCATIONS_INFO_EXT                                           :: 1000143000;
    RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT                         :: 1000143001;
    PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT                     :: 1000143002;
    PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT                     :: 1000143003;
    MULTISAMPLE_PROPERTIES_EXT                                          :: 1000143004;
    PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT               :: 1000148000;
    PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT             :: 1000148001;
    PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT                 :: 1000148002;
    PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV                     :: 1000149000;
    WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR                     :: 1000150007;
    ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR                      :: 1000150000;
    ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR                      :: 1000150002;
    ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR                      :: 1000150003;
    ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR                  :: 1000150004;
    ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR                  :: 1000150005;
    ACCELERATION_STRUCTURE_GEOMETRY_KHR                                 :: 1000150006;
    ACCELERATION_STRUCTURE_VERSION_INFO_KHR                             :: 1000150009;
    COPY_ACCELERATION_STRUCTURE_INFO_KHR                                :: 1000150010;
    COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR                      :: 1000150011;
    COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR                      :: 1000150012;
    PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR                 :: 1000150013;
    PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR               :: 1000150014;
    ACCELERATION_STRUCTURE_CREATE_INFO_KHR                              :: 1000150017;
    ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR                         :: 1000150020;
    PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR                   :: 1000347000;
    PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR                 :: 1000347001;
    RAY_TRACING_PIPELINE_CREATE_INFO_KHR                                :: 1000150015;
    RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR                            :: 1000150016;
    RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR                      :: 1000150018;
    PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR                              :: 1000348013;
    PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV                   :: 1000152000;
    PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV                      :: 1000154000;
    PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV                    :: 1000154001;
    DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT                             :: 1000158000;
    PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT                  :: 1000158002;
    IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT                      :: 1000158003;
    IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT                  :: 1000158004;
    IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT                            :: 1000158005;
    DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT                           :: 1000158006;
    VALIDATION_CACHE_CREATE_INFO_EXT                                    :: 1000160000;
    SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT                      :: 1000160001;

    PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV           :: 1000164000;
    PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV                      :: 1000164001;
    PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV                    :: 1000164002;
    PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV          :: 1000164005;
    RAY_TRACING_PIPELINE_CREATE_INFO_NV                                 :: 1000165000;
    ACCELERATION_STRUCTURE_CREATE_INFO_NV                               :: 1000165001;
    GEOMETRY_NV                                                         :: 1000165003;
    GEOMETRY_TRIANGLES_NV                                               :: 1000165004;
    GEOMETRY_AABB_NV                                                    :: 1000165005;
    BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV                          :: 1000165006;
    WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV                      :: 1000165007;
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV                  :: 1000165008;
    PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV                           :: 1000165009;
    RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV                             :: 1000165011;
    ACCELERATION_STRUCTURE_INFO_NV                                      :: 1000165012;
    PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV            :: 1000166000;
    PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV          :: 1000166001;
    PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT                    :: 1000170000;
    FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT                 :: 1000170001;
    IMPORT_MEMORY_HOST_POINTER_INFO_EXT                                 :: 1000178000;
    MEMORY_HOST_POINTER_PROPERTIES_EXT                                  :: 1000178001;
    PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT                 :: 1000178002;
    PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR                           :: 1000181000;
    PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD                           :: 1000183000;
    CALIBRATED_TIMESTAMP_INFO_EXT                                       :: 1000184000;
    PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD                          :: 1000185000;
    VIDEO_DECODE_H265_CAPABILITIES_KHR                                  :: 1000187000;
    VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR                :: 1000187001;
    VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR                   :: 1000187002;
    VIDEO_DECODE_H265_PROFILE_INFO_KHR                                  :: 1000187003;
    VIDEO_DECODE_H265_PICTURE_INFO_KHR                                  :: 1000187004;
    VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR                                 :: 1000187005;
    DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR                        :: 1000174000;
    PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR                  :: 1000388000;
    QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR                         :: 1000388001;
    DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD                        :: 1000189000;
    PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT             :: 1000190000;
    PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT                 :: 1000190001;
    PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT               :: 1000190002;
    PRESENT_FRAME_TOKEN_GGP                                             :: 1000191000;
    PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV              :: 1000201000;
    PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV                             :: 1000202000;
    PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV                           :: 1000202001;
    PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV                  :: 1000204000;
    PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV            :: 1000205000;
    PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV                       :: 1000205002;
    CHECKPOINT_DATA_NV                                                  :: 1000206000;
    QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV                               :: 1000206001;
    PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL           :: 1000209000;
    QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL                      :: 1000210000;
    INITIALIZE_PERFORMANCE_API_INFO_INTEL                               :: 1000210001;
    PERFORMANCE_MARKER_INFO_INTEL                                       :: 1000210002;
    PERFORMANCE_STREAM_MARKER_INFO_INTEL                                :: 1000210003;
    PERFORMANCE_OVERRIDE_INFO_INTEL                                     :: 1000210004;
    PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL                        :: 1000210005;
    PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT                         :: 1000212000;
    DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD                         :: 1000213000;
    SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD                        :: 1000213001;
    IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA                               :: 1000214000;
    METAL_SURFACE_CREATE_INFO_EXT                                       :: 1000217000;
    PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT                   :: 1000218000;
    PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT                 :: 1000218001;
    RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT                    :: 1000218002;
    FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR                           :: 1000226000;
    PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR                :: 1000226001;
    PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR                :: 1000226002;
    PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR                  :: 1000226003;
    PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR                           :: 1000226004;
    PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD                        :: 1000227000;
    PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD                        :: 1000229000;
    PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT              :: 1000234000;
    PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT                        :: 1000237000;
    PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT                        :: 1000238000;
    MEMORY_PRIORITY_ALLOCATE_INFO_EXT                                   :: 1000238001;
    SURFACE_PROTECTED_CAPABILITIES_KHR                                  :: 1000239000;
    PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV     :: 1000240000;
    PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT                  :: 1000244000;
    BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT                               :: 1000244002;
    VALIDATION_FEATURES_EXT                                             :: 1000247000;
    PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR                           :: 1000248000;
    PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV                      :: 1000249000;
    COOPERATIVE_MATRIX_PROPERTIES_NV                                    :: 1000249001;
    PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV                    :: 1000249002;
    PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV                 :: 1000250000;
    PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV                    :: 1000250001;
    FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV                            :: 1000250002;
    PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT              :: 1000251000;
    PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT                     :: 1000252000;
    PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT                       :: 1000254000;
    PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT       :: 1000254001;
    PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT                     :: 1000254002;
    SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT                              :: 1000255000;
    SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT                      :: 1000255002;
    SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT                        :: 1000255001;
    HEADLESS_SURFACE_CREATE_INFO_EXT                                    :: 1000256000;
    PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT                     :: 1000259000;
    PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT                   :: 1000259001;
    PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT                   :: 1000259002;
    PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT                    :: 1000260000;
    PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT                       :: 1000265000;
    PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT                 :: 1000267000;
    PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR         :: 1000269000;
    PIPELINE_INFO_KHR                                                   :: 1000269001;
    PIPELINE_EXECUTABLE_PROPERTIES_KHR                                  :: 1000269002;
    PIPELINE_EXECUTABLE_INFO_KHR                                        :: 1000269003;
    PIPELINE_EXECUTABLE_STATISTIC_KHR                                   :: 1000269004;
    PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR                     :: 1000269005;
    MEMORY_MAP_INFO_KHR                                                 :: 1000271000;
    MEMORY_UNMAP_INFO_KHR                                               :: 1000271001;
    PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT                  :: 1000273000;
    SURFACE_PRESENT_MODE_EXT                                            :: 1000274000;
    SURFACE_PRESENT_SCALING_CAPABILITIES_EXT                            :: 1000274001;
    SURFACE_PRESENT_MODE_COMPATIBILITY_EXT                              :: 1000274002;
    PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT                :: 1000275000;
    SWAPCHAIN_PRESENT_FENCE_INFO_EXT                                    :: 1000275001;
    SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT                             :: 1000275002;
    SWAPCHAIN_PRESENT_MODE_INFO_EXT                                     :: 1000275003;
    SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT                           :: 1000275004;
    RELEASE_SWAPCHAIN_IMAGES_INFO_EXT                                   :: 1000275005;
    PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV             :: 1000277000;
    GRAPHICS_SHADER_GROUP_CREATE_INFO_NV                                :: 1000277001;
    GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV                      :: 1000277002;
    INDIRECT_COMMANDS_LAYOUT_TOKEN_NV                                   :: 1000277003;
    INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV                             :: 1000277004;
    GENERATED_COMMANDS_INFO_NV                                          :: 1000277005;
    GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV                      :: 1000277006;
    PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV               :: 1000277007;
    PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV              :: 1000278000;
    COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV                 :: 1000278001;
    PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT                 :: 1000281000;
    COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM          :: 1000282000;
    RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM                               :: 1000282001;
    PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT                   :: 1000284000;
    DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT                         :: 1000284001;
    DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT                              :: 1000284002;
    PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT                           :: 1000286000;
    PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT                         :: 1000286001;
    SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT                         :: 1000287000;
    PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT                  :: 1000287001;
    PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT                    :: 1000287002;
    PIPELINE_LIBRARY_CREATE_INFO_KHR                                    :: 1000290000;
    PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV                         :: 1000292000;
    SURFACE_CAPABILITIES_PRESENT_BARRIER_NV                             :: 1000292001;
    SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV                            :: 1000292002;
    PRESENT_ID_KHR                                                      :: 1000294000;
    PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR                             :: 1000294001;

    PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV                      :: 1000300000;
    DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV                            :: 1000300001;
    QUERY_LOW_LATENCY_SUPPORT_NV                                        :: 1000310000;
    EXPORT_METAL_OBJECT_CREATE_INFO_EXT                                 :: 1000311000;
    EXPORT_METAL_OBJECTS_INFO_EXT                                       :: 1000311001;
    EXPORT_METAL_DEVICE_INFO_EXT                                        :: 1000311002;
    EXPORT_METAL_COMMAND_QUEUE_INFO_EXT                                 :: 1000311003;
    EXPORT_METAL_BUFFER_INFO_EXT                                        :: 1000311004;
    IMPORT_METAL_BUFFER_INFO_EXT                                        :: 1000311005;
    EXPORT_METAL_TEXTURE_INFO_EXT                                       :: 1000311006;
    IMPORT_METAL_TEXTURE_INFO_EXT                                       :: 1000311007;
    EXPORT_METAL_IO_SURFACE_INFO_EXT                                    :: 1000311008;
    IMPORT_METAL_IO_SURFACE_INFO_EXT                                    :: 1000311009;
    EXPORT_METAL_SHARED_EVENT_INFO_EXT                                  :: 1000311010;
    IMPORT_METAL_SHARED_EVENT_INFO_EXT                                  :: 1000311011;
    QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV                             :: 1000314008;
    CHECKPOINT_DATA_2_NV                                                :: 1000314009;
    PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT                    :: 1000316000;
    PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT        :: 1000316001;
    PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT                      :: 1000316002;
    DESCRIPTOR_ADDRESS_INFO_EXT                                         :: 1000316003;
    DESCRIPTOR_GET_INFO_EXT                                             :: 1000316004;
    BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT                             :: 1000316005;
    IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT                              :: 1000316006;
    IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT                         :: 1000316007;
    SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT                            :: 1000316008;
    OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT                      :: 1000316010;
    DESCRIPTOR_BUFFER_BINDING_INFO_EXT                                  :: 1000316011;
    DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT         :: 1000316012;
    ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT             :: 1000316009;
    PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT              :: 1000320000;
    PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT            :: 1000320001;
    GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT                           :: 1000320002;
    PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD   :: 1000321000;
    PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR            :: 1000203000;
    PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR          :: 1000322000;
    PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR   :: 1000323000;
    PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV           :: 1000326000;
    PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV             :: 1000326001;
    PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV            :: 1000326002;
    ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV            :: 1000327000;
    PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV                 :: 1000327001;
    ACCELERATION_STRUCTURE_MOTION_INFO_NV                               :: 1000327002;
    PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT                            :: 1000328000;
    PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT                          :: 1000328001;
    PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT              :: 1000330000;
    PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT                 :: 1000332000;
    PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT               :: 1000332001;
    COPY_COMMAND_TRANSFORM_INFO_QCOM                                    :: 1000333000;
    PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR       :: 1000336000;
    PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT              :: 1000338000;
    IMAGE_COMPRESSION_CONTROL_EXT                                       :: 1000338001;
    SUBRESOURCE_LAYOUT_2_EXT                                            :: 1000338002;
    IMAGE_SUBRESOURCE_2_EXT                                             :: 1000338003;
    IMAGE_COMPRESSION_PROPERTIES_EXT                                    :: 1000338004;
    PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT        :: 1000339000;
    PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT                           :: 1000340000;
    PHYSICAL_DEVICE_FAULT_FEATURES_EXT                                  :: 1000341000;
    DEVICE_FAULT_COUNTS_EXT                                             :: 1000341001;
    DEVICE_FAULT_INFO_EXT                                               :: 1000341002;
    PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT                       :: 1000344000;
    DIRECTFB_SURFACE_CREATE_INFO_EXT                                    :: 1000346000;
    PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT             :: 1000352000;
    VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT                              :: 1000352001;
    VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT                            :: 1000352002;
    PHYSICAL_DEVICE_DRM_PROPERTIES_EXT                                  :: 1000353000;
    PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT                 :: 1000354000;
    DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT                            :: 1000354001;
    PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT                     :: 1000355000;
    PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT                :: 1000355001;
    PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT        :: 1000356000;
    IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA                            :: 1000364000;
    MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA                             :: 1000364001;
    MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA                               :: 1000364002;
    IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA                         :: 1000365000;
    SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA                            :: 1000365001;
    BUFFER_COLLECTION_CREATE_INFO_FUCHSIA                               :: 1000366000;
    IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA                             :: 1000366001;
    BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA                         :: 1000366002;
    BUFFER_COLLECTION_PROPERTIES_FUCHSIA                                :: 1000366003;
    BUFFER_CONSTRAINTS_INFO_FUCHSIA                                     :: 1000366004;
    BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA                        :: 1000366005;
    IMAGE_CONSTRAINTS_INFO_FUCHSIA                                      :: 1000366006;
    IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA                               :: 1000366007;
    SYSMEM_COLOR_SPACE_FUCHSIA                                          :: 1000366008;
    BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA                          :: 1000366009;
    SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI                         :: 1000369000;
    PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI                     :: 1000369001;
    PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI                   :: 1000369002;
    PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI                     :: 1000370000;
    MEMORY_GET_REMOTE_ADDRESS_INFO_NV                                   :: 1000371000;
    PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV                    :: 1000371001;
    PIPELINE_PROPERTIES_IDENTIFIER_EXT                                  :: 1000372000;
    PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT                    :: 1000372001;
    PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT  :: 1000376000;
    SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT                               :: 1000376001;
    MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT                      :: 1000376002;
    PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT               :: 1000377000;
    SCREEN_SURFACE_CREATE_INFO_QNX                                      :: 1000378000;
    PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT                     :: 1000381000;
    PIPELINE_COLOR_WRITE_CREATE_INFO_EXT                                :: 1000381001;
    PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT             :: 1000382000;
    PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR              :: 1000386000;
    PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT                     :: 1000391000;
    IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT                                  :: 1000391001;
    PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT                             :: 1000392000;
    PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT                           :: 1000392001;
    PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT                    :: 1000393000;
    PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT                      :: 1000395000;
    PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT                    :: 1000395001;
    MICROMAP_BUILD_INFO_EXT                                             :: 1000396000;
    MICROMAP_VERSION_INFO_EXT                                           :: 1000396001;
    COPY_MICROMAP_INFO_EXT                                              :: 1000396002;
    COPY_MICROMAP_TO_MEMORY_INFO_EXT                                    :: 1000396003;
    COPY_MEMORY_TO_MICROMAP_INFO_EXT                                    :: 1000396004;
    PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT                       :: 1000396005;
    PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT                     :: 1000396006;
    MICROMAP_CREATE_INFO_EXT                                            :: 1000396007;
    MICROMAP_BUILD_SIZES_INFO_EXT                                       :: 1000396008;
    ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT               :: 1000396009;

    PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI              :: 1000404000;
    PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI            :: 1000404001;
    PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT                   :: 1000411000;
    SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT              :: 1000411001;
    PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT           :: 1000412000;
    PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM                          :: 1000415000;
    PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT                :: 1000418000;
    IMAGE_VIEW_SLICED_CREATE_INFO_EXT                                   :: 1000418001;
    PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE          :: 1000420000;
    DESCRIPTOR_SET_BINDING_REFERENCE_VALVE                              :: 1000420001;
    DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE                       :: 1000420002;
    PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT                   :: 1000421000;
    PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT                  :: 1000422000;
    PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM           :: 1000425000;
    PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM         :: 1000425001;
    SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM                   :: 1000425002;
    PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV                    :: 1000426000;
    PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV                  :: 1000426001;
    PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV                    :: 1000427000;
    PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV                  :: 1000427001;
    PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV                 :: 1000430000;
    PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT    :: 1000437000;
    PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM                      :: 1000440000;
    PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM                    :: 1000440001;
    IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM                           :: 1000440002;
    PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT               :: 1000455000;
    PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT             :: 1000455001;
    PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT                 :: 1000458000;
    RENDER_PASS_CREATION_CONTROL_EXT                                    :: 1000458001;
    RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT                       :: 1000458002;
    RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT                        :: 1000458003;
    DIRECT_DRIVER_LOADING_INFO_LUNARG                                   :: 1000459000;
    DIRECT_DRIVER_LOADING_LIST_LUNARG                                   :: 1000459001;
    PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT               :: 1000462000;
    PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT             :: 1000462001;
    PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT             :: 1000462002;
    SHADER_MODULE_IDENTIFIER_EXT                                        :: 1000462003;
    PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT  :: 1000342000;
    PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV                            :: 1000464000;
    PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV                          :: 1000464001;
    OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV                                   :: 1000464002;
    OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV                             :: 1000464003;
    OPTICAL_FLOW_SESSION_CREATE_INFO_NV                                 :: 1000464004;
    OPTICAL_FLOW_EXECUTE_INFO_NV                                        :: 1000464005;
    OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV                    :: 1000464010;
    PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT                       :: 1000465000;
    PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT              :: 1000466000;
    PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR             :: 1000481000;
    PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT                          :: 1000482000;
    PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT                        :: 1000482001;
    SHADER_CREATE_INFO_EXT                                              :: 1000482002;
    PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM                       :: 1000484000;
    TILE_PROPERTIES_QCOM                                                :: 1000484001;
    PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC                        :: 1000485000;
    AMIGO_PROFILING_SUBMIT_INFO_SEC                                     :: 1000485001;
    PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM          :: 1000488000;
    PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV          :: 1000490000;
    PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV        :: 1000490001;
    PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT                :: 1000351000;
    MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT                             :: 1000351002;
    PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM                   :: 1000497000;
    PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM                 :: 1000497001;
    PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT         :: 1000498000;
    PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM       :: 1000510000;
    MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM         :: 1000510001;
    PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT :: 1000524000;
    PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES                           :: 1000120000;
    PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES                      :: 1000063000;
    DEBUG_REPORT_CREATE_INFO_EXT                                        :: 1000011000;
    RENDERING_INFO_KHR                                                  :: 1000044000;
    RENDERING_ATTACHMENT_INFO_KHR                                       :: 1000044001;
    PIPELINE_RENDERING_CREATE_INFO_KHR                                  :: 1000044002;
    PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR                      :: 1000044003;
    COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR                       :: 1000044004;
    ATTACHMENT_SAMPLE_COUNT_INFO_NV                                     :: 1000044008;
    RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR                               :: 1000053000;
    PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR                              :: 1000053001;
    PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR                            :: 1000053002;
    PHYSICAL_DEVICE_FEATURES_2_KHR                                      :: 1000059000;
    PHYSICAL_DEVICE_PROPERTIES_2_KHR                                    :: 1000059001;
    FORMAT_PROPERTIES_2_KHR                                             :: 1000059002;
    IMAGE_FORMAT_PROPERTIES_2_KHR                                       :: 1000059003;
    PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR                             :: 1000059004;
    QUEUE_FAMILY_PROPERTIES_2_KHR                                       :: 1000059005;
    PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR                             :: 1000059006;
    SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR                                :: 1000059007;
    PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR                      :: 1000059008;
    MEMORY_ALLOCATE_FLAGS_INFO_KHR                                      :: 1000060000;
    DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR                             :: 1000060003;
    DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR                          :: 1000060004;
    DEVICE_GROUP_SUBMIT_INFO_KHR                                        :: 1000060005;
    DEVICE_GROUP_BIND_SPARSE_INFO_KHR                                   :: 1000060006;
    BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR                            :: 1000060013;
    BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR                             :: 1000060014;
    PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT           :: 1000066000;
    PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR                                :: 1000070000;
    DEVICE_GROUP_DEVICE_CREATE_INFO_KHR                                 :: 1000070001;
    PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR                      :: 1000071000;
    EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR                                :: 1000071001;
    PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR                            :: 1000071002;
    EXTERNAL_BUFFER_PROPERTIES_KHR                                      :: 1000071003;
    PHYSICAL_DEVICE_ID_PROPERTIES_KHR                                   :: 1000071004;
    EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR                              :: 1000072000;
    EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR                               :: 1000072001;
    EXPORT_MEMORY_ALLOCATE_INFO_KHR                                     :: 1000072002;
    PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR                         :: 1000076000;
    EXTERNAL_SEMAPHORE_PROPERTIES_KHR                                   :: 1000076001;
    EXPORT_SEMAPHORE_CREATE_INFO_KHR                                    :: 1000077000;
    PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR                    :: 1000082000;
    PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR                           :: 1000082000;
    PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR                          :: 1000083000;
    DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR                          :: 1000085000;
    SURFACE_CAPABILITIES2_EXT                                           :: 1000090000;
    PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR                  :: 1000108000;
    FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR                             :: 1000108001;
    FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR                               :: 1000108002;
    RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR                               :: 1000108003;
    ATTACHMENT_DESCRIPTION_2_KHR                                        :: 1000109000;
    ATTACHMENT_REFERENCE_2_KHR                                          :: 1000109001;
    SUBPASS_DESCRIPTION_2_KHR                                           :: 1000109002;
    SUBPASS_DEPENDENCY_2_KHR                                            :: 1000109003;
    RENDER_PASS_CREATE_INFO_2_KHR                                       :: 1000109004;
    SUBPASS_BEGIN_INFO_KHR                                              :: 1000109005;
    SUBPASS_END_INFO_KHR                                                :: 1000109006;
    PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR                             :: 1000112000;
    EXTERNAL_FENCE_PROPERTIES_KHR                                       :: 1000112001;
    EXPORT_FENCE_CREATE_INFO_KHR                                        :: 1000113000;
    PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR                       :: 1000117000;
    RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR                 :: 1000117001;
    IMAGE_VIEW_USAGE_CREATE_INFO_KHR                                    :: 1000117002;
    PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR           :: 1000117003;
    PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR                      :: 1000120000;
    PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR                       :: 1000120000;
    MEMORY_DEDICATED_REQUIREMENTS_KHR                                   :: 1000127000;
    MEMORY_DEDICATED_ALLOCATE_INFO_KHR                                  :: 1000127001;
    PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT                :: 1000130000;
    SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT                              :: 1000130001;
    PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT                   :: 1000138000;
    PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT                 :: 1000138001;
    WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT                       :: 1000138002;
    DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT                :: 1000138003;
    BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR                               :: 1000146000;
    IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR                                :: 1000146001;
    IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR                         :: 1000146002;
    MEMORY_REQUIREMENTS_2_KHR                                           :: 1000146003;
    SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR                              :: 1000146004;
    IMAGE_FORMAT_LIST_CREATE_INFO_KHR                                   :: 1000147000;
    SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR                            :: 1000156000;
    SAMPLER_YCBCR_CONVERSION_INFO_KHR                                   :: 1000156001;
    BIND_IMAGE_PLANE_MEMORY_INFO_KHR                                    :: 1000156002;
    IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR                            :: 1000156003;
    PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR               :: 1000156004;
    SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR                :: 1000156005;
    BIND_BUFFER_MEMORY_INFO_KHR                                         :: 1000157000;
    BIND_IMAGE_MEMORY_INFO_KHR                                          :: 1000157001;
    DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT                 :: 1000161000;
    PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT                    :: 1000161001;
    PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT                  :: 1000161002;
    DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT          :: 1000161003;
    DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT         :: 1000161004;
    PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR                        :: 1000168000;
    DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR                                   :: 1000168001;
    DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT                        :: 1000174000;
    PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR         :: 1000175000;
    PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR                           :: 1000177000;
    PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR                    :: 1000180000;
    PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT                          :: 1000192000;
    PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR                               :: 1000196000;
    PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR                       :: 1000197000;
    PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR                :: 1000199000;
    SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR                       :: 1000199001;
    PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV             :: 1000203000;
    PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR                     :: 1000207000;
    PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR                   :: 1000207001;
    SEMAPHORE_TYPE_CREATE_INFO_KHR                                      :: 1000207002;
    TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR                                  :: 1000207003;
    SEMAPHORE_WAIT_INFO_KHR                                             :: 1000207004;
    SEMAPHORE_SIGNAL_INFO_KHR                                           :: 1000207005;
    QUERY_POOL_CREATE_INFO_INTEL                                        :: 1000210000;
    PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR                    :: 1000211000;
    PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR            :: 1000215000;
    PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT                    :: 1000221000;
    PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT                :: 1000225000;
    PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT        :: 1000225001;
    PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT                  :: 1000225002;
    PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR         :: 1000241000;
    ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR                             :: 1000241001;
    ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR                           :: 1000241002;
    PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT                         :: 1000244000;
    BUFFER_DEVICE_ADDRESS_INFO_EXT                                      :: 1000244001;
    PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT                                 :: 1000245000;
    IMAGE_STENCIL_USAGE_CREATE_INFO_EXT                                 :: 1000246000;
    PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR         :: 1000253000;
    PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR                  :: 1000257000;
    BUFFER_DEVICE_ADDRESS_INFO_KHR                                      :: 1000244001;
    BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR                       :: 1000257002;
    MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR                     :: 1000257003;
    DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR                       :: 1000257004;
    PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT                       :: 1000261000;
    PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT     :: 1000276000;
    PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR             :: 1000280000;
    PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR           :: 1000280001;
    PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT               :: 1000281001;
    PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT                           :: 1000295000;
    DEVICE_PRIVATE_DATA_CREATE_INFO_EXT                                 :: 1000295001;
    PRIVATE_DATA_SLOT_CREATE_INFO_EXT                                   :: 1000295002;
    PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT        :: 1000297000;
    MEMORY_BARRIER_2_KHR                                                :: 1000314000;
    BUFFER_MEMORY_BARRIER_2_KHR                                         :: 1000314001;
    IMAGE_MEMORY_BARRIER_2_KHR                                          :: 1000314002;
    DEPENDENCY_INFO_KHR                                                 :: 1000314003;
    SUBMIT_INFO_2_KHR                                                   :: 1000314004;
    SEMAPHORE_SUBMIT_INFO_KHR                                           :: 1000314005;
    COMMAND_BUFFER_SUBMIT_INFO_KHR                                      :: 1000314006;
    PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR                      :: 1000314007;
    PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR       :: 1000325000;
    PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT                       :: 1000335000;
    COPY_BUFFER_INFO_2_KHR                                              :: 1000337000;
    COPY_IMAGE_INFO_2_KHR                                               :: 1000337001;
    COPY_BUFFER_TO_IMAGE_INFO_2_KHR                                     :: 1000337002;
    COPY_IMAGE_TO_BUFFER_INFO_2_KHR                                     :: 1000337003;
    BLIT_IMAGE_INFO_2_KHR                                               :: 1000337004;
    RESOLVE_IMAGE_INFO_2_KHR                                            :: 1000337005;
    BUFFER_COPY_2_KHR                                                   :: 1000337006;
    IMAGE_COPY_2_KHR                                                    :: 1000337007;
    IMAGE_BLIT_2_KHR                                                    :: 1000337008;
    BUFFER_IMAGE_COPY_2_KHR                                             :: 1000337009;
    IMAGE_RESOLVE_2_KHR                                                 :: 1000337010;
    PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM  :: 1000342000;
    PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE              :: 1000351000;
    MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE                           :: 1000351002;
    FORMAT_PROPERTIES_3_KHR                                             :: 1000360000;
    PIPELINE_INFO_EXT                                                   :: 1000269001;
    PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT                  :: 1000388000;
    QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT                         :: 1000388001;
    PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR                          :: 1000413000;
    PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR                        :: 1000413001;
    DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR                               :: 1000413002;
    DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR                                :: 1000413003;
    SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT                       :: 1000225001;
    MAX_ENUM                                                            :: 2147483647;

    VK_STRUCTURE_TYPE_APPLICATION_INFO                                                    :: APPLICATION_INFO;
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO                                                :: INSTANCE_CREATE_INFO;
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO                                            :: DEVICE_QUEUE_CREATE_INFO;
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO                                                  :: DEVICE_CREATE_INFO;
    VK_STRUCTURE_TYPE_SUBMIT_INFO                                                         :: SUBMIT_INFO;
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO                                                :: MEMORY_ALLOCATE_INFO;
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE                                                 :: MAPPED_MEMORY_RANGE;
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO                                                    :: BIND_SPARSE_INFO;
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO                                                   :: FENCE_CREATE_INFO;
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO                                               :: SEMAPHORE_CREATE_INFO;
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO                                                   :: EVENT_CREATE_INFO;
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO                                              :: QUERY_POOL_CREATE_INFO;
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO                                                  :: BUFFER_CREATE_INFO;
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO                                             :: BUFFER_VIEW_CREATE_INFO;
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO                                                   :: IMAGE_CREATE_INFO;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO                                              :: IMAGE_VIEW_CREATE_INFO;
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO                                           :: SHADER_MODULE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO                                          :: PIPELINE_CACHE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO                                   :: PIPELINE_SHADER_STAGE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO                             :: PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO                           :: PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO                             :: PIPELINE_TESSELLATION_STATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO                                 :: PIPELINE_VIEWPORT_STATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO                            :: PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO                              :: PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO                            :: PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO                              :: PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO                                  :: PIPELINE_DYNAMIC_STATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO                                       :: GRAPHICS_PIPELINE_CREATE_INFO;
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO                                        :: COMPUTE_PIPELINE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO                                         :: PIPELINE_LAYOUT_CREATE_INFO;
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO                                                 :: SAMPLER_CREATE_INFO;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO                                   :: DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO                                         :: DESCRIPTOR_POOL_CREATE_INFO;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO                                        :: DESCRIPTOR_SET_ALLOCATE_INFO;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET                                                :: WRITE_DESCRIPTOR_SET;
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET                                                 :: COPY_DESCRIPTOR_SET;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO                                             :: FRAMEBUFFER_CREATE_INFO;
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO                                             :: RENDER_PASS_CREATE_INFO;
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO                                            :: COMMAND_POOL_CREATE_INFO;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO                                        :: COMMAND_BUFFER_ALLOCATE_INFO;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO                                     :: COMMAND_BUFFER_INHERITANCE_INFO;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO                                           :: COMMAND_BUFFER_BEGIN_INFO;
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO                                              :: RENDER_PASS_BEGIN_INFO;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER                                               :: BUFFER_MEMORY_BARRIER;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER                                                :: IMAGE_MEMORY_BARRIER;
    VK_STRUCTURE_TYPE_MEMORY_BARRIER                                                      :: MEMORY_BARRIER;
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO                                         :: LOADER_INSTANCE_CREATE_INFO;
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO                                           :: LOADER_DEVICE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES                                 :: PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO                                             :: BIND_BUFFER_MEMORY_INFO;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO                                              :: BIND_IMAGE_MEMORY_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES                              :: PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS                                       :: MEMORY_DEDICATED_REQUIREMENTS;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO                                      :: MEMORY_DEDICATED_ALLOCATE_INFO;
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO                                          :: MEMORY_ALLOCATE_FLAGS_INFO;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO                                 :: DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO                              :: DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO                                            :: DEVICE_GROUP_SUBMIT_INFO;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO                                       :: DEVICE_GROUP_BIND_SPARSE_INFO;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO                                :: BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO                                 :: BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES                                    :: PHYSICAL_DEVICE_GROUP_PROPERTIES;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO                                     :: DEVICE_GROUP_DEVICE_CREATE_INFO;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2                                   :: BUFFER_MEMORY_REQUIREMENTS_INFO_2;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2                                    :: IMAGE_MEMORY_REQUIREMENTS_INFO_2;
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2                             :: IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2                                               :: MEMORY_REQUIREMENTS_2;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2                                  :: SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2                                          :: PHYSICAL_DEVICE_FEATURES_2;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2                                        :: PHYSICAL_DEVICE_PROPERTIES_2;
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2                                                 :: FORMAT_PROPERTIES_2;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2                                           :: IMAGE_FORMAT_PROPERTIES_2;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2                                 :: PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2                                           :: QUEUE_FAMILY_PROPERTIES_2;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2                                 :: PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2                                    :: SPARSE_IMAGE_FORMAT_PROPERTIES_2;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2                          :: PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES                           :: PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO                     :: RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO                                        :: IMAGE_VIEW_USAGE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO               :: PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO                                   :: RENDER_PASS_MULTIVIEW_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES                                  :: PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES                                :: PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES                          :: PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO                                               :: PROTECTED_SUBMIT_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES                           :: PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES                         :: PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2                                                 :: DEVICE_QUEUE_INFO_2;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO                                :: SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO                                       :: SAMPLER_YCBCR_CONVERSION_INFO;
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO                                        :: BIND_IMAGE_PLANE_MEMORY_INFO;
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO                                :: IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES                   :: PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES                    :: SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO                              :: DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO                          :: PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES                                    :: EXTERNAL_IMAGE_FORMAT_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO                                :: PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES                                          :: EXTERNAL_BUFFER_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES                                       :: PHYSICAL_DEVICE_ID_PROPERTIES;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO                                  :: EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO                                   :: EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO                                         :: EXPORT_MEMORY_ALLOCATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO                                 :: PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES                                           :: EXTERNAL_FENCE_PROPERTIES;
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO                                            :: EXPORT_FENCE_CREATE_INFO;
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO                                        :: EXPORT_SEMAPHORE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO                             :: PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES                                       :: EXTERNAL_SEMAPHORE_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES                            :: PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT                                       :: DESCRIPTOR_SET_LAYOUT_SUPPORT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES                     :: PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES                                 :: PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES                               :: PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES                                 :: PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES                               :: PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO                                       :: IMAGE_FORMAT_LIST_CREATE_INFO;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2                                            :: ATTACHMENT_DESCRIPTION_2;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2                                              :: ATTACHMENT_REFERENCE_2;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2                                               :: SUBPASS_DESCRIPTION_2;
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2                                                :: SUBPASS_DEPENDENCY_2;
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2                                           :: RENDER_PASS_CREATE_INFO_2;
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO                                                  :: SUBPASS_BEGIN_INFO;
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO                                                    :: SUBPASS_END_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES                               :: PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES                                   :: PHYSICAL_DEVICE_DRIVER_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES                        :: PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES                        :: PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES                           :: PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO                     :: DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES                        :: PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES                      :: PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO              :: DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT             :: DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES                    :: PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE                           :: SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES                        :: PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO                                     :: IMAGE_STENCIL_USAGE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES                    :: PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO                                  :: SAMPLER_REDUCTION_MODE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES                        :: PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES                      :: PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO                                 :: FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO                                   :: FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO                                   :: RENDER_PASS_ATTACHMENT_BEGIN_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES             :: PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES             :: PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES             :: PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT                                 :: ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT                               :: ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES                           :: PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES                         :: PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES                       :: PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO                                          :: SEMAPHORE_TYPE_CREATE_INFO;
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO                                      :: TIMELINE_SEMAPHORE_SUBMIT_INFO;
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO                                                 :: SEMAPHORE_WAIT_INFO;
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO                                               :: SEMAPHORE_SIGNAL_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES                      :: PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO                                          :: BUFFER_DEVICE_ADDRESS_INFO;
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO                           :: BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO                         :: MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO                           :: DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES                                 :: PHYSICAL_DEVICE_VULKAN_1_3_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES                               :: PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES;
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO                              :: PIPELINE_CREATION_FEEDBACK_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES                :: PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES                                     :: PHYSICAL_DEVICE_TOOL_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES         :: PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES                               :: PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES;
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO                                     :: DEVICE_PRIVATE_DATA_CREATE_INFO;
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO                                       :: PRIVATE_DATA_SLOT_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES            :: PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES;
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2                                                    :: MEMORY_BARRIER_2;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2                                             :: BUFFER_MEMORY_BARRIER_2;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2                                              :: IMAGE_MEMORY_BARRIER_2;
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO                                                     :: DEPENDENCY_INFO;
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2                                                       :: SUBMIT_INFO_2;
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO                                               :: SEMAPHORE_SUBMIT_INFO;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO                                          :: COMMAND_BUFFER_SUBMIT_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES                          :: PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES           :: PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES                           :: PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES;
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2                                                  :: COPY_BUFFER_INFO_2;
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2                                                   :: COPY_IMAGE_INFO_2;
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2                                         :: COPY_BUFFER_TO_IMAGE_INFO_2;
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2                                         :: COPY_IMAGE_TO_BUFFER_INFO_2;
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2                                                   :: BLIT_IMAGE_INFO_2;
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2                                                :: RESOLVE_IMAGE_INFO_2;
    VK_STRUCTURE_TYPE_BUFFER_COPY_2                                                       :: BUFFER_COPY_2;
    VK_STRUCTURE_TYPE_IMAGE_COPY_2                                                        :: IMAGE_COPY_2;
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2                                                        :: IMAGE_BLIT_2;
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2                                                 :: BUFFER_IMAGE_COPY_2;
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2                                                     :: IMAGE_RESOLVE_2;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES                    :: PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES;
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO            :: PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES                      :: PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES                       :: PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES                     :: PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK                           :: WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK;
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO                    :: DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES               :: PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES;
    VK_STRUCTURE_TYPE_RENDERING_INFO                                                      :: RENDERING_INFO;
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO                                           :: RENDERING_ATTACHMENT_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO                                      :: PIPELINE_RENDERING_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES                          :: PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO                           :: COMMAND_BUFFER_INHERITANCE_RENDERING_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES                 :: PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES               :: PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES                   :: PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES;
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3                                                 :: FORMAT_PROPERTIES_3;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES                              :: PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES                            :: PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES;
    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS                                   :: DEVICE_BUFFER_MEMORY_REQUIREMENTS;
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS                                    :: DEVICE_IMAGE_MEMORY_REQUIREMENTS;
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR                                           :: SWAPCHAIN_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR                                                    :: PRESENT_INFO_KHR;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR                               :: DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR                                     :: IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR                                :: BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR                                         :: ACQUIRE_NEXT_IMAGE_INFO_KHR;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR                                       :: DEVICE_GROUP_PRESENT_INFO_KHR;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR                              :: DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR                                        :: DISPLAY_MODE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR                                     :: DISPLAY_SURFACE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR                                            :: DISPLAY_PRESENT_INFO_KHR;
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR                                        :: XLIB_SURFACE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR                                         :: XCB_SURFACE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR                                     :: WAYLAND_SURFACE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR                                     :: ANDROID_SURFACE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR                                       :: WIN32_SURFACE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT                               :: DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD                :: PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT                                   :: DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT                                    :: DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT                                        :: DEBUG_MARKER_MARKER_INFO_EXT;
    VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR                                              :: VIDEO_PROFILE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR                                              :: VIDEO_CAPABILITIES_KHR;
    VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR                                     :: VIDEO_PICTURE_RESOURCE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR                               :: VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR;
    VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR                                  :: BIND_VIDEO_SESSION_MEMORY_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR                                       :: VIDEO_SESSION_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR                            :: VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR                            :: VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR                                         :: VIDEO_BEGIN_CODING_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR                                           :: VIDEO_END_CODING_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR                                       :: VIDEO_CODING_CONTROL_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR                                       :: VIDEO_REFERENCE_SLOT_INFO_KHR;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR                                   :: QUEUE_FAMILY_VIDEO_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR                                         :: VIDEO_PROFILE_LIST_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR                               :: PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR                                         :: VIDEO_FORMAT_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR                     :: QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR                                               :: VIDEO_DECODE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR                                       :: VIDEO_DECODE_CAPABILITIES_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR                                         :: VIDEO_DECODE_USAGE_INFO_KHR;
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV                           :: DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV                          :: DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV                        :: DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT                     :: PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT                   :: PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT                 :: PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX                                           :: CU_MODULE_CREATE_INFO_NVX;
    VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX                                         :: CU_FUNCTION_CREATE_INFO_NVX;
    VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX                                                  :: CU_LAUNCH_INFO_NVX;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX                                          :: IMAGE_VIEW_HANDLE_INFO_NVX;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX                                   :: IMAGE_VIEW_ADDRESS_PROPERTIES_NVX;

    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR                                  :: VIDEO_DECODE_H264_CAPABILITIES_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR                                  :: VIDEO_DECODE_H264_PICTURE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR                                  :: VIDEO_DECODE_H264_PROFILE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR                :: VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR                   :: VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR                                 :: VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR;
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD                            :: TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR                 :: RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT                  :: RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT;
    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD                                    :: ATTACHMENT_SAMPLE_COUNT_INFO_AMD;
    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX                              :: MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX;
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP                           :: STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV                    :: PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV                                :: EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV                                      :: EXPORT_MEMORY_ALLOCATE_INFO_NV;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV                                  :: IMPORT_MEMORY_WIN32_HANDLE_INFO_NV;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV                                  :: EXPORT_MEMORY_WIN32_HANDLE_INFO_NV;
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV                           :: WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV;
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT                                                :: VALIDATION_FLAGS_EXT;
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN                                           :: VI_SURFACE_CREATE_INFO_NN;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT                                     :: IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT                            :: PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT                                 :: PIPELINE_ROBUSTNESS_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT                    :: PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT                  :: PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR                                 :: IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR                                 :: EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR                                  :: MEMORY_WIN32_HANDLE_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR                                    :: MEMORY_GET_WIN32_HANDLE_INFO_KHR;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR                                           :: IMPORT_MEMORY_FD_INFO_KHR;
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR                                            :: MEMORY_FD_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR                                              :: MEMORY_GET_FD_INFO_KHR;
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR                          :: WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR;
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                              :: IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                              :: EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR                                         :: D3D12_FENCE_SUBMIT_INFO_KHR;
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR                                 :: SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR;
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR                                        :: IMPORT_SEMAPHORE_FD_INFO_KHR;
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR                                           :: SEMAPHORE_GET_FD_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR                      :: PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT           :: COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT                  :: PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT                                :: CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR                                                 :: PRESENT_REGIONS_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV                    :: PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT                                          :: SURFACE_CAPABILITIES_2_EXT;
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT                                              :: DISPLAY_POWER_INFO_EXT;
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT                                               :: DEVICE_EVENT_INFO_EXT;
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT                                              :: DISPLAY_EVENT_INFO_EXT;
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT                                   :: SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE                                           :: PRESENT_TIMES_INFO_GOOGLE;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX        :: PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV                      :: PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT                    :: PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT                    :: PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT           :: PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT           :: PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT                      :: PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT             :: PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT                                                    :: HDR_METADATA_EXT;
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR                             :: SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR                                  :: IMPORT_FENCE_WIN32_HANDLE_INFO_KHR;
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR                                  :: EXPORT_FENCE_WIN32_HANDLE_INFO_KHR;
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR                                     :: FENCE_GET_WIN32_HANDLE_INFO_KHR;
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR                                            :: IMPORT_FENCE_FD_INFO_KHR;
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR                                               :: FENCE_GET_FD_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR                      :: PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR                    :: PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR                              :: QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR                                   :: PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR                                     :: ACQUIRE_PROFILING_LOCK_INFO_KHR;
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR                                             :: PERFORMANCE_COUNTER_KHR;
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR                                 :: PERFORMANCE_COUNTER_DESCRIPTION_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR                                  :: PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR                                          :: SURFACE_CAPABILITIES_2_KHR;
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR                                                :: SURFACE_FORMAT_2_KHR;
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR                                            :: DISPLAY_PROPERTIES_2_KHR;
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR                                      :: DISPLAY_PLANE_PROPERTIES_2_KHR;
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR                                       :: DISPLAY_MODE_PROPERTIES_2_KHR;
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR                                            :: DISPLAY_PLANE_INFO_2_KHR;
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR                                    :: DISPLAY_PLANE_CAPABILITIES_2_KHR;
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK                                         :: IOS_SURFACE_CREATE_INFO_MVK;
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK                                       :: MACOS_SURFACE_CREATE_INFO_MVK;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT                                    :: DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT                                     :: DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT                                               :: DEBUG_UTILS_LABEL_EXT;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT                             :: DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT                               :: DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID                               :: ANDROID_HARDWARE_BUFFER_USAGE_ANDROID;
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID                          :: ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID;
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID                   :: ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID;
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID                         :: IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID                     :: MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID                                             :: EXTERNAL_FORMAT_ANDROID;
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID                 :: ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID;
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT                                           :: SAMPLE_LOCATIONS_INFO_EXT;
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT                         :: RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT                     :: PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT                     :: PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT                                          :: MULTISAMPLE_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT               :: PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT             :: PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT                 :: PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV                     :: PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR                     :: WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR                      :: ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR                      :: ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR                      :: ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR                  :: ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR                  :: ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR                                 :: ACCELERATION_STRUCTURE_GEOMETRY_KHR;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR                             :: ACCELERATION_STRUCTURE_VERSION_INFO_KHR;
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR                                :: COPY_ACCELERATION_STRUCTURE_INFO_KHR;
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR                      :: COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR;
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR                      :: COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR                 :: PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR               :: PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR                              :: ACCELERATION_STRUCTURE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR                         :: ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR                   :: PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR                 :: PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR                                :: RAY_TRACING_PIPELINE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR                            :: RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR                      :: RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR                              :: PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV                   :: PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV                      :: PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV                    :: PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT                             :: DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT                  :: PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT                      :: IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT                  :: IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT                            :: IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT                           :: DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT;
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT                                    :: VALIDATION_CACHE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT                      :: SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;

    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV           :: PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV                      :: PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV                    :: PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV          :: PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV                                 :: RAY_TRACING_PIPELINE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV                               :: ACCELERATION_STRUCTURE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_GEOMETRY_NV                                                         :: GEOMETRY_NV;
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV                                               :: GEOMETRY_TRIANGLES_NV;
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV                                                    :: GEOMETRY_AABB_NV;
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV                          :: BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV                      :: WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV                  :: ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV                           :: PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV                             :: RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV                                      :: ACCELERATION_STRUCTURE_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV            :: PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV          :: PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT                    :: PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT                 :: FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT                                 :: IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT                                  :: MEMORY_HOST_POINTER_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT                 :: PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR                           :: PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD                           :: PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT                                       :: CALIBRATED_TIMESTAMP_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD                          :: PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR                                  :: VIDEO_DECODE_H265_CAPABILITIES_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR                :: VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR                   :: VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR                                  :: VIDEO_DECODE_H265_PROFILE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR                                  :: VIDEO_DECODE_H265_PICTURE_INFO_KHR;
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR                                 :: VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR;
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR                        :: DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR                  :: PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR                         :: QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD                        :: DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT             :: PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT                 :: PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT               :: PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP                                             :: PRESENT_FRAME_TOKEN_GGP;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV              :: PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV                             :: PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV                           :: PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV                  :: PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV            :: PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV                       :: PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV                                                  :: CHECKPOINT_DATA_NV;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV                               :: QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL           :: PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL                      :: QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL                               :: INITIALIZE_PERFORMANCE_API_INFO_INTEL;
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL                                       :: PERFORMANCE_MARKER_INFO_INTEL;
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL                                :: PERFORMANCE_STREAM_MARKER_INFO_INTEL;
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL                                     :: PERFORMANCE_OVERRIDE_INFO_INTEL;
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL                        :: PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT                         :: PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD                         :: DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD;
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD                        :: SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA                               :: IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT                                       :: METAL_SURFACE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT                   :: PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT                 :: PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT                    :: RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR                           :: FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR                :: PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR                :: PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR                  :: PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR                           :: PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD                        :: PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD                        :: PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT              :: PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT                        :: PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT                        :: PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT                                   :: MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR                                  :: SURFACE_PROTECTED_CAPABILITIES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV     :: PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT                  :: PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT                               :: BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT                                             :: VALIDATION_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR                           :: PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV                      :: PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV                                    :: COOPERATIVE_MATRIX_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV                    :: PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV                 :: PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV                    :: PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV                            :: FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT              :: PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT                     :: PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT                       :: PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT       :: PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT                     :: PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT                              :: SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT                      :: SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT;
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT                        :: SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT;
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT                                    :: HEADLESS_SURFACE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT                     :: PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT                   :: PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT                   :: PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT                    :: PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT                       :: PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT                 :: PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR         :: PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR                                                   :: PIPELINE_INFO_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR                                  :: PIPELINE_EXECUTABLE_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR                                        :: PIPELINE_EXECUTABLE_INFO_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR                                   :: PIPELINE_EXECUTABLE_STATISTIC_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR                     :: PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR;
    VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR                                                 :: MEMORY_MAP_INFO_KHR;
    VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR                                               :: MEMORY_UNMAP_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT                  :: PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT;
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT                                            :: SURFACE_PRESENT_MODE_EXT;
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT                            :: SURFACE_PRESENT_SCALING_CAPABILITIES_EXT;
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT                              :: SURFACE_PRESENT_MODE_COMPATIBILITY_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT                :: PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT;
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT                                    :: SWAPCHAIN_PRESENT_FENCE_INFO_EXT;
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT                             :: SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT                                     :: SWAPCHAIN_PRESENT_MODE_INFO_EXT;
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT                           :: SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT                                   :: RELEASE_SWAPCHAIN_IMAGES_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV             :: PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV                                :: GRAPHICS_SHADER_GROUP_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV                      :: GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV                                   :: INDIRECT_COMMANDS_LAYOUT_TOKEN_NV;
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV                             :: INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV                                          :: GENERATED_COMMANDS_INFO_NV;
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV                      :: GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV               :: PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV              :: PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV                 :: COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT                 :: PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM          :: COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM;
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM                               :: RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT                   :: PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT;
    VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT                         :: DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT                              :: DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT                           :: PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT                         :: PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT                         :: SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT                  :: PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT                    :: PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR                                    :: PIPELINE_LIBRARY_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV                         :: PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV                             :: SURFACE_CAPABILITIES_PRESENT_BARRIER_NV;
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV                            :: SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_PRESENT_ID_KHR                                                      :: PRESENT_ID_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR                             :: PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR;

    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV                      :: PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV;
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV                            :: DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV                                        :: QUERY_LOW_LATENCY_SUPPORT_NV;
    VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT                                 :: EXPORT_METAL_OBJECT_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT                                       :: EXPORT_METAL_OBJECTS_INFO_EXT;
    VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT                                        :: EXPORT_METAL_DEVICE_INFO_EXT;
    VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT                                 :: EXPORT_METAL_COMMAND_QUEUE_INFO_EXT;
    VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT                                        :: EXPORT_METAL_BUFFER_INFO_EXT;
    VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT                                        :: IMPORT_METAL_BUFFER_INFO_EXT;
    VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT                                       :: EXPORT_METAL_TEXTURE_INFO_EXT;
    VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT                                       :: IMPORT_METAL_TEXTURE_INFO_EXT;
    VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT                                    :: EXPORT_METAL_IO_SURFACE_INFO_EXT;
    VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT                                    :: IMPORT_METAL_IO_SURFACE_INFO_EXT;
    VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT                                  :: EXPORT_METAL_SHARED_EVENT_INFO_EXT;
    VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT                                  :: IMPORT_METAL_SHARED_EVENT_INFO_EXT;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV                             :: QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV;
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV                                                :: CHECKPOINT_DATA_2_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT                    :: PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT        :: PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT                      :: PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT;
    VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT                                         :: DESCRIPTOR_ADDRESS_INFO_EXT;
    VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT                                             :: DESCRIPTOR_GET_INFO_EXT;
    VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT                             :: BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT                              :: IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT                         :: IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT                            :: SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT                      :: OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT                                  :: DESCRIPTOR_BUFFER_BINDING_INFO_EXT;
    VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT         :: DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT             :: ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT              :: PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT            :: PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT                           :: GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD   :: PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR            :: PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR          :: PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR   :: PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV           :: PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV             :: PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV;
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV            :: PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV            :: ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV                 :: PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV                               :: ACCELERATION_STRUCTURE_MOTION_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT                            :: PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT                          :: PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT              :: PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT                 :: PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT               :: PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM                                    :: COPY_COMMAND_TRANSFORM_INFO_QCOM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR       :: PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT              :: PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT;
    VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT                                       :: IMAGE_COMPRESSION_CONTROL_EXT;
    VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT                                            :: SUBRESOURCE_LAYOUT_2_EXT;
    VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT                                             :: IMAGE_SUBRESOURCE_2_EXT;
    VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT                                    :: IMAGE_COMPRESSION_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT        :: PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT                           :: PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT                                  :: PHYSICAL_DEVICE_FAULT_FEATURES_EXT;
    VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT                                             :: DEVICE_FAULT_COUNTS_EXT;
    VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT                                               :: DEVICE_FAULT_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT                       :: PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT;
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT                                    :: DIRECTFB_SURFACE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT             :: PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT;
    VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT                              :: VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT;
    VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT                            :: VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT                                  :: PHYSICAL_DEVICE_DRM_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT                 :: PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT;
    VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT                            :: DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT                     :: PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT                :: PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT        :: PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA                            :: IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA                             :: MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA;
    VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA                               :: MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA                         :: IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA                            :: SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA                               :: BUFFER_COLLECTION_CREATE_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA                             :: IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA;
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA                         :: BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA                                :: BUFFER_COLLECTION_PROPERTIES_FUCHSIA;
    VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA                                     :: BUFFER_CONSTRAINTS_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA                        :: BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA                                      :: IMAGE_CONSTRAINTS_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA                               :: IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA                                          :: SYSMEM_COLOR_SPACE_FUCHSIA;
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA                          :: BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA;
    VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI                         :: SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI                     :: PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI                   :: PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI                     :: PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI;
    VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV                                   :: MEMORY_GET_REMOTE_ADDRESS_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV                    :: PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV;
    VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT                                  :: PIPELINE_PROPERTIES_IDENTIFIER_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT                    :: PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT  :: PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT;
    VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT                               :: SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT;
    VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT                      :: MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT               :: PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT;
    VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX                                      :: SCREEN_SURFACE_CREATE_INFO_QNX;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT                     :: PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT                                :: PIPELINE_COLOR_WRITE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT             :: PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR              :: PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT                     :: PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT                                  :: IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT                             :: PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT                           :: PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT                    :: PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT                      :: PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT                    :: PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT                                             :: MICROMAP_BUILD_INFO_EXT;
    VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT                                           :: MICROMAP_VERSION_INFO_EXT;
    VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT                                              :: COPY_MICROMAP_INFO_EXT;
    VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT                                    :: COPY_MICROMAP_TO_MEMORY_INFO_EXT;
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT                                    :: COPY_MEMORY_TO_MICROMAP_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT                       :: PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT                     :: PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT                                            :: MICROMAP_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT                                       :: MICROMAP_BUILD_SIZES_INFO_EXT;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT               :: ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT;

    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI              :: PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI            :: PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT                   :: PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT;
    VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT              :: SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT           :: PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM                          :: PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT                :: PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT                                   :: IMAGE_VIEW_SLICED_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE          :: PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE                              :: DESCRIPTOR_SET_BINDING_REFERENCE_VALVE;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE                       :: DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT                   :: PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT                  :: PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM           :: PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM         :: PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM;
    VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM                   :: SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV                    :: PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV                  :: PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV                    :: PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV                  :: PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV                 :: PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT    :: PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM                      :: PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM                    :: PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM                           :: IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT               :: PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT             :: PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT                 :: PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT;
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT                                    :: RENDER_PASS_CREATION_CONTROL_EXT;
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT                       :: RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT                        :: RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG                                   :: DIRECT_DRIVER_LOADING_INFO_LUNARG;
    VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG                                   :: DIRECT_DRIVER_LOADING_LIST_LUNARG;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT               :: PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT             :: PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT             :: PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT                                        :: SHADER_MODULE_IDENTIFIER_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT  :: PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV                            :: PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV                          :: PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV                                   :: OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV;
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV                             :: OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV                                 :: OPTICAL_FLOW_SESSION_CREATE_INFO_NV;
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV                                        :: OPTICAL_FLOW_EXECUTE_INFO_NV;
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV                    :: OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT                       :: PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT              :: PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR             :: PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT                          :: PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT                        :: PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT                                              :: SHADER_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM                       :: PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM;
    VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM                                                :: TILE_PROPERTIES_QCOM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC                        :: PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC;
    VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC                                     :: AMIGO_PROFILING_SUBMIT_INFO_SEC;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM          :: PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV          :: PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV        :: PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT                :: PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT;
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT                             :: MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM                   :: PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM                 :: PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT         :: PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM       :: PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM;
    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM         :: MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT :: PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES                           :: PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES                      :: PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES;
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT                                        :: DEBUG_REPORT_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_RENDERING_INFO_KHR                                                  :: RENDERING_INFO_KHR;
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR                                       :: RENDERING_ATTACHMENT_INFO_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR                                  :: PIPELINE_RENDERING_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR                      :: PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR                       :: COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR;
    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV                                     :: ATTACHMENT_SAMPLE_COUNT_INFO_NV;
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR                               :: RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR                              :: PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR                            :: PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR                                      :: PHYSICAL_DEVICE_FEATURES_2_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR                                    :: PHYSICAL_DEVICE_PROPERTIES_2_KHR;
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR                                             :: FORMAT_PROPERTIES_2_KHR;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR                                       :: IMAGE_FORMAT_PROPERTIES_2_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR                             :: PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR                                       :: QUEUE_FAMILY_PROPERTIES_2_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR                             :: PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR                                :: SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR                      :: PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR;
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR                                      :: MEMORY_ALLOCATE_FLAGS_INFO_KHR;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR                             :: DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR                          :: DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR                                        :: DEVICE_GROUP_SUBMIT_INFO_KHR;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR                                   :: DEVICE_GROUP_BIND_SPARSE_INFO_KHR;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR                            :: BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR                             :: BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT           :: PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR                                :: PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR                                 :: DEVICE_GROUP_DEVICE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR                      :: PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR;
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR                                :: EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR                            :: PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR;
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR                                      :: EXTERNAL_BUFFER_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR                                   :: PHYSICAL_DEVICE_ID_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR                              :: EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR                               :: EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR                                     :: EXPORT_MEMORY_ALLOCATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR                         :: PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR;
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR                                   :: EXTERNAL_SEMAPHORE_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR                                    :: EXPORT_SEMAPHORE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR                    :: PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR                           :: PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR                          :: PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR;
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR                          :: DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT                                           :: SURFACE_CAPABILITIES2_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR                  :: PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR                             :: FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR                               :: FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR;
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR                               :: RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR                                        :: ATTACHMENT_DESCRIPTION_2_KHR;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR                                          :: ATTACHMENT_REFERENCE_2_KHR;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR                                           :: SUBPASS_DESCRIPTION_2_KHR;
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR                                            :: SUBPASS_DEPENDENCY_2_KHR;
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR                                       :: RENDER_PASS_CREATE_INFO_2_KHR;
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR                                              :: SUBPASS_BEGIN_INFO_KHR;
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR                                                :: SUBPASS_END_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR                             :: PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR;
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR                                       :: EXTERNAL_FENCE_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR                                        :: EXPORT_FENCE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR                       :: PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR                 :: RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR                                    :: IMAGE_VIEW_USAGE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR           :: PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR                      :: PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR                       :: PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR                                   :: MEMORY_DEDICATED_REQUIREMENTS_KHR;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR                                  :: MEMORY_DEDICATED_ALLOCATE_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT                :: PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT                              :: SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT                   :: PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT                 :: PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT                       :: WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT;
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT                :: DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR                               :: BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR                                :: IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR;
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR                         :: IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR;
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR                                           :: MEMORY_REQUIREMENTS_2_KHR;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR                              :: SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR                                   :: IMAGE_FORMAT_LIST_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR                            :: SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR                                   :: SAMPLER_YCBCR_CONVERSION_INFO_KHR;
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR                                    :: BIND_IMAGE_PLANE_MEMORY_INFO_KHR;
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR                            :: IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR               :: PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR                :: SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR                                         :: BIND_BUFFER_MEMORY_INFO_KHR;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR                                          :: BIND_IMAGE_MEMORY_INFO_KHR;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT                 :: DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT                    :: PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT                  :: PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT          :: DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT         :: DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR                        :: PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR                                   :: DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR;
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT                        :: DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR         :: PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR                           :: PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR                    :: PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT                          :: PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR                               :: PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR                       :: PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR                :: PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR                       :: SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV             :: PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR                     :: PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR                   :: PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR                                      :: SEMAPHORE_TYPE_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR                                  :: TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR;
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR                                             :: SEMAPHORE_WAIT_INFO_KHR;
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR                                           :: SEMAPHORE_SIGNAL_INFO_KHR;
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL                                        :: QUERY_POOL_CREATE_INFO_INTEL;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR                    :: PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR            :: PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT                    :: PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT                :: PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT        :: PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT                  :: PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR         :: PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR                             :: ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR                           :: ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT                         :: PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT                                      :: BUFFER_DEVICE_ADDRESS_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT                                 :: PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT                                 :: IMAGE_STENCIL_USAGE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR         :: PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR                  :: PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR                                      :: BUFFER_DEVICE_ADDRESS_INFO_KHR;
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR                       :: BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR;
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR                     :: MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR                       :: DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT                       :: PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT     :: PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR             :: PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR           :: PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT               :: PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT                           :: PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT;
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT                                 :: DEVICE_PRIVATE_DATA_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT                                   :: PRIVATE_DATA_SLOT_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT        :: PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT;
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR                                                :: MEMORY_BARRIER_2_KHR;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR                                         :: BUFFER_MEMORY_BARRIER_2_KHR;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR                                          :: IMAGE_MEMORY_BARRIER_2_KHR;
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR                                                 :: DEPENDENCY_INFO_KHR;
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR                                                   :: SUBMIT_INFO_2_KHR;
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR                                           :: SEMAPHORE_SUBMIT_INFO_KHR;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR                                      :: COMMAND_BUFFER_SUBMIT_INFO_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR                      :: PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR       :: PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT                       :: PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT;
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR                                              :: COPY_BUFFER_INFO_2_KHR;
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR                                               :: COPY_IMAGE_INFO_2_KHR;
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR                                     :: COPY_BUFFER_TO_IMAGE_INFO_2_KHR;
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR                                     :: COPY_IMAGE_TO_BUFFER_INFO_2_KHR;
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR                                               :: BLIT_IMAGE_INFO_2_KHR;
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR                                            :: RESOLVE_IMAGE_INFO_2_KHR;
    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR                                                   :: BUFFER_COPY_2_KHR;
    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR                                                    :: IMAGE_COPY_2_KHR;
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR                                                    :: IMAGE_BLIT_2_KHR;
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR                                             :: BUFFER_IMAGE_COPY_2_KHR;
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR                                                 :: IMAGE_RESOLVE_2_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM  :: PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE              :: PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE;
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE                           :: MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE;
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR                                             :: FORMAT_PROPERTIES_3_KHR;
    VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT                                                   :: PIPELINE_INFO_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT                  :: PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT                         :: QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR                          :: PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR                        :: PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR;
    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR                               :: DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR;
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR                                :: DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR;
    VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT                       :: SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_MAX_ENUM                                                            :: MAX_ENUM;
}

PipelineCacheHeaderVersion :: enum u32 {
    ONE      :: 1;
    MAX_ENUM :: 2147483647;

    VK_PIPELINE_CACHE_HEADER_VERSION_ONE      :: ONE;
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM :: MAX_ENUM;
}

ImageLayout :: enum u32 {
    UNDEFINED                                      :: 0;
    GENERAL                                        :: 1;
    COLOR_ATTACHMENT_OPTIMAL                       :: 2;
    DEPTH_STENCIL_ATTACHMENT_OPTIMAL               :: 3;
    DEPTH_STENCIL_READ_ONLY_OPTIMAL                :: 4;
    SHADER_READ_ONLY_OPTIMAL                       :: 5;
    TRANSFER_SRC_OPTIMAL                           :: 6;
    TRANSFER_DST_OPTIMAL                           :: 7;
    PREINITIALIZED                                 :: 8;
    DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL     :: 1000117000;
    DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL     :: 1000117001;
    DEPTH_ATTACHMENT_OPTIMAL                       :: 1000241000;
    DEPTH_READ_ONLY_OPTIMAL                        :: 1000241001;
    STENCIL_ATTACHMENT_OPTIMAL                     :: 1000241002;
    STENCIL_READ_ONLY_OPTIMAL                      :: 1000241003;
    READ_ONLY_OPTIMAL                              :: 1000314000;
    ATTACHMENT_OPTIMAL                             :: 1000314001;
    PRESENT_SRC_KHR                                :: 1000001002;
    VIDEO_DECODE_DST_KHR                           :: 1000024000;
    VIDEO_DECODE_SRC_KHR                           :: 1000024001;
    VIDEO_DECODE_DPB_KHR                           :: 1000024002;
    SHARED_PRESENT_KHR                             :: 1000111000;
    FRAGMENT_DENSITY_MAP_OPTIMAL_EXT               :: 1000218000;
    FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR   :: 1000164003;

    ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT           :: 1000339000;
    DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR :: 1000117000;
    DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR :: 1000117001;
    SHADING_RATE_OPTIMAL_NV                        :: 1000164003;
    DEPTH_ATTACHMENT_OPTIMAL_KHR                   :: 1000241000;
    DEPTH_READ_ONLY_OPTIMAL_KHR                    :: 1000241001;
    STENCIL_ATTACHMENT_OPTIMAL_KHR                 :: 1000241002;
    STENCIL_READ_ONLY_OPTIMAL_KHR                  :: 1000241003;
    READ_ONLY_OPTIMAL_KHR                          :: 1000314000;
    ATTACHMENT_OPTIMAL_KHR                         :: 1000314001;
    MAX_ENUM                                       :: 2147483647;

    VK_IMAGE_LAYOUT_UNDEFINED                                      :: UNDEFINED;
    VK_IMAGE_LAYOUT_GENERAL                                        :: GENERAL;
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL                       :: COLOR_ATTACHMENT_OPTIMAL;
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL               :: DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL                :: DEPTH_STENCIL_READ_ONLY_OPTIMAL;
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL                       :: SHADER_READ_ONLY_OPTIMAL;
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL                           :: TRANSFER_SRC_OPTIMAL;
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL                           :: TRANSFER_DST_OPTIMAL;
    VK_IMAGE_LAYOUT_PREINITIALIZED                                 :: PREINITIALIZED;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL     :: DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL     :: DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL                       :: DEPTH_ATTACHMENT_OPTIMAL;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL                        :: DEPTH_READ_ONLY_OPTIMAL;
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL                     :: STENCIL_ATTACHMENT_OPTIMAL;
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL                      :: STENCIL_READ_ONLY_OPTIMAL;
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL                              :: READ_ONLY_OPTIMAL;
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL                             :: ATTACHMENT_OPTIMAL;
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR                                :: PRESENT_SRC_KHR;
    VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR                           :: VIDEO_DECODE_DST_KHR;
    VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR                           :: VIDEO_DECODE_SRC_KHR;
    VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR                           :: VIDEO_DECODE_DPB_KHR;
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR                             :: SHARED_PRESENT_KHR;
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT               :: FRAGMENT_DENSITY_MAP_OPTIMAL_EXT;
    VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR   :: FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR;

    VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT           :: ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR :: DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR :: DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR;
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV                        :: SHADING_RATE_OPTIMAL_NV;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR                   :: DEPTH_ATTACHMENT_OPTIMAL_KHR;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR                    :: DEPTH_READ_ONLY_OPTIMAL_KHR;
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR                 :: STENCIL_ATTACHMENT_OPTIMAL_KHR;
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR                  :: STENCIL_READ_ONLY_OPTIMAL_KHR;
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR                          :: READ_ONLY_OPTIMAL_KHR;
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR                         :: ATTACHMENT_OPTIMAL_KHR;
    VK_IMAGE_LAYOUT_MAX_ENUM                                       :: MAX_ENUM;
}

ObjectType :: enum u32 {
    UNKNOWN                         :: 0;
    INSTANCE                        :: 1;
    PHYSICAL_DEVICE                 :: 2;
    DEVICE                          :: 3;
    QUEUE                           :: 4;
    SEMAPHORE                       :: 5;
    COMMAND_BUFFER                  :: 6;
    FENCE                           :: 7;
    DEVICE_MEMORY                   :: 8;
    BUFFER                          :: 9;
    IMAGE                           :: 10;
    EVENT                           :: 11;
    QUERY_POOL                      :: 12;
    BUFFER_VIEW                     :: 13;
    IMAGE_VIEW                      :: 14;
    SHADER_MODULE                   :: 15;
    PIPELINE_CACHE                  :: 16;
    PIPELINE_LAYOUT                 :: 17;
    RENDER_PASS                     :: 18;
    PIPELINE                        :: 19;
    DESCRIPTOR_SET_LAYOUT           :: 20;
    SAMPLER                         :: 21;
    DESCRIPTOR_POOL                 :: 22;
    DESCRIPTOR_SET                  :: 23;
    FRAMEBUFFER                     :: 24;
    COMMAND_POOL                    :: 25;
    SAMPLER_YCBCR_CONVERSION        :: 1000156000;
    DESCRIPTOR_UPDATE_TEMPLATE      :: 1000085000;
    PRIVATE_DATA_SLOT               :: 1000295000;
    SURFACE_KHR                     :: 1000000000;
    SWAPCHAIN_KHR                   :: 1000001000;
    DISPLAY_KHR                     :: 1000002000;
    DISPLAY_MODE_KHR                :: 1000002001;
    DEBUG_REPORT_CALLBACK_EXT       :: 1000011000;
    VIDEO_SESSION_KHR               :: 1000023000;
    VIDEO_SESSION_PARAMETERS_KHR    :: 1000023001;
    CU_MODULE_NVX                   :: 1000029000;
    CU_FUNCTION_NVX                 :: 1000029001;
    DEBUG_UTILS_MESSENGER_EXT       :: 1000128000;
    ACCELERATION_STRUCTURE_KHR      :: 1000150000;
    VALIDATION_CACHE_EXT            :: 1000160000;
    ACCELERATION_STRUCTURE_NV       :: 1000165000;
    PERFORMANCE_CONFIGURATION_INTEL :: 1000210000;
    DEFERRED_OPERATION_KHR          :: 1000268000;
    INDIRECT_COMMANDS_LAYOUT_NV     :: 1000277000;
    BUFFER_COLLECTION_FUCHSIA       :: 1000366000;
    MICROMAP_EXT                    :: 1000396000;
    OPTICAL_FLOW_SESSION_NV         :: 1000464000;
    SHADER_EXT                      :: 1000482000;
    DESCRIPTOR_UPDATE_TEMPLATE_KHR  :: 1000085000;
    SAMPLER_YCBCR_CONVERSION_KHR    :: 1000156000;
    PRIVATE_DATA_SLOT_EXT           :: 1000295000;
    MAX_ENUM                        :: 2147483647;

    VK_OBJECT_TYPE_UNKNOWN                         :: UNKNOWN;
    VK_OBJECT_TYPE_INSTANCE                        :: INSTANCE;
    VK_OBJECT_TYPE_PHYSICAL_DEVICE                 :: PHYSICAL_DEVICE;
    VK_OBJECT_TYPE_DEVICE                          :: DEVICE;
    VK_OBJECT_TYPE_QUEUE                           :: QUEUE;
    VK_OBJECT_TYPE_SEMAPHORE                       :: SEMAPHORE;
    VK_OBJECT_TYPE_COMMAND_BUFFER                  :: COMMAND_BUFFER;
    VK_OBJECT_TYPE_FENCE                           :: FENCE;
    VK_OBJECT_TYPE_DEVICE_MEMORY                   :: DEVICE_MEMORY;
    VK_OBJECT_TYPE_BUFFER                          :: BUFFER;
    VK_OBJECT_TYPE_IMAGE                           :: IMAGE;
    VK_OBJECT_TYPE_EVENT                           :: EVENT;
    VK_OBJECT_TYPE_QUERY_POOL                      :: QUERY_POOL;
    VK_OBJECT_TYPE_BUFFER_VIEW                     :: BUFFER_VIEW;
    VK_OBJECT_TYPE_IMAGE_VIEW                      :: IMAGE_VIEW;
    VK_OBJECT_TYPE_SHADER_MODULE                   :: SHADER_MODULE;
    VK_OBJECT_TYPE_PIPELINE_CACHE                  :: PIPELINE_CACHE;
    VK_OBJECT_TYPE_PIPELINE_LAYOUT                 :: PIPELINE_LAYOUT;
    VK_OBJECT_TYPE_RENDER_PASS                     :: RENDER_PASS;
    VK_OBJECT_TYPE_PIPELINE                        :: PIPELINE;
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT           :: DESCRIPTOR_SET_LAYOUT;
    VK_OBJECT_TYPE_SAMPLER                         :: SAMPLER;
    VK_OBJECT_TYPE_DESCRIPTOR_POOL                 :: DESCRIPTOR_POOL;
    VK_OBJECT_TYPE_DESCRIPTOR_SET                  :: DESCRIPTOR_SET;
    VK_OBJECT_TYPE_FRAMEBUFFER                     :: FRAMEBUFFER;
    VK_OBJECT_TYPE_COMMAND_POOL                    :: COMMAND_POOL;
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION        :: SAMPLER_YCBCR_CONVERSION;
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE      :: DESCRIPTOR_UPDATE_TEMPLATE;
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT               :: PRIVATE_DATA_SLOT;
    VK_OBJECT_TYPE_SURFACE_KHR                     :: SURFACE_KHR;
    VK_OBJECT_TYPE_SWAPCHAIN_KHR                   :: SWAPCHAIN_KHR;
    VK_OBJECT_TYPE_DISPLAY_KHR                     :: DISPLAY_KHR;
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR                :: DISPLAY_MODE_KHR;
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT       :: DEBUG_REPORT_CALLBACK_EXT;
    VK_OBJECT_TYPE_VIDEO_SESSION_KHR               :: VIDEO_SESSION_KHR;
    VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR    :: VIDEO_SESSION_PARAMETERS_KHR;
    VK_OBJECT_TYPE_CU_MODULE_NVX                   :: CU_MODULE_NVX;
    VK_OBJECT_TYPE_CU_FUNCTION_NVX                 :: CU_FUNCTION_NVX;
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT       :: DEBUG_UTILS_MESSENGER_EXT;
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR      :: ACCELERATION_STRUCTURE_KHR;
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT            :: VALIDATION_CACHE_EXT;
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV       :: ACCELERATION_STRUCTURE_NV;
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL :: PERFORMANCE_CONFIGURATION_INTEL;
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR          :: DEFERRED_OPERATION_KHR;
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV     :: INDIRECT_COMMANDS_LAYOUT_NV;
    VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA       :: BUFFER_COLLECTION_FUCHSIA;
    VK_OBJECT_TYPE_MICROMAP_EXT                    :: MICROMAP_EXT;
    VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV         :: OPTICAL_FLOW_SESSION_NV;
    VK_OBJECT_TYPE_SHADER_EXT                      :: SHADER_EXT;
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR  :: DESCRIPTOR_UPDATE_TEMPLATE_KHR;
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR    :: SAMPLER_YCBCR_CONVERSION_KHR;
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT           :: PRIVATE_DATA_SLOT_EXT;
    VK_OBJECT_TYPE_MAX_ENUM                        :: MAX_ENUM;
}

VendorId :: enum u32 {
    VIV      :: 65537;
    VSI      :: 65538;
    KAZAN    :: 65539;
    CODEPLAY :: 65540;
    MESA     :: 65541;
    POCL     :: 65542;
    MOBILEYE :: 65543;
    MAX_ENUM :: 2147483647;

    VK_VENDOR_ID_VIV      :: VIV;
    VK_VENDOR_ID_VSI      :: VSI;
    VK_VENDOR_ID_KAZAN    :: KAZAN;
    VK_VENDOR_ID_CODEPLAY :: CODEPLAY;
    VK_VENDOR_ID_MESA     :: MESA;
    VK_VENDOR_ID_POCL     :: POCL;
    VK_VENDOR_ID_MOBILEYE :: MOBILEYE;
    VK_VENDOR_ID_MAX_ENUM :: MAX_ENUM;
}

SystemAllocationScope :: enum u32 {
    COMMAND  :: 0;
    OBJECT   :: 1;
    CACHE    :: 2;
    DEVICE   :: 3;
    INSTANCE :: 4;
    MAX_ENUM :: 2147483647;

    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND  :: COMMAND;
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT   :: OBJECT;
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE    :: CACHE;
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE   :: DEVICE;
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE :: INSTANCE;
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM :: MAX_ENUM;
}

InternalAllocationType :: enum u32 {
    EXECUTABLE :: 0;
    MAX_ENUM   :: 2147483647;

    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE :: EXECUTABLE;
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM   :: MAX_ENUM;
}

Format :: enum u32 {
    UNDEFINED                                      :: 0;
    R4G4_UNORM_PACK8                               :: 1;
    R4G4B4A4_UNORM_PACK16                          :: 2;
    B4G4R4A4_UNORM_PACK16                          :: 3;
    R5G6B5_UNORM_PACK16                            :: 4;
    B5G6R5_UNORM_PACK16                            :: 5;
    R5G5B5A1_UNORM_PACK16                          :: 6;
    B5G5R5A1_UNORM_PACK16                          :: 7;
    A1R5G5B5_UNORM_PACK16                          :: 8;
    R8_UNORM                                       :: 9;
    R8_SNORM                                       :: 10;
    R8_USCALED                                     :: 11;
    R8_SSCALED                                     :: 12;
    R8_UINT                                        :: 13;
    R8_SINT                                        :: 14;
    R8_SRGB                                        :: 15;
    R8G8_UNORM                                     :: 16;
    R8G8_SNORM                                     :: 17;
    R8G8_USCALED                                   :: 18;
    R8G8_SSCALED                                   :: 19;
    R8G8_UINT                                      :: 20;
    R8G8_SINT                                      :: 21;
    R8G8_SRGB                                      :: 22;
    R8G8B8_UNORM                                   :: 23;
    R8G8B8_SNORM                                   :: 24;
    R8G8B8_USCALED                                 :: 25;
    R8G8B8_SSCALED                                 :: 26;
    R8G8B8_UINT                                    :: 27;
    R8G8B8_SINT                                    :: 28;
    R8G8B8_SRGB                                    :: 29;
    B8G8R8_UNORM                                   :: 30;
    B8G8R8_SNORM                                   :: 31;
    B8G8R8_USCALED                                 :: 32;
    B8G8R8_SSCALED                                 :: 33;
    B8G8R8_UINT                                    :: 34;
    B8G8R8_SINT                                    :: 35;
    B8G8R8_SRGB                                    :: 36;
    R8G8B8A8_UNORM                                 :: 37;
    R8G8B8A8_SNORM                                 :: 38;
    R8G8B8A8_USCALED                               :: 39;
    R8G8B8A8_SSCALED                               :: 40;
    R8G8B8A8_UINT                                  :: 41;
    R8G8B8A8_SINT                                  :: 42;
    R8G8B8A8_SRGB                                  :: 43;
    B8G8R8A8_UNORM                                 :: 44;
    B8G8R8A8_SNORM                                 :: 45;
    B8G8R8A8_USCALED                               :: 46;
    B8G8R8A8_SSCALED                               :: 47;
    B8G8R8A8_UINT                                  :: 48;
    B8G8R8A8_SINT                                  :: 49;
    B8G8R8A8_SRGB                                  :: 50;
    A8B8G8R8_UNORM_PACK32                          :: 51;
    A8B8G8R8_SNORM_PACK32                          :: 52;
    A8B8G8R8_USCALED_PACK32                        :: 53;
    A8B8G8R8_SSCALED_PACK32                        :: 54;
    A8B8G8R8_UINT_PACK32                           :: 55;
    A8B8G8R8_SINT_PACK32                           :: 56;
    A8B8G8R8_SRGB_PACK32                           :: 57;
    A2R10G10B10_UNORM_PACK32                       :: 58;
    A2R10G10B10_SNORM_PACK32                       :: 59;
    A2R10G10B10_USCALED_PACK32                     :: 60;
    A2R10G10B10_SSCALED_PACK32                     :: 61;
    A2R10G10B10_UINT_PACK32                        :: 62;
    A2R10G10B10_SINT_PACK32                        :: 63;
    A2B10G10R10_UNORM_PACK32                       :: 64;
    A2B10G10R10_SNORM_PACK32                       :: 65;
    A2B10G10R10_USCALED_PACK32                     :: 66;
    A2B10G10R10_SSCALED_PACK32                     :: 67;
    A2B10G10R10_UINT_PACK32                        :: 68;
    A2B10G10R10_SINT_PACK32                        :: 69;
    R16_UNORM                                      :: 70;
    R16_SNORM                                      :: 71;
    R16_USCALED                                    :: 72;
    R16_SSCALED                                    :: 73;
    R16_UINT                                       :: 74;
    R16_SINT                                       :: 75;
    R16_SFLOAT                                     :: 76;
    R16G16_UNORM                                   :: 77;
    R16G16_SNORM                                   :: 78;
    R16G16_USCALED                                 :: 79;
    R16G16_SSCALED                                 :: 80;
    R16G16_UINT                                    :: 81;
    R16G16_SINT                                    :: 82;
    R16G16_SFLOAT                                  :: 83;
    R16G16B16_UNORM                                :: 84;
    R16G16B16_SNORM                                :: 85;
    R16G16B16_USCALED                              :: 86;
    R16G16B16_SSCALED                              :: 87;
    R16G16B16_UINT                                 :: 88;
    R16G16B16_SINT                                 :: 89;
    R16G16B16_SFLOAT                               :: 90;
    R16G16B16A16_UNORM                             :: 91;
    R16G16B16A16_SNORM                             :: 92;
    R16G16B16A16_USCALED                           :: 93;
    R16G16B16A16_SSCALED                           :: 94;
    R16G16B16A16_UINT                              :: 95;
    R16G16B16A16_SINT                              :: 96;
    R16G16B16A16_SFLOAT                            :: 97;
    R32_UINT                                       :: 98;
    R32_SINT                                       :: 99;
    R32_SFLOAT                                     :: 100;
    R32G32_UINT                                    :: 101;
    R32G32_SINT                                    :: 102;
    R32G32_SFLOAT                                  :: 103;
    R32G32B32_UINT                                 :: 104;
    R32G32B32_SINT                                 :: 105;
    R32G32B32_SFLOAT                               :: 106;
    R32G32B32A32_UINT                              :: 107;
    R32G32B32A32_SINT                              :: 108;
    R32G32B32A32_SFLOAT                            :: 109;
    R64_UINT                                       :: 110;
    R64_SINT                                       :: 111;
    R64_SFLOAT                                     :: 112;
    R64G64_UINT                                    :: 113;
    R64G64_SINT                                    :: 114;
    R64G64_SFLOAT                                  :: 115;
    R64G64B64_UINT                                 :: 116;
    R64G64B64_SINT                                 :: 117;
    R64G64B64_SFLOAT                               :: 118;
    R64G64B64A64_UINT                              :: 119;
    R64G64B64A64_SINT                              :: 120;
    R64G64B64A64_SFLOAT                            :: 121;
    B10G11R11_UFLOAT_PACK32                        :: 122;
    E5B9G9R9_UFLOAT_PACK32                         :: 123;
    D16_UNORM                                      :: 124;
    X8_D24_UNORM_PACK32                            :: 125;
    D32_SFLOAT                                     :: 126;
    S8_UINT                                        :: 127;
    D16_UNORM_S8_UINT                              :: 128;
    D24_UNORM_S8_UINT                              :: 129;
    D32_SFLOAT_S8_UINT                             :: 130;
    BC1_RGB_UNORM_BLOCK                            :: 131;
    BC1_RGB_SRGB_BLOCK                             :: 132;
    BC1_RGBA_UNORM_BLOCK                           :: 133;
    BC1_RGBA_SRGB_BLOCK                            :: 134;
    BC2_UNORM_BLOCK                                :: 135;
    BC2_SRGB_BLOCK                                 :: 136;
    BC3_UNORM_BLOCK                                :: 137;
    BC3_SRGB_BLOCK                                 :: 138;
    BC4_UNORM_BLOCK                                :: 139;
    BC4_SNORM_BLOCK                                :: 140;
    BC5_UNORM_BLOCK                                :: 141;
    BC5_SNORM_BLOCK                                :: 142;
    BC6H_UFLOAT_BLOCK                              :: 143;
    BC6H_SFLOAT_BLOCK                              :: 144;
    BC7_UNORM_BLOCK                                :: 145;
    BC7_SRGB_BLOCK                                 :: 146;
    ETC2_R8G8B8_UNORM_BLOCK                        :: 147;
    ETC2_R8G8B8_SRGB_BLOCK                         :: 148;
    ETC2_R8G8B8A1_UNORM_BLOCK                      :: 149;
    ETC2_R8G8B8A1_SRGB_BLOCK                       :: 150;
    ETC2_R8G8B8A8_UNORM_BLOCK                      :: 151;
    ETC2_R8G8B8A8_SRGB_BLOCK                       :: 152;
    EAC_R11_UNORM_BLOCK                            :: 153;
    EAC_R11_SNORM_BLOCK                            :: 154;
    EAC_R11G11_UNORM_BLOCK                         :: 155;
    EAC_R11G11_SNORM_BLOCK                         :: 156;
    ASTC_4x4_UNORM_BLOCK                           :: 157;
    ASTC_4x4_SRGB_BLOCK                            :: 158;
    ASTC_5x4_UNORM_BLOCK                           :: 159;
    ASTC_5x4_SRGB_BLOCK                            :: 160;
    ASTC_5x5_UNORM_BLOCK                           :: 161;
    ASTC_5x5_SRGB_BLOCK                            :: 162;
    ASTC_6x5_UNORM_BLOCK                           :: 163;
    ASTC_6x5_SRGB_BLOCK                            :: 164;
    ASTC_6x6_UNORM_BLOCK                           :: 165;
    ASTC_6x6_SRGB_BLOCK                            :: 166;
    ASTC_8x5_UNORM_BLOCK                           :: 167;
    ASTC_8x5_SRGB_BLOCK                            :: 168;
    ASTC_8x6_UNORM_BLOCK                           :: 169;
    ASTC_8x6_SRGB_BLOCK                            :: 170;
    ASTC_8x8_UNORM_BLOCK                           :: 171;
    ASTC_8x8_SRGB_BLOCK                            :: 172;
    ASTC_10x5_UNORM_BLOCK                          :: 173;
    ASTC_10x5_SRGB_BLOCK                           :: 174;
    ASTC_10x6_UNORM_BLOCK                          :: 175;
    ASTC_10x6_SRGB_BLOCK                           :: 176;
    ASTC_10x8_UNORM_BLOCK                          :: 177;
    ASTC_10x8_SRGB_BLOCK                           :: 178;
    ASTC_10x10_UNORM_BLOCK                         :: 179;
    ASTC_10x10_SRGB_BLOCK                          :: 180;
    ASTC_12x10_UNORM_BLOCK                         :: 181;
    ASTC_12x10_SRGB_BLOCK                          :: 182;
    ASTC_12x12_UNORM_BLOCK                         :: 183;
    ASTC_12x12_SRGB_BLOCK                          :: 184;
    G8B8G8R8_422_UNORM                             :: 1000156000;
    B8G8R8G8_422_UNORM                             :: 1000156001;
    G8_B8_R8_3PLANE_420_UNORM                      :: 1000156002;
    G8_B8R8_2PLANE_420_UNORM                       :: 1000156003;
    G8_B8_R8_3PLANE_422_UNORM                      :: 1000156004;
    G8_B8R8_2PLANE_422_UNORM                       :: 1000156005;
    G8_B8_R8_3PLANE_444_UNORM                      :: 1000156006;
    R10X6_UNORM_PACK16                             :: 1000156007;
    R10X6G10X6_UNORM_2PACK16                       :: 1000156008;
    R10X6G10X6B10X6A10X6_UNORM_4PACK16             :: 1000156009;
    G10X6B10X6G10X6R10X6_422_UNORM_4PACK16         :: 1000156010;
    B10X6G10X6R10X6G10X6_422_UNORM_4PACK16         :: 1000156011;
    G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16     :: 1000156012;
    G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16      :: 1000156013;
    G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16     :: 1000156014;
    G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16      :: 1000156015;
    G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16     :: 1000156016;
    R12X4_UNORM_PACK16                             :: 1000156017;
    R12X4G12X4_UNORM_2PACK16                       :: 1000156018;
    R12X4G12X4B12X4A12X4_UNORM_4PACK16             :: 1000156019;
    G12X4B12X4G12X4R12X4_422_UNORM_4PACK16         :: 1000156020;
    B12X4G12X4R12X4G12X4_422_UNORM_4PACK16         :: 1000156021;
    G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16     :: 1000156022;
    G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16      :: 1000156023;
    G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16     :: 1000156024;
    G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16      :: 1000156025;
    G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16     :: 1000156026;
    G16B16G16R16_422_UNORM                         :: 1000156027;
    B16G16R16G16_422_UNORM                         :: 1000156028;
    G16_B16_R16_3PLANE_420_UNORM                   :: 1000156029;
    G16_B16R16_2PLANE_420_UNORM                    :: 1000156030;
    G16_B16_R16_3PLANE_422_UNORM                   :: 1000156031;
    G16_B16R16_2PLANE_422_UNORM                    :: 1000156032;
    G16_B16_R16_3PLANE_444_UNORM                   :: 1000156033;
    G8_B8R8_2PLANE_444_UNORM                       :: 1000330000;
    G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16      :: 1000330001;
    G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16      :: 1000330002;
    G16_B16R16_2PLANE_444_UNORM                    :: 1000330003;
    A4R4G4B4_UNORM_PACK16                          :: 1000340000;
    A4B4G4R4_UNORM_PACK16                          :: 1000340001;
    ASTC_4x4_SFLOAT_BLOCK                          :: 1000066000;
    ASTC_5x4_SFLOAT_BLOCK                          :: 1000066001;
    ASTC_5x5_SFLOAT_BLOCK                          :: 1000066002;
    ASTC_6x5_SFLOAT_BLOCK                          :: 1000066003;
    ASTC_6x6_SFLOAT_BLOCK                          :: 1000066004;
    ASTC_8x5_SFLOAT_BLOCK                          :: 1000066005;
    ASTC_8x6_SFLOAT_BLOCK                          :: 1000066006;
    ASTC_8x8_SFLOAT_BLOCK                          :: 1000066007;
    ASTC_10x5_SFLOAT_BLOCK                         :: 1000066008;
    ASTC_10x6_SFLOAT_BLOCK                         :: 1000066009;
    ASTC_10x8_SFLOAT_BLOCK                         :: 1000066010;
    ASTC_10x10_SFLOAT_BLOCK                        :: 1000066011;
    ASTC_12x10_SFLOAT_BLOCK                        :: 1000066012;
    ASTC_12x12_SFLOAT_BLOCK                        :: 1000066013;
    PVRTC1_2BPP_UNORM_BLOCK_IMG                    :: 1000054000;
    PVRTC1_4BPP_UNORM_BLOCK_IMG                    :: 1000054001;
    PVRTC2_2BPP_UNORM_BLOCK_IMG                    :: 1000054002;
    PVRTC2_4BPP_UNORM_BLOCK_IMG                    :: 1000054003;
    PVRTC1_2BPP_SRGB_BLOCK_IMG                     :: 1000054004;
    PVRTC1_4BPP_SRGB_BLOCK_IMG                     :: 1000054005;
    PVRTC2_2BPP_SRGB_BLOCK_IMG                     :: 1000054006;
    PVRTC2_4BPP_SRGB_BLOCK_IMG                     :: 1000054007;
    R16G16_S10_5_NV                                :: 1000464000;
    ASTC_4x4_SFLOAT_BLOCK_EXT                      :: 1000066000;
    ASTC_5x4_SFLOAT_BLOCK_EXT                      :: 1000066001;
    ASTC_5x5_SFLOAT_BLOCK_EXT                      :: 1000066002;
    ASTC_6x5_SFLOAT_BLOCK_EXT                      :: 1000066003;
    ASTC_6x6_SFLOAT_BLOCK_EXT                      :: 1000066004;
    ASTC_8x5_SFLOAT_BLOCK_EXT                      :: 1000066005;
    ASTC_8x6_SFLOAT_BLOCK_EXT                      :: 1000066006;
    ASTC_8x8_SFLOAT_BLOCK_EXT                      :: 1000066007;
    ASTC_10x5_SFLOAT_BLOCK_EXT                     :: 1000066008;
    ASTC_10x6_SFLOAT_BLOCK_EXT                     :: 1000066009;
    ASTC_10x8_SFLOAT_BLOCK_EXT                     :: 1000066010;
    ASTC_10x10_SFLOAT_BLOCK_EXT                    :: 1000066011;
    ASTC_12x10_SFLOAT_BLOCK_EXT                    :: 1000066012;
    ASTC_12x12_SFLOAT_BLOCK_EXT                    :: 1000066013;
    G8B8G8R8_422_UNORM_KHR                         :: 1000156000;
    B8G8R8G8_422_UNORM_KHR                         :: 1000156001;
    G8_B8_R8_3PLANE_420_UNORM_KHR                  :: 1000156002;
    G8_B8R8_2PLANE_420_UNORM_KHR                   :: 1000156003;
    G8_B8_R8_3PLANE_422_UNORM_KHR                  :: 1000156004;
    G8_B8R8_2PLANE_422_UNORM_KHR                   :: 1000156005;
    G8_B8_R8_3PLANE_444_UNORM_KHR                  :: 1000156006;
    R10X6_UNORM_PACK16_KHR                         :: 1000156007;
    R10X6G10X6_UNORM_2PACK16_KHR                   :: 1000156008;
    R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR         :: 1000156009;
    G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR     :: 1000156010;
    B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR     :: 1000156011;
    G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR :: 1000156012;
    G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR  :: 1000156013;
    G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR :: 1000156014;
    G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR  :: 1000156015;
    G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR :: 1000156016;
    R12X4_UNORM_PACK16_KHR                         :: 1000156017;
    R12X4G12X4_UNORM_2PACK16_KHR                   :: 1000156018;
    R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR         :: 1000156019;
    G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR     :: 1000156020;
    B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR     :: 1000156021;
    G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR :: 1000156022;
    G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR  :: 1000156023;
    G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR :: 1000156024;
    G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR  :: 1000156025;
    G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR :: 1000156026;
    G16B16G16R16_422_UNORM_KHR                     :: 1000156027;
    B16G16R16G16_422_UNORM_KHR                     :: 1000156028;
    G16_B16_R16_3PLANE_420_UNORM_KHR               :: 1000156029;
    G16_B16R16_2PLANE_420_UNORM_KHR                :: 1000156030;
    G16_B16_R16_3PLANE_422_UNORM_KHR               :: 1000156031;
    G16_B16R16_2PLANE_422_UNORM_KHR                :: 1000156032;
    G16_B16_R16_3PLANE_444_UNORM_KHR               :: 1000156033;
    G8_B8R8_2PLANE_444_UNORM_EXT                   :: 1000330000;
    G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT  :: 1000330001;
    G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT  :: 1000330002;
    G16_B16R16_2PLANE_444_UNORM_EXT                :: 1000330003;
    A4R4G4B4_UNORM_PACK16_EXT                      :: 1000340000;
    A4B4G4R4_UNORM_PACK16_EXT                      :: 1000340001;
    MAX_ENUM                                       :: 2147483647;

    VK_FORMAT_UNDEFINED                                      :: UNDEFINED;
    VK_FORMAT_R4G4_UNORM_PACK8                               :: R4G4_UNORM_PACK8;
    VK_FORMAT_R4G4B4A4_UNORM_PACK16                          :: R4G4B4A4_UNORM_PACK16;
    VK_FORMAT_B4G4R4A4_UNORM_PACK16                          :: B4G4R4A4_UNORM_PACK16;
    VK_FORMAT_R5G6B5_UNORM_PACK16                            :: R5G6B5_UNORM_PACK16;
    VK_FORMAT_B5G6R5_UNORM_PACK16                            :: B5G6R5_UNORM_PACK16;
    VK_FORMAT_R5G5B5A1_UNORM_PACK16                          :: R5G5B5A1_UNORM_PACK16;
    VK_FORMAT_B5G5R5A1_UNORM_PACK16                          :: B5G5R5A1_UNORM_PACK16;
    VK_FORMAT_A1R5G5B5_UNORM_PACK16                          :: A1R5G5B5_UNORM_PACK16;
    VK_FORMAT_R8_UNORM                                       :: R8_UNORM;
    VK_FORMAT_R8_SNORM                                       :: R8_SNORM;
    VK_FORMAT_R8_USCALED                                     :: R8_USCALED;
    VK_FORMAT_R8_SSCALED                                     :: R8_SSCALED;
    VK_FORMAT_R8_UINT                                        :: R8_UINT;
    VK_FORMAT_R8_SINT                                        :: R8_SINT;
    VK_FORMAT_R8_SRGB                                        :: R8_SRGB;
    VK_FORMAT_R8G8_UNORM                                     :: R8G8_UNORM;
    VK_FORMAT_R8G8_SNORM                                     :: R8G8_SNORM;
    VK_FORMAT_R8G8_USCALED                                   :: R8G8_USCALED;
    VK_FORMAT_R8G8_SSCALED                                   :: R8G8_SSCALED;
    VK_FORMAT_R8G8_UINT                                      :: R8G8_UINT;
    VK_FORMAT_R8G8_SINT                                      :: R8G8_SINT;
    VK_FORMAT_R8G8_SRGB                                      :: R8G8_SRGB;
    VK_FORMAT_R8G8B8_UNORM                                   :: R8G8B8_UNORM;
    VK_FORMAT_R8G8B8_SNORM                                   :: R8G8B8_SNORM;
    VK_FORMAT_R8G8B8_USCALED                                 :: R8G8B8_USCALED;
    VK_FORMAT_R8G8B8_SSCALED                                 :: R8G8B8_SSCALED;
    VK_FORMAT_R8G8B8_UINT                                    :: R8G8B8_UINT;
    VK_FORMAT_R8G8B8_SINT                                    :: R8G8B8_SINT;
    VK_FORMAT_R8G8B8_SRGB                                    :: R8G8B8_SRGB;
    VK_FORMAT_B8G8R8_UNORM                                   :: B8G8R8_UNORM;
    VK_FORMAT_B8G8R8_SNORM                                   :: B8G8R8_SNORM;
    VK_FORMAT_B8G8R8_USCALED                                 :: B8G8R8_USCALED;
    VK_FORMAT_B8G8R8_SSCALED                                 :: B8G8R8_SSCALED;
    VK_FORMAT_B8G8R8_UINT                                    :: B8G8R8_UINT;
    VK_FORMAT_B8G8R8_SINT                                    :: B8G8R8_SINT;
    VK_FORMAT_B8G8R8_SRGB                                    :: B8G8R8_SRGB;
    VK_FORMAT_R8G8B8A8_UNORM                                 :: R8G8B8A8_UNORM;
    VK_FORMAT_R8G8B8A8_SNORM                                 :: R8G8B8A8_SNORM;
    VK_FORMAT_R8G8B8A8_USCALED                               :: R8G8B8A8_USCALED;
    VK_FORMAT_R8G8B8A8_SSCALED                               :: R8G8B8A8_SSCALED;
    VK_FORMAT_R8G8B8A8_UINT                                  :: R8G8B8A8_UINT;
    VK_FORMAT_R8G8B8A8_SINT                                  :: R8G8B8A8_SINT;
    VK_FORMAT_R8G8B8A8_SRGB                                  :: R8G8B8A8_SRGB;
    VK_FORMAT_B8G8R8A8_UNORM                                 :: B8G8R8A8_UNORM;
    VK_FORMAT_B8G8R8A8_SNORM                                 :: B8G8R8A8_SNORM;
    VK_FORMAT_B8G8R8A8_USCALED                               :: B8G8R8A8_USCALED;
    VK_FORMAT_B8G8R8A8_SSCALED                               :: B8G8R8A8_SSCALED;
    VK_FORMAT_B8G8R8A8_UINT                                  :: B8G8R8A8_UINT;
    VK_FORMAT_B8G8R8A8_SINT                                  :: B8G8R8A8_SINT;
    VK_FORMAT_B8G8R8A8_SRGB                                  :: B8G8R8A8_SRGB;
    VK_FORMAT_A8B8G8R8_UNORM_PACK32                          :: A8B8G8R8_UNORM_PACK32;
    VK_FORMAT_A8B8G8R8_SNORM_PACK32                          :: A8B8G8R8_SNORM_PACK32;
    VK_FORMAT_A8B8G8R8_USCALED_PACK32                        :: A8B8G8R8_USCALED_PACK32;
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32                        :: A8B8G8R8_SSCALED_PACK32;
    VK_FORMAT_A8B8G8R8_UINT_PACK32                           :: A8B8G8R8_UINT_PACK32;
    VK_FORMAT_A8B8G8R8_SINT_PACK32                           :: A8B8G8R8_SINT_PACK32;
    VK_FORMAT_A8B8G8R8_SRGB_PACK32                           :: A8B8G8R8_SRGB_PACK32;
    VK_FORMAT_A2R10G10B10_UNORM_PACK32                       :: A2R10G10B10_UNORM_PACK32;
    VK_FORMAT_A2R10G10B10_SNORM_PACK32                       :: A2R10G10B10_SNORM_PACK32;
    VK_FORMAT_A2R10G10B10_USCALED_PACK32                     :: A2R10G10B10_USCALED_PACK32;
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32                     :: A2R10G10B10_SSCALED_PACK32;
    VK_FORMAT_A2R10G10B10_UINT_PACK32                        :: A2R10G10B10_UINT_PACK32;
    VK_FORMAT_A2R10G10B10_SINT_PACK32                        :: A2R10G10B10_SINT_PACK32;
    VK_FORMAT_A2B10G10R10_UNORM_PACK32                       :: A2B10G10R10_UNORM_PACK32;
    VK_FORMAT_A2B10G10R10_SNORM_PACK32                       :: A2B10G10R10_SNORM_PACK32;
    VK_FORMAT_A2B10G10R10_USCALED_PACK32                     :: A2B10G10R10_USCALED_PACK32;
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32                     :: A2B10G10R10_SSCALED_PACK32;
    VK_FORMAT_A2B10G10R10_UINT_PACK32                        :: A2B10G10R10_UINT_PACK32;
    VK_FORMAT_A2B10G10R10_SINT_PACK32                        :: A2B10G10R10_SINT_PACK32;
    VK_FORMAT_R16_UNORM                                      :: R16_UNORM;
    VK_FORMAT_R16_SNORM                                      :: R16_SNORM;
    VK_FORMAT_R16_USCALED                                    :: R16_USCALED;
    VK_FORMAT_R16_SSCALED                                    :: R16_SSCALED;
    VK_FORMAT_R16_UINT                                       :: R16_UINT;
    VK_FORMAT_R16_SINT                                       :: R16_SINT;
    VK_FORMAT_R16_SFLOAT                                     :: R16_SFLOAT;
    VK_FORMAT_R16G16_UNORM                                   :: R16G16_UNORM;
    VK_FORMAT_R16G16_SNORM                                   :: R16G16_SNORM;
    VK_FORMAT_R16G16_USCALED                                 :: R16G16_USCALED;
    VK_FORMAT_R16G16_SSCALED                                 :: R16G16_SSCALED;
    VK_FORMAT_R16G16_UINT                                    :: R16G16_UINT;
    VK_FORMAT_R16G16_SINT                                    :: R16G16_SINT;
    VK_FORMAT_R16G16_SFLOAT                                  :: R16G16_SFLOAT;
    VK_FORMAT_R16G16B16_UNORM                                :: R16G16B16_UNORM;
    VK_FORMAT_R16G16B16_SNORM                                :: R16G16B16_SNORM;
    VK_FORMAT_R16G16B16_USCALED                              :: R16G16B16_USCALED;
    VK_FORMAT_R16G16B16_SSCALED                              :: R16G16B16_SSCALED;
    VK_FORMAT_R16G16B16_UINT                                 :: R16G16B16_UINT;
    VK_FORMAT_R16G16B16_SINT                                 :: R16G16B16_SINT;
    VK_FORMAT_R16G16B16_SFLOAT                               :: R16G16B16_SFLOAT;
    VK_FORMAT_R16G16B16A16_UNORM                             :: R16G16B16A16_UNORM;
    VK_FORMAT_R16G16B16A16_SNORM                             :: R16G16B16A16_SNORM;
    VK_FORMAT_R16G16B16A16_USCALED                           :: R16G16B16A16_USCALED;
    VK_FORMAT_R16G16B16A16_SSCALED                           :: R16G16B16A16_SSCALED;
    VK_FORMAT_R16G16B16A16_UINT                              :: R16G16B16A16_UINT;
    VK_FORMAT_R16G16B16A16_SINT                              :: R16G16B16A16_SINT;
    VK_FORMAT_R16G16B16A16_SFLOAT                            :: R16G16B16A16_SFLOAT;
    VK_FORMAT_R32_UINT                                       :: R32_UINT;
    VK_FORMAT_R32_SINT                                       :: R32_SINT;
    VK_FORMAT_R32_SFLOAT                                     :: R32_SFLOAT;
    VK_FORMAT_R32G32_UINT                                    :: R32G32_UINT;
    VK_FORMAT_R32G32_SINT                                    :: R32G32_SINT;
    VK_FORMAT_R32G32_SFLOAT                                  :: R32G32_SFLOAT;
    VK_FORMAT_R32G32B32_UINT                                 :: R32G32B32_UINT;
    VK_FORMAT_R32G32B32_SINT                                 :: R32G32B32_SINT;
    VK_FORMAT_R32G32B32_SFLOAT                               :: R32G32B32_SFLOAT;
    VK_FORMAT_R32G32B32A32_UINT                              :: R32G32B32A32_UINT;
    VK_FORMAT_R32G32B32A32_SINT                              :: R32G32B32A32_SINT;
    VK_FORMAT_R32G32B32A32_SFLOAT                            :: R32G32B32A32_SFLOAT;
    VK_FORMAT_R64_UINT                                       :: R64_UINT;
    VK_FORMAT_R64_SINT                                       :: R64_SINT;
    VK_FORMAT_R64_SFLOAT                                     :: R64_SFLOAT;
    VK_FORMAT_R64G64_UINT                                    :: R64G64_UINT;
    VK_FORMAT_R64G64_SINT                                    :: R64G64_SINT;
    VK_FORMAT_R64G64_SFLOAT                                  :: R64G64_SFLOAT;
    VK_FORMAT_R64G64B64_UINT                                 :: R64G64B64_UINT;
    VK_FORMAT_R64G64B64_SINT                                 :: R64G64B64_SINT;
    VK_FORMAT_R64G64B64_SFLOAT                               :: R64G64B64_SFLOAT;
    VK_FORMAT_R64G64B64A64_UINT                              :: R64G64B64A64_UINT;
    VK_FORMAT_R64G64B64A64_SINT                              :: R64G64B64A64_SINT;
    VK_FORMAT_R64G64B64A64_SFLOAT                            :: R64G64B64A64_SFLOAT;
    VK_FORMAT_B10G11R11_UFLOAT_PACK32                        :: B10G11R11_UFLOAT_PACK32;
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32                         :: E5B9G9R9_UFLOAT_PACK32;
    VK_FORMAT_D16_UNORM                                      :: D16_UNORM;
    VK_FORMAT_X8_D24_UNORM_PACK32                            :: X8_D24_UNORM_PACK32;
    VK_FORMAT_D32_SFLOAT                                     :: D32_SFLOAT;
    VK_FORMAT_S8_UINT                                        :: S8_UINT;
    VK_FORMAT_D16_UNORM_S8_UINT                              :: D16_UNORM_S8_UINT;
    VK_FORMAT_D24_UNORM_S8_UINT                              :: D24_UNORM_S8_UINT;
    VK_FORMAT_D32_SFLOAT_S8_UINT                             :: D32_SFLOAT_S8_UINT;
    VK_FORMAT_BC1_RGB_UNORM_BLOCK                            :: BC1_RGB_UNORM_BLOCK;
    VK_FORMAT_BC1_RGB_SRGB_BLOCK                             :: BC1_RGB_SRGB_BLOCK;
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK                           :: BC1_RGBA_UNORM_BLOCK;
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK                            :: BC1_RGBA_SRGB_BLOCK;
    VK_FORMAT_BC2_UNORM_BLOCK                                :: BC2_UNORM_BLOCK;
    VK_FORMAT_BC2_SRGB_BLOCK                                 :: BC2_SRGB_BLOCK;
    VK_FORMAT_BC3_UNORM_BLOCK                                :: BC3_UNORM_BLOCK;
    VK_FORMAT_BC3_SRGB_BLOCK                                 :: BC3_SRGB_BLOCK;
    VK_FORMAT_BC4_UNORM_BLOCK                                :: BC4_UNORM_BLOCK;
    VK_FORMAT_BC4_SNORM_BLOCK                                :: BC4_SNORM_BLOCK;
    VK_FORMAT_BC5_UNORM_BLOCK                                :: BC5_UNORM_BLOCK;
    VK_FORMAT_BC5_SNORM_BLOCK                                :: BC5_SNORM_BLOCK;
    VK_FORMAT_BC6H_UFLOAT_BLOCK                              :: BC6H_UFLOAT_BLOCK;
    VK_FORMAT_BC6H_SFLOAT_BLOCK                              :: BC6H_SFLOAT_BLOCK;
    VK_FORMAT_BC7_UNORM_BLOCK                                :: BC7_UNORM_BLOCK;
    VK_FORMAT_BC7_SRGB_BLOCK                                 :: BC7_SRGB_BLOCK;
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK                        :: ETC2_R8G8B8_UNORM_BLOCK;
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK                         :: ETC2_R8G8B8_SRGB_BLOCK;
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK                      :: ETC2_R8G8B8A1_UNORM_BLOCK;
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK                       :: ETC2_R8G8B8A1_SRGB_BLOCK;
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK                      :: ETC2_R8G8B8A8_UNORM_BLOCK;
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK                       :: ETC2_R8G8B8A8_SRGB_BLOCK;
    VK_FORMAT_EAC_R11_UNORM_BLOCK                            :: EAC_R11_UNORM_BLOCK;
    VK_FORMAT_EAC_R11_SNORM_BLOCK                            :: EAC_R11_SNORM_BLOCK;
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK                         :: EAC_R11G11_UNORM_BLOCK;
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK                         :: EAC_R11G11_SNORM_BLOCK;
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK                           :: ASTC_4x4_UNORM_BLOCK;
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK                            :: ASTC_4x4_SRGB_BLOCK;
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK                           :: ASTC_5x4_UNORM_BLOCK;
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK                            :: ASTC_5x4_SRGB_BLOCK;
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK                           :: ASTC_5x5_UNORM_BLOCK;
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK                            :: ASTC_5x5_SRGB_BLOCK;
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK                           :: ASTC_6x5_UNORM_BLOCK;
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK                            :: ASTC_6x5_SRGB_BLOCK;
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK                           :: ASTC_6x6_UNORM_BLOCK;
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK                            :: ASTC_6x6_SRGB_BLOCK;
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK                           :: ASTC_8x5_UNORM_BLOCK;
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK                            :: ASTC_8x5_SRGB_BLOCK;
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK                           :: ASTC_8x6_UNORM_BLOCK;
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK                            :: ASTC_8x6_SRGB_BLOCK;
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK                           :: ASTC_8x8_UNORM_BLOCK;
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK                            :: ASTC_8x8_SRGB_BLOCK;
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK                          :: ASTC_10x5_UNORM_BLOCK;
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK                           :: ASTC_10x5_SRGB_BLOCK;
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK                          :: ASTC_10x6_UNORM_BLOCK;
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK                           :: ASTC_10x6_SRGB_BLOCK;
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK                          :: ASTC_10x8_UNORM_BLOCK;
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK                           :: ASTC_10x8_SRGB_BLOCK;
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK                         :: ASTC_10x10_UNORM_BLOCK;
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK                          :: ASTC_10x10_SRGB_BLOCK;
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK                         :: ASTC_12x10_UNORM_BLOCK;
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK                          :: ASTC_12x10_SRGB_BLOCK;
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK                         :: ASTC_12x12_UNORM_BLOCK;
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK                          :: ASTC_12x12_SRGB_BLOCK;
    VK_FORMAT_G8B8G8R8_422_UNORM                             :: G8B8G8R8_422_UNORM;
    VK_FORMAT_B8G8R8G8_422_UNORM                             :: B8G8R8G8_422_UNORM;
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM                      :: G8_B8_R8_3PLANE_420_UNORM;
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM                       :: G8_B8R8_2PLANE_420_UNORM;
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM                      :: G8_B8_R8_3PLANE_422_UNORM;
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM                       :: G8_B8R8_2PLANE_422_UNORM;
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM                      :: G8_B8_R8_3PLANE_444_UNORM;
    VK_FORMAT_R10X6_UNORM_PACK16                             :: R10X6_UNORM_PACK16;
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16                       :: R10X6G10X6_UNORM_2PACK16;
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16             :: R10X6G10X6B10X6A10X6_UNORM_4PACK16;
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16         :: G10X6B10X6G10X6R10X6_422_UNORM_4PACK16;
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16         :: B10X6G10X6R10X6G10X6_422_UNORM_4PACK16;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16     :: G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16      :: G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16     :: G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16      :: G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16     :: G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16;
    VK_FORMAT_R12X4_UNORM_PACK16                             :: R12X4_UNORM_PACK16;
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16                       :: R12X4G12X4_UNORM_2PACK16;
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16             :: R12X4G12X4B12X4A12X4_UNORM_4PACK16;
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16         :: G12X4B12X4G12X4R12X4_422_UNORM_4PACK16;
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16         :: B12X4G12X4R12X4G12X4_422_UNORM_4PACK16;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16     :: G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16      :: G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16     :: G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16      :: G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16     :: G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16;
    VK_FORMAT_G16B16G16R16_422_UNORM                         :: G16B16G16R16_422_UNORM;
    VK_FORMAT_B16G16R16G16_422_UNORM                         :: B16G16R16G16_422_UNORM;
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM                   :: G16_B16_R16_3PLANE_420_UNORM;
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM                    :: G16_B16R16_2PLANE_420_UNORM;
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM                   :: G16_B16_R16_3PLANE_422_UNORM;
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM                    :: G16_B16R16_2PLANE_422_UNORM;
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM                   :: G16_B16_R16_3PLANE_444_UNORM;
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM                       :: G8_B8R8_2PLANE_444_UNORM;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16      :: G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16      :: G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16;
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM                    :: G16_B16R16_2PLANE_444_UNORM;
    VK_FORMAT_A4R4G4B4_UNORM_PACK16                          :: A4R4G4B4_UNORM_PACK16;
    VK_FORMAT_A4B4G4R4_UNORM_PACK16                          :: A4B4G4R4_UNORM_PACK16;
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK                          :: ASTC_4x4_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK                          :: ASTC_5x4_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK                          :: ASTC_5x5_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK                          :: ASTC_6x5_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK                          :: ASTC_6x6_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK                          :: ASTC_8x5_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK                          :: ASTC_8x6_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK                          :: ASTC_8x8_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK                         :: ASTC_10x5_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK                         :: ASTC_10x6_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK                         :: ASTC_10x8_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK                        :: ASTC_10x10_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK                        :: ASTC_12x10_SFLOAT_BLOCK;
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK                        :: ASTC_12x12_SFLOAT_BLOCK;
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG                    :: PVRTC1_2BPP_UNORM_BLOCK_IMG;
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG                    :: PVRTC1_4BPP_UNORM_BLOCK_IMG;
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG                    :: PVRTC2_2BPP_UNORM_BLOCK_IMG;
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG                    :: PVRTC2_4BPP_UNORM_BLOCK_IMG;
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG                     :: PVRTC1_2BPP_SRGB_BLOCK_IMG;
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG                     :: PVRTC1_4BPP_SRGB_BLOCK_IMG;
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG                     :: PVRTC2_2BPP_SRGB_BLOCK_IMG;
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG                     :: PVRTC2_4BPP_SRGB_BLOCK_IMG;
    VK_FORMAT_R16G16_S10_5_NV                                :: R16G16_S10_5_NV;
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT                      :: ASTC_4x4_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT                      :: ASTC_5x4_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT                      :: ASTC_5x5_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT                      :: ASTC_6x5_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT                      :: ASTC_6x6_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT                      :: ASTC_8x5_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT                      :: ASTC_8x6_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT                      :: ASTC_8x8_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT                     :: ASTC_10x5_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT                     :: ASTC_10x6_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT                     :: ASTC_10x8_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT                    :: ASTC_10x10_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT                    :: ASTC_12x10_SFLOAT_BLOCK_EXT;
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT                    :: ASTC_12x12_SFLOAT_BLOCK_EXT;
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR                         :: G8B8G8R8_422_UNORM_KHR;
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR                         :: B8G8R8G8_422_UNORM_KHR;
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR                  :: G8_B8_R8_3PLANE_420_UNORM_KHR;
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR                   :: G8_B8R8_2PLANE_420_UNORM_KHR;
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR                  :: G8_B8_R8_3PLANE_422_UNORM_KHR;
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR                   :: G8_B8R8_2PLANE_422_UNORM_KHR;
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR                  :: G8_B8_R8_3PLANE_444_UNORM_KHR;
    VK_FORMAT_R10X6_UNORM_PACK16_KHR                         :: R10X6_UNORM_PACK16_KHR;
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR                   :: R10X6G10X6_UNORM_2PACK16_KHR;
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR         :: R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR;
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR     :: G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR;
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR     :: B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR :: G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR  :: G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR :: G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR  :: G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR :: G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR;
    VK_FORMAT_R12X4_UNORM_PACK16_KHR                         :: R12X4_UNORM_PACK16_KHR;
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR                   :: R12X4G12X4_UNORM_2PACK16_KHR;
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR         :: R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR;
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR     :: G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR;
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR     :: B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR :: G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR  :: G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR :: G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR  :: G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR :: G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR;
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR                     :: G16B16G16R16_422_UNORM_KHR;
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR                     :: B16G16R16G16_422_UNORM_KHR;
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR               :: G16_B16_R16_3PLANE_420_UNORM_KHR;
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR                :: G16_B16R16_2PLANE_420_UNORM_KHR;
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR               :: G16_B16_R16_3PLANE_422_UNORM_KHR;
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR                :: G16_B16R16_2PLANE_422_UNORM_KHR;
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR               :: G16_B16_R16_3PLANE_444_UNORM_KHR;
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT                   :: G8_B8R8_2PLANE_444_UNORM_EXT;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT  :: G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT  :: G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT;
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT                :: G16_B16R16_2PLANE_444_UNORM_EXT;
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT                      :: A4R4G4B4_UNORM_PACK16_EXT;
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT                      :: A4B4G4R4_UNORM_PACK16_EXT;
    VK_FORMAT_MAX_ENUM                                       :: MAX_ENUM;
}

ImageTiling :: enum u32 {
    OPTIMAL                 :: 0;
    LINEAR                  :: 1;
    DRM_FORMAT_MODIFIER_EXT :: 1000158000;
    MAX_ENUM                :: 2147483647;

    VK_IMAGE_TILING_OPTIMAL                 :: OPTIMAL;
    VK_IMAGE_TILING_LINEAR                  :: LINEAR;
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT :: DRM_FORMAT_MODIFIER_EXT;
    VK_IMAGE_TILING_MAX_ENUM                :: MAX_ENUM;
}

ImageType :: enum u32 {
    _1D      :: 0;
    _2D      :: 1;
    _3D      :: 2;
    MAX_ENUM :: 2147483647;

    VK_IMAGE_TYPE_1D       :: _1D;
    VK_IMAGE_TYPE_2D       :: _2D;
    VK_IMAGE_TYPE_3D       :: _3D;
    VK_IMAGE_TYPE_MAX_ENUM :: MAX_ENUM;
}

PhysicalDeviceType :: enum u32 {
    OTHER          :: 0;
    INTEGRATED_GPU :: 1;
    DISCRETE_GPU   :: 2;
    VIRTUAL_GPU    :: 3;
    CPU            :: 4;
    MAX_ENUM       :: 2147483647;

    VK_PHYSICAL_DEVICE_TYPE_OTHER          :: OTHER;
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU :: INTEGRATED_GPU;
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU   :: DISCRETE_GPU;
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU    :: VIRTUAL_GPU;
    VK_PHYSICAL_DEVICE_TYPE_CPU            :: CPU;
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM       :: MAX_ENUM;
}

QueryType :: enum u32 {
    OCCLUSION                                                      :: 0;
    PIPELINE_STATISTICS                                            :: 1;
    TIMESTAMP                                                      :: 2;
    RESULT_STATUS_ONLY_KHR                                         :: 1000023000;
    TRANSFORM_FEEDBACK_STREAM_EXT                                  :: 1000028004;
    PERFORMANCE_QUERY_KHR                                          :: 1000116000;
    ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR                      :: 1000150000;
    ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR                  :: 1000150001;
    ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV                       :: 1000165000;
    PERFORMANCE_QUERY_INTEL                                        :: 1000210000;

    MESH_PRIMITIVES_GENERATED_EXT                                  :: 1000328000;
    PRIMITIVES_GENERATED_EXT                                       :: 1000382000;
    ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR :: 1000386000;
    ACCELERATION_STRUCTURE_SIZE_KHR                                :: 1000386001;
    MICROMAP_SERIALIZATION_SIZE_EXT                                :: 1000396000;
    MICROMAP_COMPACTED_SIZE_EXT                                    :: 1000396001;
    MAX_ENUM                                                       :: 2147483647;

    VK_QUERY_TYPE_OCCLUSION                                                      :: OCCLUSION;
    VK_QUERY_TYPE_PIPELINE_STATISTICS                                            :: PIPELINE_STATISTICS;
    VK_QUERY_TYPE_TIMESTAMP                                                      :: TIMESTAMP;
    VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR                                         :: RESULT_STATUS_ONLY_KHR;
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT                                  :: TRANSFORM_FEEDBACK_STREAM_EXT;
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR                                          :: PERFORMANCE_QUERY_KHR;
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR                      :: ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR;
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR                  :: ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR;
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV                       :: ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV;
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL                                        :: PERFORMANCE_QUERY_INTEL;

    VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT                                  :: MESH_PRIMITIVES_GENERATED_EXT;
    VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT                                       :: PRIMITIVES_GENERATED_EXT;
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR :: ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR;
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR                                :: ACCELERATION_STRUCTURE_SIZE_KHR;
    VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT                                :: MICROMAP_SERIALIZATION_SIZE_EXT;
    VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT                                    :: MICROMAP_COMPACTED_SIZE_EXT;
    VK_QUERY_TYPE_MAX_ENUM                                                       :: MAX_ENUM;
}

SharingMode :: enum u32 {
    EXCLUSIVE  :: 0;
    CONCURRENT :: 1;
    MAX_ENUM   :: 2147483647;

    VK_SHARING_MODE_EXCLUSIVE  :: EXCLUSIVE;
    VK_SHARING_MODE_CONCURRENT :: CONCURRENT;
    VK_SHARING_MODE_MAX_ENUM   :: MAX_ENUM;
}

ComponentSwizzle :: enum u32 {
    IDENTITY :: 0;
    ZERO     :: 1;
    ONE      :: 2;
    R        :: 3;
    G        :: 4;
    B        :: 5;
    A        :: 6;
    MAX_ENUM :: 2147483647;

    VK_COMPONENT_SWIZZLE_IDENTITY :: IDENTITY;
    VK_COMPONENT_SWIZZLE_ZERO     :: ZERO;
    VK_COMPONENT_SWIZZLE_ONE      :: ONE;
    VK_COMPONENT_SWIZZLE_R        :: R;
    VK_COMPONENT_SWIZZLE_G        :: G;
    VK_COMPONENT_SWIZZLE_B        :: B;
    VK_COMPONENT_SWIZZLE_A        :: A;
    VK_COMPONENT_SWIZZLE_MAX_ENUM :: MAX_ENUM;
}

ImageViewType :: enum u32 {
    _1D        :: 0;
    _2D        :: 1;
    _3D        :: 2;
    CUBE       :: 3;
    _1D_ARRAY  :: 4;
    _2D_ARRAY  :: 5;
    CUBE_ARRAY :: 6;
    MAX_ENUM   :: 2147483647;

    VK_IMAGE_VIEW_TYPE_1D         :: _1D;
    VK_IMAGE_VIEW_TYPE_2D         :: _2D;
    VK_IMAGE_VIEW_TYPE_3D         :: _3D;
    VK_IMAGE_VIEW_TYPE_CUBE       :: CUBE;
    VK_IMAGE_VIEW_TYPE_1D_ARRAY   :: _1D_ARRAY;
    VK_IMAGE_VIEW_TYPE_2D_ARRAY   :: _2D_ARRAY;
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY :: CUBE_ARRAY;
    VK_IMAGE_VIEW_TYPE_MAX_ENUM   :: MAX_ENUM;
}

BlendFactor :: enum u32 {
    ZERO                     :: 0;
    ONE                      :: 1;
    SRC_COLOR                :: 2;
    ONE_MINUS_SRC_COLOR      :: 3;
    DST_COLOR                :: 4;
    ONE_MINUS_DST_COLOR      :: 5;
    SRC_ALPHA                :: 6;
    ONE_MINUS_SRC_ALPHA      :: 7;
    DST_ALPHA                :: 8;
    ONE_MINUS_DST_ALPHA      :: 9;
    CONSTANT_COLOR           :: 10;
    ONE_MINUS_CONSTANT_COLOR :: 11;
    CONSTANT_ALPHA           :: 12;
    ONE_MINUS_CONSTANT_ALPHA :: 13;
    SRC_ALPHA_SATURATE       :: 14;
    SRC1_COLOR               :: 15;
    ONE_MINUS_SRC1_COLOR     :: 16;
    SRC1_ALPHA               :: 17;
    ONE_MINUS_SRC1_ALPHA     :: 18;
    MAX_ENUM                 :: 2147483647;

    VK_BLEND_FACTOR_ZERO                     :: ZERO;
    VK_BLEND_FACTOR_ONE                      :: ONE;
    VK_BLEND_FACTOR_SRC_COLOR                :: SRC_COLOR;
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR      :: ONE_MINUS_SRC_COLOR;
    VK_BLEND_FACTOR_DST_COLOR                :: DST_COLOR;
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR      :: ONE_MINUS_DST_COLOR;
    VK_BLEND_FACTOR_SRC_ALPHA                :: SRC_ALPHA;
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA      :: ONE_MINUS_SRC_ALPHA;
    VK_BLEND_FACTOR_DST_ALPHA                :: DST_ALPHA;
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA      :: ONE_MINUS_DST_ALPHA;
    VK_BLEND_FACTOR_CONSTANT_COLOR           :: CONSTANT_COLOR;
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR :: ONE_MINUS_CONSTANT_COLOR;
    VK_BLEND_FACTOR_CONSTANT_ALPHA           :: CONSTANT_ALPHA;
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA :: ONE_MINUS_CONSTANT_ALPHA;
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE       :: SRC_ALPHA_SATURATE;
    VK_BLEND_FACTOR_SRC1_COLOR               :: SRC1_COLOR;
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR     :: ONE_MINUS_SRC1_COLOR;
    VK_BLEND_FACTOR_SRC1_ALPHA               :: SRC1_ALPHA;
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA     :: ONE_MINUS_SRC1_ALPHA;
    VK_BLEND_FACTOR_MAX_ENUM                 :: MAX_ENUM;
}

BlendOp :: enum u32 {
    ADD                    :: 0;
    SUBTRACT               :: 1;
    REVERSE_SUBTRACT       :: 2;
    MIN                    :: 3;
    MAX                    :: 4;
    ZERO_EXT               :: 1000148000;
    SRC_EXT                :: 1000148001;
    DST_EXT                :: 1000148002;
    SRC_OVER_EXT           :: 1000148003;
    DST_OVER_EXT           :: 1000148004;
    SRC_IN_EXT             :: 1000148005;
    DST_IN_EXT             :: 1000148006;
    SRC_OUT_EXT            :: 1000148007;
    DST_OUT_EXT            :: 1000148008;
    SRC_ATOP_EXT           :: 1000148009;
    DST_ATOP_EXT           :: 1000148010;
    XOR_EXT                :: 1000148011;
    MULTIPLY_EXT           :: 1000148012;
    SCREEN_EXT             :: 1000148013;
    OVERLAY_EXT            :: 1000148014;
    DARKEN_EXT             :: 1000148015;
    LIGHTEN_EXT            :: 1000148016;
    COLORDODGE_EXT         :: 1000148017;
    COLORBURN_EXT          :: 1000148018;
    HARDLIGHT_EXT          :: 1000148019;
    SOFTLIGHT_EXT          :: 1000148020;
    DIFFERENCE_EXT         :: 1000148021;
    EXCLUSION_EXT          :: 1000148022;
    INVERT_EXT             :: 1000148023;
    INVERT_RGB_EXT         :: 1000148024;
    LINEARDODGE_EXT        :: 1000148025;
    LINEARBURN_EXT         :: 1000148026;
    VIVIDLIGHT_EXT         :: 1000148027;
    LINEARLIGHT_EXT        :: 1000148028;
    PINLIGHT_EXT           :: 1000148029;
    HARDMIX_EXT            :: 1000148030;
    HSL_HUE_EXT            :: 1000148031;
    HSL_SATURATION_EXT     :: 1000148032;
    HSL_COLOR_EXT          :: 1000148033;
    HSL_LUMINOSITY_EXT     :: 1000148034;
    PLUS_EXT               :: 1000148035;
    PLUS_CLAMPED_EXT       :: 1000148036;
    PLUS_CLAMPED_ALPHA_EXT :: 1000148037;
    PLUS_DARKER_EXT        :: 1000148038;
    MINUS_EXT              :: 1000148039;
    MINUS_CLAMPED_EXT      :: 1000148040;
    CONTRAST_EXT           :: 1000148041;
    INVERT_OVG_EXT         :: 1000148042;
    RED_EXT                :: 1000148043;
    GREEN_EXT              :: 1000148044;
    BLUE_EXT               :: 1000148045;
    MAX_ENUM               :: 2147483647;

    VK_BLEND_OP_ADD                    :: ADD;
    VK_BLEND_OP_SUBTRACT               :: SUBTRACT;
    VK_BLEND_OP_REVERSE_SUBTRACT       :: REVERSE_SUBTRACT;
    VK_BLEND_OP_MIN                    :: MIN;
    VK_BLEND_OP_MAX                    :: MAX;
    VK_BLEND_OP_ZERO_EXT               :: ZERO_EXT;
    VK_BLEND_OP_SRC_EXT                :: SRC_EXT;
    VK_BLEND_OP_DST_EXT                :: DST_EXT;
    VK_BLEND_OP_SRC_OVER_EXT           :: SRC_OVER_EXT;
    VK_BLEND_OP_DST_OVER_EXT           :: DST_OVER_EXT;
    VK_BLEND_OP_SRC_IN_EXT             :: SRC_IN_EXT;
    VK_BLEND_OP_DST_IN_EXT             :: DST_IN_EXT;
    VK_BLEND_OP_SRC_OUT_EXT            :: SRC_OUT_EXT;
    VK_BLEND_OP_DST_OUT_EXT            :: DST_OUT_EXT;
    VK_BLEND_OP_SRC_ATOP_EXT           :: SRC_ATOP_EXT;
    VK_BLEND_OP_DST_ATOP_EXT           :: DST_ATOP_EXT;
    VK_BLEND_OP_XOR_EXT                :: XOR_EXT;
    VK_BLEND_OP_MULTIPLY_EXT           :: MULTIPLY_EXT;
    VK_BLEND_OP_SCREEN_EXT             :: SCREEN_EXT;
    VK_BLEND_OP_OVERLAY_EXT            :: OVERLAY_EXT;
    VK_BLEND_OP_DARKEN_EXT             :: DARKEN_EXT;
    VK_BLEND_OP_LIGHTEN_EXT            :: LIGHTEN_EXT;
    VK_BLEND_OP_COLORDODGE_EXT         :: COLORDODGE_EXT;
    VK_BLEND_OP_COLORBURN_EXT          :: COLORBURN_EXT;
    VK_BLEND_OP_HARDLIGHT_EXT          :: HARDLIGHT_EXT;
    VK_BLEND_OP_SOFTLIGHT_EXT          :: SOFTLIGHT_EXT;
    VK_BLEND_OP_DIFFERENCE_EXT         :: DIFFERENCE_EXT;
    VK_BLEND_OP_EXCLUSION_EXT          :: EXCLUSION_EXT;
    VK_BLEND_OP_INVERT_EXT             :: INVERT_EXT;
    VK_BLEND_OP_INVERT_RGB_EXT         :: INVERT_RGB_EXT;
    VK_BLEND_OP_LINEARDODGE_EXT        :: LINEARDODGE_EXT;
    VK_BLEND_OP_LINEARBURN_EXT         :: LINEARBURN_EXT;
    VK_BLEND_OP_VIVIDLIGHT_EXT         :: VIVIDLIGHT_EXT;
    VK_BLEND_OP_LINEARLIGHT_EXT        :: LINEARLIGHT_EXT;
    VK_BLEND_OP_PINLIGHT_EXT           :: PINLIGHT_EXT;
    VK_BLEND_OP_HARDMIX_EXT            :: HARDMIX_EXT;
    VK_BLEND_OP_HSL_HUE_EXT            :: HSL_HUE_EXT;
    VK_BLEND_OP_HSL_SATURATION_EXT     :: HSL_SATURATION_EXT;
    VK_BLEND_OP_HSL_COLOR_EXT          :: HSL_COLOR_EXT;
    VK_BLEND_OP_HSL_LUMINOSITY_EXT     :: HSL_LUMINOSITY_EXT;
    VK_BLEND_OP_PLUS_EXT               :: PLUS_EXT;
    VK_BLEND_OP_PLUS_CLAMPED_EXT       :: PLUS_CLAMPED_EXT;
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT :: PLUS_CLAMPED_ALPHA_EXT;
    VK_BLEND_OP_PLUS_DARKER_EXT        :: PLUS_DARKER_EXT;
    VK_BLEND_OP_MINUS_EXT              :: MINUS_EXT;
    VK_BLEND_OP_MINUS_CLAMPED_EXT      :: MINUS_CLAMPED_EXT;
    VK_BLEND_OP_CONTRAST_EXT           :: CONTRAST_EXT;
    VK_BLEND_OP_INVERT_OVG_EXT         :: INVERT_OVG_EXT;
    VK_BLEND_OP_RED_EXT                :: RED_EXT;
    VK_BLEND_OP_GREEN_EXT              :: GREEN_EXT;
    VK_BLEND_OP_BLUE_EXT               :: BLUE_EXT;
    VK_BLEND_OP_MAX_ENUM               :: MAX_ENUM;
}

CompareOp :: enum u32 {
    NEVER            :: 0;
    LESS             :: 1;
    EQUAL            :: 2;
    LESS_OR_EQUAL    :: 3;
    GREATER          :: 4;
    NOT_EQUAL        :: 5;
    GREATER_OR_EQUAL :: 6;
    ALWAYS           :: 7;
    MAX_ENUM         :: 2147483647;

    VK_COMPARE_OP_NEVER            :: NEVER;
    VK_COMPARE_OP_LESS             :: LESS;
    VK_COMPARE_OP_EQUAL            :: EQUAL;
    VK_COMPARE_OP_LESS_OR_EQUAL    :: LESS_OR_EQUAL;
    VK_COMPARE_OP_GREATER          :: GREATER;
    VK_COMPARE_OP_NOT_EQUAL        :: NOT_EQUAL;
    VK_COMPARE_OP_GREATER_OR_EQUAL :: GREATER_OR_EQUAL;
    VK_COMPARE_OP_ALWAYS           :: ALWAYS;
    VK_COMPARE_OP_MAX_ENUM         :: MAX_ENUM;
}

DynamicState :: enum u32 {
    VIEWPORT                                :: 0;
    SCISSOR                                 :: 1;
    LINE_WIDTH                              :: 2;
    DEPTH_BIAS                              :: 3;
    BLEND_CONSTANTS                         :: 4;
    DEPTH_BOUNDS                            :: 5;
    STENCIL_COMPARE_MASK                    :: 6;
    STENCIL_WRITE_MASK                      :: 7;
    STENCIL_REFERENCE                       :: 8;
    CULL_MODE                               :: 1000267000;
    FRONT_FACE                              :: 1000267001;
    PRIMITIVE_TOPOLOGY                      :: 1000267002;
    VIEWPORT_WITH_COUNT                     :: 1000267003;
    SCISSOR_WITH_COUNT                      :: 1000267004;
    VERTEX_INPUT_BINDING_STRIDE             :: 1000267005;
    DEPTH_TEST_ENABLE                       :: 1000267006;
    DEPTH_WRITE_ENABLE                      :: 1000267007;
    DEPTH_COMPARE_OP                        :: 1000267008;
    DEPTH_BOUNDS_TEST_ENABLE                :: 1000267009;
    STENCIL_TEST_ENABLE                     :: 1000267010;
    STENCIL_OP                              :: 1000267011;
    RASTERIZER_DISCARD_ENABLE               :: 1000377001;
    DEPTH_BIAS_ENABLE                       :: 1000377002;
    PRIMITIVE_RESTART_ENABLE                :: 1000377004;
    VIEWPORT_W_SCALING_NV                   :: 1000087000;
    DISCARD_RECTANGLE_EXT                   :: 1000099000;
    DISCARD_RECTANGLE_ENABLE_EXT            :: 1000099001;
    DISCARD_RECTANGLE_MODE_EXT              :: 1000099002;
    SAMPLE_LOCATIONS_EXT                    :: 1000143000;
    RAY_TRACING_PIPELINE_STACK_SIZE_KHR     :: 1000347000;
    VIEWPORT_SHADING_RATE_PALETTE_NV        :: 1000164004;
    VIEWPORT_COARSE_SAMPLE_ORDER_NV         :: 1000164006;
    EXCLUSIVE_SCISSOR_ENABLE_NV             :: 1000205000;
    EXCLUSIVE_SCISSOR_NV                    :: 1000205001;
    FRAGMENT_SHADING_RATE_KHR               :: 1000226000;
    LINE_STIPPLE_EXT                        :: 1000259000;
    VERTEX_INPUT_EXT                        :: 1000352000;
    PATCH_CONTROL_POINTS_EXT                :: 1000377000;
    LOGIC_OP_EXT                            :: 1000377003;
    COLOR_WRITE_ENABLE_EXT                  :: 1000381000;
    TESSELLATION_DOMAIN_ORIGIN_EXT          :: 1000455002;
    DEPTH_CLAMP_ENABLE_EXT                  :: 1000455003;
    POLYGON_MODE_EXT                        :: 1000455004;
    RASTERIZATION_SAMPLES_EXT               :: 1000455005;
    SAMPLE_MASK_EXT                         :: 1000455006;
    ALPHA_TO_COVERAGE_ENABLE_EXT            :: 1000455007;
    ALPHA_TO_ONE_ENABLE_EXT                 :: 1000455008;
    LOGIC_OP_ENABLE_EXT                     :: 1000455009;
    COLOR_BLEND_ENABLE_EXT                  :: 1000455010;
    COLOR_BLEND_EQUATION_EXT                :: 1000455011;
    COLOR_WRITE_MASK_EXT                    :: 1000455012;
    RASTERIZATION_STREAM_EXT                :: 1000455013;
    CONSERVATIVE_RASTERIZATION_MODE_EXT     :: 1000455014;
    EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT :: 1000455015;
    DEPTH_CLIP_ENABLE_EXT                   :: 1000455016;
    SAMPLE_LOCATIONS_ENABLE_EXT             :: 1000455017;
    COLOR_BLEND_ADVANCED_EXT                :: 1000455018;
    PROVOKING_VERTEX_MODE_EXT               :: 1000455019;
    LINE_RASTERIZATION_MODE_EXT             :: 1000455020;
    LINE_STIPPLE_ENABLE_EXT                 :: 1000455021;
    DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT      :: 1000455022;
    VIEWPORT_W_SCALING_ENABLE_NV            :: 1000455023;
    VIEWPORT_SWIZZLE_NV                     :: 1000455024;
    COVERAGE_TO_COLOR_ENABLE_NV             :: 1000455025;
    COVERAGE_TO_COLOR_LOCATION_NV           :: 1000455026;
    COVERAGE_MODULATION_MODE_NV             :: 1000455027;
    COVERAGE_MODULATION_TABLE_ENABLE_NV     :: 1000455028;
    COVERAGE_MODULATION_TABLE_NV            :: 1000455029;
    SHADING_RATE_IMAGE_ENABLE_NV            :: 1000455030;
    REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV  :: 1000455031;
    COVERAGE_REDUCTION_MODE_NV              :: 1000455032;
    ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT     :: 1000524000;
    CULL_MODE_EXT                           :: 1000267000;
    FRONT_FACE_EXT                          :: 1000267001;
    PRIMITIVE_TOPOLOGY_EXT                  :: 1000267002;
    VIEWPORT_WITH_COUNT_EXT                 :: 1000267003;
    SCISSOR_WITH_COUNT_EXT                  :: 1000267004;
    VERTEX_INPUT_BINDING_STRIDE_EXT         :: 1000267005;
    DEPTH_TEST_ENABLE_EXT                   :: 1000267006;
    DEPTH_WRITE_ENABLE_EXT                  :: 1000267007;
    DEPTH_COMPARE_OP_EXT                    :: 1000267008;
    DEPTH_BOUNDS_TEST_ENABLE_EXT            :: 1000267009;
    STENCIL_TEST_ENABLE_EXT                 :: 1000267010;
    STENCIL_OP_EXT                          :: 1000267011;
    RASTERIZER_DISCARD_ENABLE_EXT           :: 1000377001;
    DEPTH_BIAS_ENABLE_EXT                   :: 1000377002;
    PRIMITIVE_RESTART_ENABLE_EXT            :: 1000377004;
    MAX_ENUM                                :: 2147483647;

    VK_DYNAMIC_STATE_VIEWPORT                                :: VIEWPORT;
    VK_DYNAMIC_STATE_SCISSOR                                 :: SCISSOR;
    VK_DYNAMIC_STATE_LINE_WIDTH                              :: LINE_WIDTH;
    VK_DYNAMIC_STATE_DEPTH_BIAS                              :: DEPTH_BIAS;
    VK_DYNAMIC_STATE_BLEND_CONSTANTS                         :: BLEND_CONSTANTS;
    VK_DYNAMIC_STATE_DEPTH_BOUNDS                            :: DEPTH_BOUNDS;
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK                    :: STENCIL_COMPARE_MASK;
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK                      :: STENCIL_WRITE_MASK;
    VK_DYNAMIC_STATE_STENCIL_REFERENCE                       :: STENCIL_REFERENCE;
    VK_DYNAMIC_STATE_CULL_MODE                               :: CULL_MODE;
    VK_DYNAMIC_STATE_FRONT_FACE                              :: FRONT_FACE;
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY                      :: PRIMITIVE_TOPOLOGY;
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT                     :: VIEWPORT_WITH_COUNT;
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT                      :: SCISSOR_WITH_COUNT;
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE             :: VERTEX_INPUT_BINDING_STRIDE;
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE                       :: DEPTH_TEST_ENABLE;
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE                      :: DEPTH_WRITE_ENABLE;
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP                        :: DEPTH_COMPARE_OP;
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE                :: DEPTH_BOUNDS_TEST_ENABLE;
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE                     :: STENCIL_TEST_ENABLE;
    VK_DYNAMIC_STATE_STENCIL_OP                              :: STENCIL_OP;
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE               :: RASTERIZER_DISCARD_ENABLE;
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE                       :: DEPTH_BIAS_ENABLE;
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE                :: PRIMITIVE_RESTART_ENABLE;
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV                   :: VIEWPORT_W_SCALING_NV;
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT                   :: DISCARD_RECTANGLE_EXT;
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT            :: DISCARD_RECTANGLE_ENABLE_EXT;
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT              :: DISCARD_RECTANGLE_MODE_EXT;
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT                    :: SAMPLE_LOCATIONS_EXT;
    VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR     :: RAY_TRACING_PIPELINE_STACK_SIZE_KHR;
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV        :: VIEWPORT_SHADING_RATE_PALETTE_NV;
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV         :: VIEWPORT_COARSE_SAMPLE_ORDER_NV;
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV             :: EXCLUSIVE_SCISSOR_ENABLE_NV;
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV                    :: EXCLUSIVE_SCISSOR_NV;
    VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR               :: FRAGMENT_SHADING_RATE_KHR;
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT                        :: LINE_STIPPLE_EXT;
    VK_DYNAMIC_STATE_VERTEX_INPUT_EXT                        :: VERTEX_INPUT_EXT;
    VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT                :: PATCH_CONTROL_POINTS_EXT;
    VK_DYNAMIC_STATE_LOGIC_OP_EXT                            :: LOGIC_OP_EXT;
    VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT                  :: COLOR_WRITE_ENABLE_EXT;
    VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT          :: TESSELLATION_DOMAIN_ORIGIN_EXT;
    VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT                  :: DEPTH_CLAMP_ENABLE_EXT;
    VK_DYNAMIC_STATE_POLYGON_MODE_EXT                        :: POLYGON_MODE_EXT;
    VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT               :: RASTERIZATION_SAMPLES_EXT;
    VK_DYNAMIC_STATE_SAMPLE_MASK_EXT                         :: SAMPLE_MASK_EXT;
    VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT            :: ALPHA_TO_COVERAGE_ENABLE_EXT;
    VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT                 :: ALPHA_TO_ONE_ENABLE_EXT;
    VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT                     :: LOGIC_OP_ENABLE_EXT;
    VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT                  :: COLOR_BLEND_ENABLE_EXT;
    VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT                :: COLOR_BLEND_EQUATION_EXT;
    VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT                    :: COLOR_WRITE_MASK_EXT;
    VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT                :: RASTERIZATION_STREAM_EXT;
    VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT     :: CONSERVATIVE_RASTERIZATION_MODE_EXT;
    VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT :: EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT;
    VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT                   :: DEPTH_CLIP_ENABLE_EXT;
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT             :: SAMPLE_LOCATIONS_ENABLE_EXT;
    VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT                :: COLOR_BLEND_ADVANCED_EXT;
    VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT               :: PROVOKING_VERTEX_MODE_EXT;
    VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT             :: LINE_RASTERIZATION_MODE_EXT;
    VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT                 :: LINE_STIPPLE_ENABLE_EXT;
    VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT      :: DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT;
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV            :: VIEWPORT_W_SCALING_ENABLE_NV;
    VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV                     :: VIEWPORT_SWIZZLE_NV;
    VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV             :: COVERAGE_TO_COLOR_ENABLE_NV;
    VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV           :: COVERAGE_TO_COLOR_LOCATION_NV;
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV             :: COVERAGE_MODULATION_MODE_NV;
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV     :: COVERAGE_MODULATION_TABLE_ENABLE_NV;
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV            :: COVERAGE_MODULATION_TABLE_NV;
    VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV            :: SHADING_RATE_IMAGE_ENABLE_NV;
    VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV  :: REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV;
    VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV              :: COVERAGE_REDUCTION_MODE_NV;
    VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT     :: ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT;
    VK_DYNAMIC_STATE_CULL_MODE_EXT                           :: CULL_MODE_EXT;
    VK_DYNAMIC_STATE_FRONT_FACE_EXT                          :: FRONT_FACE_EXT;
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT                  :: PRIMITIVE_TOPOLOGY_EXT;
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT                 :: VIEWPORT_WITH_COUNT_EXT;
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT                  :: SCISSOR_WITH_COUNT_EXT;
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT         :: VERTEX_INPUT_BINDING_STRIDE_EXT;
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT                   :: DEPTH_TEST_ENABLE_EXT;
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT                  :: DEPTH_WRITE_ENABLE_EXT;
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT                    :: DEPTH_COMPARE_OP_EXT;
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT            :: DEPTH_BOUNDS_TEST_ENABLE_EXT;
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT                 :: STENCIL_TEST_ENABLE_EXT;
    VK_DYNAMIC_STATE_STENCIL_OP_EXT                          :: STENCIL_OP_EXT;
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT           :: RASTERIZER_DISCARD_ENABLE_EXT;
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT                   :: DEPTH_BIAS_ENABLE_EXT;
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT            :: PRIMITIVE_RESTART_ENABLE_EXT;
    VK_DYNAMIC_STATE_MAX_ENUM                                :: MAX_ENUM;
}

FrontFace :: enum u32 {
    COUNTER_CLOCKWISE :: 0;
    CLOCKWISE         :: 1;
    MAX_ENUM          :: 2147483647;

    VK_FRONT_FACE_COUNTER_CLOCKWISE :: COUNTER_CLOCKWISE;
    VK_FRONT_FACE_CLOCKWISE         :: CLOCKWISE;
    VK_FRONT_FACE_MAX_ENUM          :: MAX_ENUM;
}

VertexInputRate :: enum u32 {
    VERTEX   :: 0;
    INSTANCE :: 1;
    MAX_ENUM :: 2147483647;

    VK_VERTEX_INPUT_RATE_VERTEX   :: VERTEX;
    VK_VERTEX_INPUT_RATE_INSTANCE :: INSTANCE;
    VK_VERTEX_INPUT_RATE_MAX_ENUM :: MAX_ENUM;
}

PrimitiveTopology :: enum u32 {
    POINT_LIST                    :: 0;
    LINE_LIST                     :: 1;
    LINE_STRIP                    :: 2;
    TRIANGLE_LIST                 :: 3;
    TRIANGLE_STRIP                :: 4;
    TRIANGLE_FAN                  :: 5;
    LINE_LIST_WITH_ADJACENCY      :: 6;
    LINE_STRIP_WITH_ADJACENCY     :: 7;
    TRIANGLE_LIST_WITH_ADJACENCY  :: 8;
    TRIANGLE_STRIP_WITH_ADJACENCY :: 9;
    PATCH_LIST                    :: 10;
    MAX_ENUM                      :: 2147483647;

    VK_PRIMITIVE_TOPOLOGY_POINT_LIST                    :: POINT_LIST;
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST                     :: LINE_LIST;
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP                    :: LINE_STRIP;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST                 :: TRIANGLE_LIST;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP                :: TRIANGLE_STRIP;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN                  :: TRIANGLE_FAN;
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY      :: LINE_LIST_WITH_ADJACENCY;
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY     :: LINE_STRIP_WITH_ADJACENCY;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY  :: TRIANGLE_LIST_WITH_ADJACENCY;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY :: TRIANGLE_STRIP_WITH_ADJACENCY;
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST                    :: PATCH_LIST;
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM                      :: MAX_ENUM;
}

PolygonMode :: enum u32 {
    FILL              :: 0;
    LINE              :: 1;
    POINT             :: 2;
    FILL_RECTANGLE_NV :: 1000153000;
    MAX_ENUM          :: 2147483647;

    VK_POLYGON_MODE_FILL              :: FILL;
    VK_POLYGON_MODE_LINE              :: LINE;
    VK_POLYGON_MODE_POINT             :: POINT;
    VK_POLYGON_MODE_FILL_RECTANGLE_NV :: FILL_RECTANGLE_NV;
    VK_POLYGON_MODE_MAX_ENUM          :: MAX_ENUM;
}

StencilOp :: enum u32 {
    KEEP                :: 0;
    ZERO                :: 1;
    REPLACE             :: 2;
    INCREMENT_AND_CLAMP :: 3;
    DECREMENT_AND_CLAMP :: 4;
    INVERT              :: 5;
    INCREMENT_AND_WRAP  :: 6;
    DECREMENT_AND_WRAP  :: 7;
    MAX_ENUM            :: 2147483647;

    VK_STENCIL_OP_KEEP                :: KEEP;
    VK_STENCIL_OP_ZERO                :: ZERO;
    VK_STENCIL_OP_REPLACE             :: REPLACE;
    VK_STENCIL_OP_INCREMENT_AND_CLAMP :: INCREMENT_AND_CLAMP;
    VK_STENCIL_OP_DECREMENT_AND_CLAMP :: DECREMENT_AND_CLAMP;
    VK_STENCIL_OP_INVERT              :: INVERT;
    VK_STENCIL_OP_INCREMENT_AND_WRAP  :: INCREMENT_AND_WRAP;
    VK_STENCIL_OP_DECREMENT_AND_WRAP  :: DECREMENT_AND_WRAP;
    VK_STENCIL_OP_MAX_ENUM            :: MAX_ENUM;
}

LogicOp :: enum u32 {
    CLEAR         :: 0;
    AND           :: 1;
    AND_REVERSE   :: 2;
    COPY          :: 3;
    AND_INVERTED  :: 4;
    NO_OP         :: 5;
    XOR           :: 6;
    OR            :: 7;
    NOR           :: 8;
    EQUIVALENT    :: 9;
    INVERT        :: 10;
    OR_REVERSE    :: 11;
    COPY_INVERTED :: 12;
    OR_INVERTED   :: 13;
    NAND          :: 14;
    SET           :: 15;
    MAX_ENUM      :: 2147483647;

    VK_LOGIC_OP_CLEAR         :: CLEAR;
    VK_LOGIC_OP_AND           :: AND;
    VK_LOGIC_OP_AND_REVERSE   :: AND_REVERSE;
    VK_LOGIC_OP_COPY          :: COPY;
    VK_LOGIC_OP_AND_INVERTED  :: AND_INVERTED;
    VK_LOGIC_OP_NO_OP         :: NO_OP;
    VK_LOGIC_OP_XOR           :: XOR;
    VK_LOGIC_OP_OR            :: OR;
    VK_LOGIC_OP_NOR           :: NOR;
    VK_LOGIC_OP_EQUIVALENT    :: EQUIVALENT;
    VK_LOGIC_OP_INVERT        :: INVERT;
    VK_LOGIC_OP_OR_REVERSE    :: OR_REVERSE;
    VK_LOGIC_OP_COPY_INVERTED :: COPY_INVERTED;
    VK_LOGIC_OP_OR_INVERTED   :: OR_INVERTED;
    VK_LOGIC_OP_NAND          :: NAND;
    VK_LOGIC_OP_SET           :: SET;
    VK_LOGIC_OP_MAX_ENUM      :: MAX_ENUM;
}

BorderColor :: enum u32 {
    FLOAT_TRANSPARENT_BLACK :: 0;
    INT_TRANSPARENT_BLACK   :: 1;
    FLOAT_OPAQUE_BLACK      :: 2;
    INT_OPAQUE_BLACK        :: 3;
    FLOAT_OPAQUE_WHITE      :: 4;
    INT_OPAQUE_WHITE        :: 5;
    FLOAT_CUSTOM_EXT        :: 1000287003;
    INT_CUSTOM_EXT          :: 1000287004;
    MAX_ENUM                :: 2147483647;

    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK :: FLOAT_TRANSPARENT_BLACK;
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK   :: INT_TRANSPARENT_BLACK;
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK      :: FLOAT_OPAQUE_BLACK;
    VK_BORDER_COLOR_INT_OPAQUE_BLACK        :: INT_OPAQUE_BLACK;
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE      :: FLOAT_OPAQUE_WHITE;
    VK_BORDER_COLOR_INT_OPAQUE_WHITE        :: INT_OPAQUE_WHITE;
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT        :: FLOAT_CUSTOM_EXT;
    VK_BORDER_COLOR_INT_CUSTOM_EXT          :: INT_CUSTOM_EXT;
    VK_BORDER_COLOR_MAX_ENUM                :: MAX_ENUM;
}

Filter :: enum u32 {
    NEAREST   :: 0;
    LINEAR    :: 1;
    CUBIC_EXT :: 1000015000;
    CUBIC_IMG :: 1000015000;
    MAX_ENUM  :: 2147483647;

    VK_FILTER_NEAREST   :: NEAREST;
    VK_FILTER_LINEAR    :: LINEAR;
    VK_FILTER_CUBIC_EXT :: CUBIC_EXT;
    VK_FILTER_CUBIC_IMG :: CUBIC_IMG;
    VK_FILTER_MAX_ENUM  :: MAX_ENUM;
}

SamplerAddressMode :: enum u32 {
    REPEAT                   :: 0;
    MIRRORED_REPEAT          :: 1;
    CLAMP_TO_EDGE            :: 2;
    CLAMP_TO_BORDER          :: 3;
    MIRROR_CLAMP_TO_EDGE     :: 4;
    MIRROR_CLAMP_TO_EDGE_KHR :: 4;
    MAX_ENUM                 :: 2147483647;

    VK_SAMPLER_ADDRESS_MODE_REPEAT                   :: REPEAT;
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT          :: MIRRORED_REPEAT;
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE            :: CLAMP_TO_EDGE;
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER          :: CLAMP_TO_BORDER;
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE     :: MIRROR_CLAMP_TO_EDGE;
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR :: MIRROR_CLAMP_TO_EDGE_KHR;
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM                 :: MAX_ENUM;
}

SamplerMipmapMode :: enum u32 {
    NEAREST  :: 0;
    LINEAR   :: 1;
    MAX_ENUM :: 2147483647;

    VK_SAMPLER_MIPMAP_MODE_NEAREST  :: NEAREST;
    VK_SAMPLER_MIPMAP_MODE_LINEAR   :: LINEAR;
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM :: MAX_ENUM;
}

DescriptorType :: enum u32 {
    SAMPLER                    :: 0;
    COMBINED_IMAGE_SAMPLER     :: 1;
    SAMPLED_IMAGE              :: 2;
    STORAGE_IMAGE              :: 3;
    UNIFORM_TEXEL_BUFFER       :: 4;
    STORAGE_TEXEL_BUFFER       :: 5;
    UNIFORM_BUFFER             :: 6;
    STORAGE_BUFFER             :: 7;
    UNIFORM_BUFFER_DYNAMIC     :: 8;
    STORAGE_BUFFER_DYNAMIC     :: 9;
    INPUT_ATTACHMENT           :: 10;
    INLINE_UNIFORM_BLOCK       :: 1000138000;
    ACCELERATION_STRUCTURE_KHR :: 1000150000;
    ACCELERATION_STRUCTURE_NV  :: 1000165000;
    SAMPLE_WEIGHT_IMAGE_QCOM   :: 1000440000;
    BLOCK_MATCH_IMAGE_QCOM     :: 1000440001;
    MUTABLE_EXT                :: 1000351000;
    INLINE_UNIFORM_BLOCK_EXT   :: 1000138000;
    MUTABLE_VALVE              :: 1000351000;
    MAX_ENUM                   :: 2147483647;

    VK_DESCRIPTOR_TYPE_SAMPLER                    :: SAMPLER;
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER     :: COMBINED_IMAGE_SAMPLER;
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE              :: SAMPLED_IMAGE;
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE              :: STORAGE_IMAGE;
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER       :: UNIFORM_TEXEL_BUFFER;
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER       :: STORAGE_TEXEL_BUFFER;
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER             :: UNIFORM_BUFFER;
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER             :: STORAGE_BUFFER;
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC     :: UNIFORM_BUFFER_DYNAMIC;
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC     :: STORAGE_BUFFER_DYNAMIC;
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT           :: INPUT_ATTACHMENT;
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK       :: INLINE_UNIFORM_BLOCK;
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR :: ACCELERATION_STRUCTURE_KHR;
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV  :: ACCELERATION_STRUCTURE_NV;
    VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM   :: SAMPLE_WEIGHT_IMAGE_QCOM;
    VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM     :: BLOCK_MATCH_IMAGE_QCOM;
    VK_DESCRIPTOR_TYPE_MUTABLE_EXT                :: MUTABLE_EXT;
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT   :: INLINE_UNIFORM_BLOCK_EXT;
    VK_DESCRIPTOR_TYPE_MUTABLE_VALVE              :: MUTABLE_VALVE;
    VK_DESCRIPTOR_TYPE_MAX_ENUM                   :: MAX_ENUM;
}

AttachmentLoadOp :: enum u32 {
    LOAD      :: 0;
    CLEAR     :: 1;
    DONT_CARE :: 2;
    NONE_EXT  :: 1000400000;
    MAX_ENUM  :: 2147483647;

    VK_ATTACHMENT_LOAD_OP_LOAD      :: LOAD;
    VK_ATTACHMENT_LOAD_OP_CLEAR     :: CLEAR;
    VK_ATTACHMENT_LOAD_OP_DONT_CARE :: DONT_CARE;
    VK_ATTACHMENT_LOAD_OP_NONE_EXT  :: NONE_EXT;
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM  :: MAX_ENUM;
}

AttachmentStoreOp :: enum u32 {
    STORE     :: 0;
    DONT_CARE :: 1;
    NONE      :: 1000301000;
    NONE_KHR  :: 1000301000;
    NONE_QCOM :: 1000301000;
    NONE_EXT  :: 1000301000;
    MAX_ENUM  :: 2147483647;

    VK_ATTACHMENT_STORE_OP_STORE     :: STORE;
    VK_ATTACHMENT_STORE_OP_DONT_CARE :: DONT_CARE;
    VK_ATTACHMENT_STORE_OP_NONE      :: NONE;
    VK_ATTACHMENT_STORE_OP_NONE_KHR  :: NONE_KHR;
    VK_ATTACHMENT_STORE_OP_NONE_QCOM :: NONE_QCOM;
    VK_ATTACHMENT_STORE_OP_NONE_EXT  :: NONE_EXT;
    VK_ATTACHMENT_STORE_OP_MAX_ENUM  :: MAX_ENUM;
}

PipelineBindPoint :: enum u32 {
    GRAPHICS               :: 0;
    COMPUTE                :: 1;
    RAY_TRACING_KHR        :: 1000165000;
    SUBPASS_SHADING_HUAWEI :: 1000369003;
    RAY_TRACING_NV         :: 1000165000;
    MAX_ENUM               :: 2147483647;

    VK_PIPELINE_BIND_POINT_GRAPHICS               :: GRAPHICS;
    VK_PIPELINE_BIND_POINT_COMPUTE                :: COMPUTE;
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR        :: RAY_TRACING_KHR;
    VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI :: SUBPASS_SHADING_HUAWEI;
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV         :: RAY_TRACING_NV;
    VK_PIPELINE_BIND_POINT_MAX_ENUM               :: MAX_ENUM;
}

CommandBufferLevel :: enum u32 {
    PRIMARY   :: 0;
    SECONDARY :: 1;
    MAX_ENUM  :: 2147483647;

    VK_COMMAND_BUFFER_LEVEL_PRIMARY   :: PRIMARY;
    VK_COMMAND_BUFFER_LEVEL_SECONDARY :: SECONDARY;
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM  :: MAX_ENUM;
}

IndexType :: enum u32 {
    UINT16    :: 0;
    UINT32    :: 1;
    NONE_KHR  :: 1000165000;
    UINT8_EXT :: 1000265000;
    NONE_NV   :: 1000165000;
    MAX_ENUM  :: 2147483647;

    VK_INDEX_TYPE_UINT16    :: UINT16;
    VK_INDEX_TYPE_UINT32    :: UINT32;
    VK_INDEX_TYPE_NONE_KHR  :: NONE_KHR;
    VK_INDEX_TYPE_UINT8_EXT :: UINT8_EXT;
    VK_INDEX_TYPE_NONE_NV   :: NONE_NV;
    VK_INDEX_TYPE_MAX_ENUM  :: MAX_ENUM;
}

SubpassContents :: enum u32 {
    INLINE                    :: 0;
    SECONDARY_COMMAND_BUFFERS :: 1;
    MAX_ENUM                  :: 2147483647;

    VK_SUBPASS_CONTENTS_INLINE                    :: INLINE;
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS :: SECONDARY_COMMAND_BUFFERS;
    VK_SUBPASS_CONTENTS_MAX_ENUM                  :: MAX_ENUM;
}

AccessFlagBits :: enum_flags u32 {
    INDIRECT_COMMAND_READ                     :: 0x1;
    INDEX_READ                                :: 0x2;
    VERTEX_ATTRIBUTE_READ                     :: 0x4;
    UNIFORM_READ                              :: 0x8;
    INPUT_ATTACHMENT_READ                     :: 0x10;
    SHADER_READ                               :: 0x20;
    SHADER_WRITE                              :: 0x40;
    COLOR_ATTACHMENT_READ                     :: 0x80;
    COLOR_ATTACHMENT_WRITE                    :: 0x100;
    DEPTH_STENCIL_ATTACHMENT_READ             :: 0x200;
    DEPTH_STENCIL_ATTACHMENT_WRITE            :: 0x400;
    TRANSFER_READ                             :: 0x800;
    TRANSFER_WRITE                            :: 0x1000;
    HOST_READ                                 :: 0x2000;
    HOST_WRITE                                :: 0x4000;
    MEMORY_READ                               :: 0x8000;
    MEMORY_WRITE                              :: 0x10000;
    NONE                                      :: 0x0;
    TRANSFORM_FEEDBACK_WRITE_EXT              :: 0x2000000;
    TRANSFORM_FEEDBACK_COUNTER_READ_EXT       :: 0x4000000;
    TRANSFORM_FEEDBACK_COUNTER_WRITE_EXT      :: 0x8000000;
    CONDITIONAL_RENDERING_READ_EXT            :: 0x100000;
    COLOR_ATTACHMENT_READ_NONCOHERENT_EXT     :: 0x80000;
    ACCELERATION_STRUCTURE_READ_KHR           :: 0x200000;
    ACCELERATION_STRUCTURE_WRITE_KHR          :: 0x400000;
    FRAGMENT_DENSITY_MAP_READ_EXT             :: 0x1000000;
    FRAGMENT_SHADING_RATE_ATTACHMENT_READ_KHR :: 0x800000;
    COMMAND_PREPROCESS_READ_NV                :: 0x20000;
    COMMAND_PREPROCESS_WRITE_NV               :: 0x40000;
    SHADING_RATE_IMAGE_READ_NV                :: 0x800000;
    ACCELERATION_STRUCTURE_READ_NV            :: 0x200000;
    ACCELERATION_STRUCTURE_WRITE_NV           :: 0x400000;
    NONE_KHR                                  :: 0x0;
    FLAG_BITS_MAX_ENUM                        :: 0x7fffffff;

    VK_ACCESS_INDIRECT_COMMAND_READ_BIT                     :: INDIRECT_COMMAND_READ;
    VK_ACCESS_INDEX_READ_BIT                                :: INDEX_READ;
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT                     :: VERTEX_ATTRIBUTE_READ;
    VK_ACCESS_UNIFORM_READ_BIT                              :: UNIFORM_READ;
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT                     :: INPUT_ATTACHMENT_READ;
    VK_ACCESS_SHADER_READ_BIT                               :: SHADER_READ;
    VK_ACCESS_SHADER_WRITE_BIT                              :: SHADER_WRITE;
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT                     :: COLOR_ATTACHMENT_READ;
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT                    :: COLOR_ATTACHMENT_WRITE;
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT             :: DEPTH_STENCIL_ATTACHMENT_READ;
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT            :: DEPTH_STENCIL_ATTACHMENT_WRITE;
    VK_ACCESS_TRANSFER_READ_BIT                             :: TRANSFER_READ;
    VK_ACCESS_TRANSFER_WRITE_BIT                            :: TRANSFER_WRITE;
    VK_ACCESS_HOST_READ_BIT                                 :: HOST_READ;
    VK_ACCESS_HOST_WRITE_BIT                                :: HOST_WRITE;
    VK_ACCESS_MEMORY_READ_BIT                               :: MEMORY_READ;
    VK_ACCESS_MEMORY_WRITE_BIT                              :: MEMORY_WRITE;
    VK_ACCESS_NONE                                          :: NONE;
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT              :: TRANSFORM_FEEDBACK_WRITE_EXT;
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT       :: TRANSFORM_FEEDBACK_COUNTER_READ_EXT;
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT      :: TRANSFORM_FEEDBACK_COUNTER_WRITE_EXT;
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT            :: CONDITIONAL_RENDERING_READ_EXT;
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT     :: COLOR_ATTACHMENT_READ_NONCOHERENT_EXT;
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR           :: ACCELERATION_STRUCTURE_READ_KHR;
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR          :: ACCELERATION_STRUCTURE_WRITE_KHR;
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT             :: FRAGMENT_DENSITY_MAP_READ_EXT;
    VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR :: FRAGMENT_SHADING_RATE_ATTACHMENT_READ_KHR;
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV                :: COMMAND_PREPROCESS_READ_NV;
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV               :: COMMAND_PREPROCESS_WRITE_NV;
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV                :: SHADING_RATE_IMAGE_READ_NV;
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV            :: ACCELERATION_STRUCTURE_READ_NV;
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV           :: ACCELERATION_STRUCTURE_WRITE_NV;
    VK_ACCESS_NONE_KHR                                      :: NONE_KHR;
    VK_ACCESS_FLAG_BITS_MAX_ENUM                            :: FLAG_BITS_MAX_ENUM;
}

AccessFlags :: AccessFlagBits;

ImageAspectFlagBits :: enum_flags u32 {
    COLOR              :: 0x1;
    DEPTH              :: 0x2;
    STENCIL            :: 0x4;
    METADATA           :: 0x8;
    PLANE_0            :: 0x10;
    PLANE_1            :: 0x20;
    PLANE_2            :: 0x40;
    NONE               :: 0x0;
    MEMORY_PLANE_0_EXT :: 0x80;
    MEMORY_PLANE_1_EXT :: 0x100;
    MEMORY_PLANE_2_EXT :: 0x200;
    MEMORY_PLANE_3_EXT :: 0x400;
    PLANE_0_KHR        :: 0x10;
    PLANE_1_KHR        :: 0x20;
    PLANE_2_KHR        :: 0x40;
    NONE_KHR           :: 0x0;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_IMAGE_ASPECT_COLOR_BIT              :: COLOR;
    VK_IMAGE_ASPECT_DEPTH_BIT              :: DEPTH;
    VK_IMAGE_ASPECT_STENCIL_BIT            :: STENCIL;
    VK_IMAGE_ASPECT_METADATA_BIT           :: METADATA;
    VK_IMAGE_ASPECT_PLANE_0_BIT            :: PLANE_0;
    VK_IMAGE_ASPECT_PLANE_1_BIT            :: PLANE_1;
    VK_IMAGE_ASPECT_PLANE_2_BIT            :: PLANE_2;
    VK_IMAGE_ASPECT_NONE                   :: NONE;
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT :: MEMORY_PLANE_0_EXT;
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT :: MEMORY_PLANE_1_EXT;
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT :: MEMORY_PLANE_2_EXT;
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT :: MEMORY_PLANE_3_EXT;
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR        :: PLANE_0_KHR;
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR        :: PLANE_1_KHR;
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR        :: PLANE_2_KHR;
    VK_IMAGE_ASPECT_NONE_KHR               :: NONE_KHR;
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM     :: FLAG_BITS_MAX_ENUM;
}

ImageAspectFlags :: ImageAspectFlagBits;

FormatFeatureFlagBits :: enum_flags u32 {
    SAMPLED_IMAGE                                                               :: 0x1;
    STORAGE_IMAGE                                                               :: 0x2;
    STORAGE_IMAGE_ATOMIC                                                        :: 0x4;
    UNIFORM_TEXEL_BUFFER                                                        :: 0x8;
    STORAGE_TEXEL_BUFFER                                                        :: 0x10;
    STORAGE_TEXEL_BUFFER_ATOMIC                                                 :: 0x20;
    VERTEX_BUFFER                                                               :: 0x40;
    COLOR_ATTACHMENT                                                            :: 0x80;
    COLOR_ATTACHMENT_BLEND                                                      :: 0x100;
    DEPTH_STENCIL_ATTACHMENT                                                    :: 0x200;
    BLIT_SRC                                                                    :: 0x400;
    BLIT_DST                                                                    :: 0x800;
    SAMPLED_IMAGE_FILTER_LINEAR                                                 :: 0x1000;
    TRANSFER_SRC                                                                :: 0x4000;
    TRANSFER_DST                                                                :: 0x8000;
    MIDPOINT_CHROMA_SAMPLES                                                     :: 0x20000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER                                :: 0x40000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER               :: 0x80000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT               :: 0x100000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE     :: 0x200000;
    DISJOINT                                                                    :: 0x400000;
    COSITED_CHROMA_SAMPLES                                                      :: 0x800000;
    SAMPLED_IMAGE_FILTER_MINMAX                                                 :: 0x10000;
    VIDEO_DECODE_OUTPUT_KHR                                                     :: 0x2000000;
    VIDEO_DECODE_DPB_KHR                                                        :: 0x4000000;
    ACCELERATION_STRUCTURE_VERTEX_BUFFER_KHR                                    :: 0x20000000;
    SAMPLED_IMAGE_FILTER_CUBIC_EXT                                              :: 0x2000;
    FRAGMENT_DENSITY_MAP_EXT                                                    :: 0x1000000;
    FRAGMENT_SHADING_RATE_ATTACHMENT_KHR                                        :: 0x40000000;

    SAMPLED_IMAGE_FILTER_CUBIC_IMG                                              :: 0x2000;
    TRANSFER_SRC_KHR                                                            :: 0x4000;
    TRANSFER_DST_KHR                                                            :: 0x8000;
    SAMPLED_IMAGE_FILTER_MINMAX_EXT                                             :: 0x10000;
    MIDPOINT_CHROMA_SAMPLES_KHR                                                 :: 0x20000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_KHR                            :: 0x40000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_KHR           :: 0x80000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_KHR           :: 0x100000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_KHR :: 0x200000;
    DISJOINT_KHR                                                                :: 0x400000;
    COSITED_CHROMA_SAMPLES_KHR                                                  :: 0x800000;
    FLAG_BITS_MAX_ENUM                                                          :: 0x7fffffff;

    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT                                                               :: SAMPLED_IMAGE;
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT                                                               :: STORAGE_IMAGE;
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT                                                        :: STORAGE_IMAGE_ATOMIC;
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT                                                        :: UNIFORM_TEXEL_BUFFER;
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT                                                        :: STORAGE_TEXEL_BUFFER;
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT                                                 :: STORAGE_TEXEL_BUFFER_ATOMIC;
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT                                                               :: VERTEX_BUFFER;
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT                                                            :: COLOR_ATTACHMENT;
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT                                                      :: COLOR_ATTACHMENT_BLEND;
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT                                                    :: DEPTH_STENCIL_ATTACHMENT;
    VK_FORMAT_FEATURE_BLIT_SRC_BIT                                                                    :: BLIT_SRC;
    VK_FORMAT_FEATURE_BLIT_DST_BIT                                                                    :: BLIT_DST;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT                                                 :: SAMPLED_IMAGE_FILTER_LINEAR;
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT                                                                :: TRANSFER_SRC;
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT                                                                :: TRANSFER_DST;
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT                                                     :: MIDPOINT_CHROMA_SAMPLES;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT                                :: SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT               :: SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT               :: SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT     :: SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE;
    VK_FORMAT_FEATURE_DISJOINT_BIT                                                                    :: DISJOINT;
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT                                                      :: COSITED_CHROMA_SAMPLES;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT                                                 :: SAMPLED_IMAGE_FILTER_MINMAX;
    VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR                                                     :: VIDEO_DECODE_OUTPUT_KHR;
    VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR                                                        :: VIDEO_DECODE_DPB_KHR;
    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR                                    :: ACCELERATION_STRUCTURE_VERTEX_BUFFER_KHR;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT                                              :: SAMPLED_IMAGE_FILTER_CUBIC_EXT;
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT                                                    :: FRAGMENT_DENSITY_MAP_EXT;
    VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR                                        :: FRAGMENT_SHADING_RATE_ATTACHMENT_KHR;

    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG                                              :: SAMPLED_IMAGE_FILTER_CUBIC_IMG;
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR                                                            :: TRANSFER_SRC_KHR;
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR                                                            :: TRANSFER_DST_KHR;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT                                             :: SAMPLED_IMAGE_FILTER_MINMAX_EXT;
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR                                                 :: MIDPOINT_CHROMA_SAMPLES_KHR;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR                            :: SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_KHR;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR           :: SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_KHR;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR           :: SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_KHR;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR :: SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_KHR;
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR                                                                :: DISJOINT_KHR;
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR                                                  :: COSITED_CHROMA_SAMPLES_KHR;
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM                                                              :: FLAG_BITS_MAX_ENUM;
}

FormatFeatureFlags :: FormatFeatureFlagBits;

ImageCreateFlagBits :: enum_flags u32 {
    SPARSE_BINDING                            :: 0x1;
    SPARSE_RESIDENCY                          :: 0x2;
    SPARSE_ALIASED                            :: 0x4;
    MUTABLE_FORMAT                            :: 0x8;
    CUBE_COMPATIBLE                           :: 0x10;
    ALIAS                                     :: 0x400;
    SPLIT_INSTANCE_BIND_REGIONS               :: 0x40;
    _2D_ARRAY_COMPATIBLE                      :: 0x20;
    BLOCK_TEXEL_VIEW_COMPATIBLE               :: 0x80;
    EXTENDED_USAGE                            :: 0x100;
    PROTECTED                                 :: 0x800;
    DISJOINT                                  :: 0x200;
    CORNER_SAMPLED_NV                         :: 0x2000;
    SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_EXT     :: 0x1000;
    SUBSAMPLED_EXT                            :: 0x4000;
    DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT      :: 0x10000;
    MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXT :: 0x40000;
    _2D_VIEW_COMPATIBLE_EXT                   :: 0x20000;
    FRAGMENT_DENSITY_MAP_OFFSET_QCOM          :: 0x8000;
    SPLIT_INSTANCE_BIND_REGIONS_KHR           :: 0x40;
    _2D_ARRAY_COMPATIBLE_KHR                  :: 0x20;
    BLOCK_TEXEL_VIEW_COMPATIBLE_KHR           :: 0x80;
    EXTENDED_USAGE_KHR                        :: 0x100;
    DISJOINT_KHR                              :: 0x200;
    ALIAS_KHR                                 :: 0x400;
    FLAG_BITS_MAX_ENUM                        :: 0x7fffffff;

    VK_IMAGE_CREATE_SPARSE_BINDING_BIT                            :: SPARSE_BINDING;
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT                          :: SPARSE_RESIDENCY;
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT                            :: SPARSE_ALIASED;
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT                            :: MUTABLE_FORMAT;
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT                           :: CUBE_COMPATIBLE;
    VK_IMAGE_CREATE_ALIAS_BIT                                     :: ALIAS;
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT               :: SPLIT_INSTANCE_BIND_REGIONS;
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT                       :: _2D_ARRAY_COMPATIBLE;
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT               :: BLOCK_TEXEL_VIEW_COMPATIBLE;
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT                            :: EXTENDED_USAGE;
    VK_IMAGE_CREATE_PROTECTED_BIT                                 :: PROTECTED;
    VK_IMAGE_CREATE_DISJOINT_BIT                                  :: DISJOINT;
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV                         :: CORNER_SAMPLED_NV;
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT     :: SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_EXT;
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT                            :: SUBSAMPLED_EXT;
    VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT      :: DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT;
    VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT :: MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXT;
    VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT                    :: _2D_VIEW_COMPATIBLE_EXT;
    VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM          :: FRAGMENT_DENSITY_MAP_OFFSET_QCOM;
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR           :: SPLIT_INSTANCE_BIND_REGIONS_KHR;
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR                   :: _2D_ARRAY_COMPATIBLE_KHR;
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR           :: BLOCK_TEXEL_VIEW_COMPATIBLE_KHR;
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR                        :: EXTENDED_USAGE_KHR;
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR                              :: DISJOINT_KHR;
    VK_IMAGE_CREATE_ALIAS_BIT_KHR                                 :: ALIAS_KHR;
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM                            :: FLAG_BITS_MAX_ENUM;
}

ImageCreateFlags :: ImageCreateFlagBits;

SampleCountFlagBits :: enum_flags u32 {
    _1                 :: 0x1;
    _2                 :: 0x2;
    _4                 :: 0x4;
    _8                 :: 0x8;
    _16                :: 0x10;
    _32                :: 0x20;
    _64                :: 0x40;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_SAMPLE_COUNT_1_BIT              :: _1;
    VK_SAMPLE_COUNT_2_BIT              :: _2;
    VK_SAMPLE_COUNT_4_BIT              :: _4;
    VK_SAMPLE_COUNT_8_BIT              :: _8;
    VK_SAMPLE_COUNT_16_BIT             :: _16;
    VK_SAMPLE_COUNT_32_BIT             :: _32;
    VK_SAMPLE_COUNT_64_BIT             :: _64;
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

SampleCountFlags :: SampleCountFlagBits;

ImageUsageFlagBits :: enum_flags u32 {
    TRANSFER_SRC                         :: 0x1;
    TRANSFER_DST                         :: 0x2;
    SAMPLED                              :: 0x4;
    STORAGE                              :: 0x8;
    COLOR_ATTACHMENT                     :: 0x10;
    DEPTH_STENCIL_ATTACHMENT             :: 0x20;
    TRANSIENT_ATTACHMENT                 :: 0x40;
    INPUT_ATTACHMENT                     :: 0x80;
    VIDEO_DECODE_DST_KHR                 :: 0x400;
    VIDEO_DECODE_SRC_KHR                 :: 0x800;
    VIDEO_DECODE_DPB_KHR                 :: 0x1000;
    FRAGMENT_DENSITY_MAP_EXT             :: 0x200;
    FRAGMENT_SHADING_RATE_ATTACHMENT_KHR :: 0x100;

    ATTACHMENT_FEEDBACK_LOOP_EXT         :: 0x80000;
    INVOCATION_MASK_HUAWEI               :: 0x40000;
    SAMPLE_WEIGHT_QCOM                   :: 0x100000;
    SAMPLE_BLOCK_MATCH_QCOM              :: 0x200000;
    SHADING_RATE_IMAGE_NV                :: 0x100;
    FLAG_BITS_MAX_ENUM                   :: 0x7fffffff;

    VK_IMAGE_USAGE_TRANSFER_SRC_BIT                         :: TRANSFER_SRC;
    VK_IMAGE_USAGE_TRANSFER_DST_BIT                         :: TRANSFER_DST;
    VK_IMAGE_USAGE_SAMPLED_BIT                              :: SAMPLED;
    VK_IMAGE_USAGE_STORAGE_BIT                              :: STORAGE;
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT                     :: COLOR_ATTACHMENT;
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT             :: DEPTH_STENCIL_ATTACHMENT;
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT                 :: TRANSIENT_ATTACHMENT;
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT                     :: INPUT_ATTACHMENT;
    VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR                 :: VIDEO_DECODE_DST_KHR;
    VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR                 :: VIDEO_DECODE_SRC_KHR;
    VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR                 :: VIDEO_DECODE_DPB_KHR;
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT             :: FRAGMENT_DENSITY_MAP_EXT;
    VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR :: FRAGMENT_SHADING_RATE_ATTACHMENT_KHR;

    VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT         :: ATTACHMENT_FEEDBACK_LOOP_EXT;
    VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI               :: INVOCATION_MASK_HUAWEI;
    VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM                   :: SAMPLE_WEIGHT_QCOM;
    VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM              :: SAMPLE_BLOCK_MATCH_QCOM;
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV                :: SHADING_RATE_IMAGE_NV;
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM                       :: FLAG_BITS_MAX_ENUM;
}

ImageUsageFlags :: ImageUsageFlagBits;

InstanceCreateFlagBits :: enum_flags u32 {
    ENUMERATE_PORTABILITY_KHR :: 0x1;
    FLAG_BITS_MAX_ENUM        :: 0x7fffffff;

    VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR :: ENUMERATE_PORTABILITY_KHR;
    VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM            :: FLAG_BITS_MAX_ENUM;
}

InstanceCreateFlags :: InstanceCreateFlagBits;

MemoryHeapFlagBits :: enum_flags u32 {
    DEVICE_LOCAL       :: 0x1;
    MULTI_INSTANCE     :: 0x2;
    MULTI_INSTANCE_KHR :: 0x2;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT       :: DEVICE_LOCAL;
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT     :: MULTI_INSTANCE;
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR :: MULTI_INSTANCE_KHR;
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM     :: FLAG_BITS_MAX_ENUM;
}

MemoryHeapFlags :: MemoryHeapFlagBits;

MemoryPropertyFlagBits :: enum_flags u32 {
    DEVICE_LOCAL        :: 0x1;
    HOST_VISIBLE        :: 0x2;
    HOST_COHERENT       :: 0x4;
    HOST_CACHED         :: 0x8;
    LAZILY_ALLOCATED    :: 0x10;
    PROTECTED           :: 0x20;
    DEVICE_COHERENT_AMD :: 0x40;
    DEVICE_UNCACHED_AMD :: 0x80;
    RDMA_CAPABLE_NV     :: 0x100;
    FLAG_BITS_MAX_ENUM  :: 0x7fffffff;

    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT        :: DEVICE_LOCAL;
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT        :: HOST_VISIBLE;
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT       :: HOST_COHERENT;
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT         :: HOST_CACHED;
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT    :: LAZILY_ALLOCATED;
    VK_MEMORY_PROPERTY_PROTECTED_BIT           :: PROTECTED;
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD :: DEVICE_COHERENT_AMD;
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD :: DEVICE_UNCACHED_AMD;
    VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV     :: RDMA_CAPABLE_NV;
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM      :: FLAG_BITS_MAX_ENUM;
}

MemoryPropertyFlags :: MemoryPropertyFlagBits;

QueueFlagBits :: enum_flags u32 {
    GRAPHICS           :: 0x1;
    COMPUTE            :: 0x2;
    TRANSFER           :: 0x4;
    SPARSE_BINDING     :: 0x8;
    PROTECTED          :: 0x10;
    VIDEO_DECODE_KHR   :: 0x20;

    OPTICAL_FLOW_NV    :: 0x100;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_QUEUE_GRAPHICS_BIT         :: GRAPHICS;
    VK_QUEUE_COMPUTE_BIT          :: COMPUTE;
    VK_QUEUE_TRANSFER_BIT         :: TRANSFER;
    VK_QUEUE_SPARSE_BINDING_BIT   :: SPARSE_BINDING;
    VK_QUEUE_PROTECTED_BIT        :: PROTECTED;
    VK_QUEUE_VIDEO_DECODE_BIT_KHR :: VIDEO_DECODE_KHR;

    VK_QUEUE_OPTICAL_FLOW_BIT_NV  :: OPTICAL_FLOW_NV;
    VK_QUEUE_FLAG_BITS_MAX_ENUM   :: FLAG_BITS_MAX_ENUM;
}

QueueFlags :: QueueFlagBits;
DeviceCreateFlags :: Flags;

DeviceQueueCreateFlagBits :: enum_flags u32 {
    PROTECTED          :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT      :: PROTECTED;
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

DeviceQueueCreateFlags :: DeviceQueueCreateFlagBits;

PipelineStageFlagBits :: enum_flags u32 {
    TOP_OF_PIPE                          :: 0x1;
    DRAW_INDIRECT                        :: 0x2;
    VERTEX_INPUT                         :: 0x4;
    VERTEX_SHADER                        :: 0x8;
    TESSELLATION_CONTROL_SHADER          :: 0x10;
    TESSELLATION_EVALUATION_SHADER       :: 0x20;
    GEOMETRY_SHADER                      :: 0x40;
    FRAGMENT_SHADER                      :: 0x80;
    EARLY_FRAGMENT_TESTS                 :: 0x100;
    LATE_FRAGMENT_TESTS                  :: 0x200;
    COLOR_ATTACHMENT_OUTPUT              :: 0x400;
    COMPUTE_SHADER                       :: 0x800;
    TRANSFER                             :: 0x1000;
    BOTTOM_OF_PIPE                       :: 0x2000;
    HOST                                 :: 0x4000;
    ALL_GRAPHICS                         :: 0x8000;
    ALL_COMMANDS                         :: 0x10000;
    NONE                                 :: 0x0;
    TRANSFORM_FEEDBACK_EXT               :: 0x1000000;
    CONDITIONAL_RENDERING_EXT            :: 0x40000;
    ACCELERATION_STRUCTURE_BUILD_KHR     :: 0x2000000;
    RAY_TRACING_SHADER_KHR               :: 0x200000;
    FRAGMENT_DENSITY_PROCESS_EXT         :: 0x800000;
    FRAGMENT_SHADING_RATE_ATTACHMENT_KHR :: 0x400000;
    COMMAND_PREPROCESS_NV                :: 0x20000;
    TASK_SHADER_EXT                      :: 0x80000;
    MESH_SHADER_EXT                      :: 0x100000;
    SHADING_RATE_IMAGE_NV                :: 0x400000;
    RAY_TRACING_SHADER_NV                :: 0x200000;
    ACCELERATION_STRUCTURE_BUILD_NV      :: 0x2000000;
    TASK_SHADER_NV                       :: 0x80000;
    MESH_SHADER_NV                       :: 0x100000;
    NONE_KHR                             :: 0x0;
    FLAG_BITS_MAX_ENUM                   :: 0x7fffffff;

    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT                          :: TOP_OF_PIPE;
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT                        :: DRAW_INDIRECT;
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT                         :: VERTEX_INPUT;
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT                        :: VERTEX_SHADER;
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT          :: TESSELLATION_CONTROL_SHADER;
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT       :: TESSELLATION_EVALUATION_SHADER;
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT                      :: GEOMETRY_SHADER;
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT                      :: FRAGMENT_SHADER;
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT                 :: EARLY_FRAGMENT_TESTS;
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT                  :: LATE_FRAGMENT_TESTS;
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT              :: COLOR_ATTACHMENT_OUTPUT;
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT                       :: COMPUTE_SHADER;
    VK_PIPELINE_STAGE_TRANSFER_BIT                             :: TRANSFER;
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT                       :: BOTTOM_OF_PIPE;
    VK_PIPELINE_STAGE_HOST_BIT                                 :: HOST;
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT                         :: ALL_GRAPHICS;
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT                         :: ALL_COMMANDS;
    VK_PIPELINE_STAGE_NONE                                     :: NONE;
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT               :: TRANSFORM_FEEDBACK_EXT;
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT            :: CONDITIONAL_RENDERING_EXT;
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR     :: ACCELERATION_STRUCTURE_BUILD_KHR;
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR               :: RAY_TRACING_SHADER_KHR;
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT         :: FRAGMENT_DENSITY_PROCESS_EXT;
    VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR :: FRAGMENT_SHADING_RATE_ATTACHMENT_KHR;
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV                :: COMMAND_PREPROCESS_NV;
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT                      :: TASK_SHADER_EXT;
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT                      :: MESH_SHADER_EXT;
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV                :: SHADING_RATE_IMAGE_NV;
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV                :: RAY_TRACING_SHADER_NV;
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV      :: ACCELERATION_STRUCTURE_BUILD_NV;
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV                       :: TASK_SHADER_NV;
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV                       :: MESH_SHADER_NV;
    VK_PIPELINE_STAGE_NONE_KHR                                 :: NONE_KHR;
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM                       :: FLAG_BITS_MAX_ENUM;
}

PipelineStageFlags :: PipelineStageFlagBits;
MemoryMapFlags :: Flags;

SparseMemoryBindFlagBits :: enum_flags u32 {
    METADATA           :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_SPARSE_MEMORY_BIND_METADATA_BIT       :: METADATA;
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

SparseMemoryBindFlags :: SparseMemoryBindFlagBits;

SparseImageFormatFlagBits :: enum_flags u32 {
    SINGLE_MIPTAIL         :: 0x1;
    ALIGNED_MIP_SIZE       :: 0x2;
    NONSTANDARD_BLOCK_SIZE :: 0x4;
    FLAG_BITS_MAX_ENUM     :: 0x7fffffff;

    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT         :: SINGLE_MIPTAIL;
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT       :: ALIGNED_MIP_SIZE;
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT :: NONSTANDARD_BLOCK_SIZE;
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM         :: FLAG_BITS_MAX_ENUM;
}

SparseImageFormatFlags :: SparseImageFormatFlagBits;

FenceCreateFlagBits :: enum_flags u32 {
    SIGNALED           :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_FENCE_CREATE_SIGNALED_BIT       :: SIGNALED;
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

FenceCreateFlags :: FenceCreateFlagBits;
SemaphoreCreateFlags :: Flags;

EventCreateFlagBits :: enum_flags u32 {
    DEVICE_ONLY        :: 0x1;
    DEVICE_ONLY_KHR    :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_EVENT_CREATE_DEVICE_ONLY_BIT     :: DEVICE_ONLY;
    VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR :: DEVICE_ONLY_KHR;
    VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM  :: FLAG_BITS_MAX_ENUM;
}

EventCreateFlags :: EventCreateFlagBits;

QueryPipelineStatisticFlagBits :: enum_flags u32 {
    INPUT_ASSEMBLY_VERTICES                    :: 0x1;
    INPUT_ASSEMBLY_PRIMITIVES                  :: 0x2;
    VERTEX_SHADER_INVOCATIONS                  :: 0x4;
    GEOMETRY_SHADER_INVOCATIONS                :: 0x8;
    GEOMETRY_SHADER_PRIMITIVES                 :: 0x10;
    CLIPPING_INVOCATIONS                       :: 0x20;
    CLIPPING_PRIMITIVES                        :: 0x40;
    FRAGMENT_SHADER_INVOCATIONS                :: 0x80;
    TESSELLATION_CONTROL_SHADER_PATCHES        :: 0x100;
    TESSELLATION_EVALUATION_SHADER_INVOCATIONS :: 0x200;
    COMPUTE_SHADER_INVOCATIONS                 :: 0x400;
    TASK_SHADER_INVOCATIONS_EXT                :: 0x800;
    MESH_SHADER_INVOCATIONS_EXT                :: 0x1000;
    CLUSTER_CULLING_SHADER_INVOCATIONS_HUAWEI  :: 0x2000;
    FLAG_BITS_MAX_ENUM                         :: 0x7fffffff;

    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT                    :: INPUT_ASSEMBLY_VERTICES;
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT                  :: INPUT_ASSEMBLY_PRIMITIVES;
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT                  :: VERTEX_SHADER_INVOCATIONS;
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT                :: GEOMETRY_SHADER_INVOCATIONS;
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT                 :: GEOMETRY_SHADER_PRIMITIVES;
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT                       :: CLIPPING_INVOCATIONS;
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT                        :: CLIPPING_PRIMITIVES;
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT                :: FRAGMENT_SHADER_INVOCATIONS;
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT        :: TESSELLATION_CONTROL_SHADER_PATCHES;
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT :: TESSELLATION_EVALUATION_SHADER_INVOCATIONS;
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT                 :: COMPUTE_SHADER_INVOCATIONS;
    VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT                :: TASK_SHADER_INVOCATIONS_EXT;
    VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT                :: MESH_SHADER_INVOCATIONS_EXT;
    VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI  :: CLUSTER_CULLING_SHADER_INVOCATIONS_HUAWEI;
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM                             :: FLAG_BITS_MAX_ENUM;
}

QueryPipelineStatisticFlags :: QueryPipelineStatisticFlagBits;
QueryPoolCreateFlags :: Flags;

QueryResultFlagBits :: enum_flags u32 {
    _64                :: 0x1;
    WAIT               :: 0x2;
    WITH_AVAILABILITY  :: 0x4;
    PARTIAL            :: 0x8;
    WITH_STATUS_KHR    :: 0x10;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_QUERY_RESULT_64_BIT                :: _64;
    VK_QUERY_RESULT_WAIT_BIT              :: WAIT;
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT :: WITH_AVAILABILITY;
    VK_QUERY_RESULT_PARTIAL_BIT           :: PARTIAL;
    VK_QUERY_RESULT_WITH_STATUS_BIT_KHR   :: WITH_STATUS_KHR;
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM    :: FLAG_BITS_MAX_ENUM;
}

QueryResultFlags :: QueryResultFlagBits;

BufferCreateFlagBits :: enum_flags u32 {
    SPARSE_BINDING                       :: 0x1;
    SPARSE_RESIDENCY                     :: 0x2;
    SPARSE_ALIASED                       :: 0x4;
    PROTECTED                            :: 0x8;
    DEVICE_ADDRESS_CAPTURE_REPLAY        :: 0x10;
    DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT :: 0x20;
    DEVICE_ADDRESS_CAPTURE_REPLAY_EXT    :: 0x10;
    DEVICE_ADDRESS_CAPTURE_REPLAY_KHR    :: 0x10;
    FLAG_BITS_MAX_ENUM                   :: 0x7fffffff;

    VK_BUFFER_CREATE_SPARSE_BINDING_BIT                       :: SPARSE_BINDING;
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT                     :: SPARSE_RESIDENCY;
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT                       :: SPARSE_ALIASED;
    VK_BUFFER_CREATE_PROTECTED_BIT                            :: PROTECTED;
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT        :: DEVICE_ADDRESS_CAPTURE_REPLAY;
    VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT :: DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT;
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT    :: DEVICE_ADDRESS_CAPTURE_REPLAY_EXT;
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR    :: DEVICE_ADDRESS_CAPTURE_REPLAY_KHR;
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM                       :: FLAG_BITS_MAX_ENUM;
}

BufferCreateFlags :: BufferCreateFlagBits;

BufferUsageFlagBits :: enum_flags u32 {
    TRANSFER_SRC                                     :: 0x1;
    TRANSFER_DST                                     :: 0x2;
    UNIFORM_TEXEL_BUFFER                             :: 0x4;
    STORAGE_TEXEL_BUFFER                             :: 0x8;
    UNIFORM_BUFFER                                   :: 0x10;
    STORAGE_BUFFER                                   :: 0x20;
    INDEX_BUFFER                                     :: 0x40;
    VERTEX_BUFFER                                    :: 0x80;
    INDIRECT_BUFFER                                  :: 0x100;
    SHADER_DEVICE_ADDRESS                            :: 0x20000;
    VIDEO_DECODE_SRC_KHR                             :: 0x2000;
    VIDEO_DECODE_DST_KHR                             :: 0x4000;
    TRANSFORM_FEEDBACK_BUFFER_EXT                    :: 0x800;
    TRANSFORM_FEEDBACK_COUNTER_BUFFER_EXT            :: 0x1000;
    CONDITIONAL_RENDERING_EXT                        :: 0x200;
    ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_KHR :: 0x80000;
    ACCELERATION_STRUCTURE_STORAGE_KHR               :: 0x100000;
    SHADER_BINDING_TABLE_KHR                         :: 0x400;

    SAMPLER_DESCRIPTOR_BUFFER_EXT                    :: 0x200000;
    RESOURCE_DESCRIPTOR_BUFFER_EXT                   :: 0x400000;
    PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_EXT           :: 0x4000000;
    MICROMAP_BUILD_INPUT_READ_ONLY_EXT               :: 0x800000;
    MICROMAP_STORAGE_EXT                             :: 0x1000000;
    RAY_TRACING_NV                                   :: 0x400;
    SHADER_DEVICE_ADDRESS_EXT                        :: 0x20000;
    SHADER_DEVICE_ADDRESS_KHR                        :: 0x20000;
    FLAG_BITS_MAX_ENUM                               :: 0x7fffffff;

    VK_BUFFER_USAGE_TRANSFER_SRC_BIT                                     :: TRANSFER_SRC;
    VK_BUFFER_USAGE_TRANSFER_DST_BIT                                     :: TRANSFER_DST;
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT                             :: UNIFORM_TEXEL_BUFFER;
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT                             :: STORAGE_TEXEL_BUFFER;
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT                                   :: UNIFORM_BUFFER;
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT                                   :: STORAGE_BUFFER;
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT                                     :: INDEX_BUFFER;
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT                                    :: VERTEX_BUFFER;
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT                                  :: INDIRECT_BUFFER;
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT                            :: SHADER_DEVICE_ADDRESS;
    VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR                             :: VIDEO_DECODE_SRC_KHR;
    VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR                             :: VIDEO_DECODE_DST_KHR;
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT                    :: TRANSFORM_FEEDBACK_BUFFER_EXT;
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT            :: TRANSFORM_FEEDBACK_COUNTER_BUFFER_EXT;
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT                        :: CONDITIONAL_RENDERING_EXT;
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR :: ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_KHR;
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR               :: ACCELERATION_STRUCTURE_STORAGE_KHR;
    VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR                         :: SHADER_BINDING_TABLE_KHR;

    VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT                    :: SAMPLER_DESCRIPTOR_BUFFER_EXT;
    VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT                   :: RESOURCE_DESCRIPTOR_BUFFER_EXT;
    VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT           :: PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_EXT;
    VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT               :: MICROMAP_BUILD_INPUT_READ_ONLY_EXT;
    VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT                             :: MICROMAP_STORAGE_EXT;
    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV                                   :: RAY_TRACING_NV;
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT                        :: SHADER_DEVICE_ADDRESS_EXT;
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR                        :: SHADER_DEVICE_ADDRESS_KHR;
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM                                   :: FLAG_BITS_MAX_ENUM;
}

BufferUsageFlags :: BufferUsageFlagBits;
BufferViewCreateFlags :: Flags;

ImageViewCreateFlagBits :: enum_flags u32 {
    FRAGMENT_DENSITY_MAP_DYNAMIC_EXT     :: 0x1;
    DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT :: 0x4;
    FRAGMENT_DENSITY_MAP_DEFERRED_EXT    :: 0x2;
    FLAG_BITS_MAX_ENUM                   :: 0x7fffffff;

    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT     :: FRAGMENT_DENSITY_MAP_DYNAMIC_EXT;
    VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT :: DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT;
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT    :: FRAGMENT_DENSITY_MAP_DEFERRED_EXT;
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM                       :: FLAG_BITS_MAX_ENUM;
}

ImageViewCreateFlags :: ImageViewCreateFlagBits;
ShaderModuleCreateFlags :: Flags;

PipelineCacheCreateFlagBits :: enum_flags u32 {
    EXTERNALLY_SYNCHRONIZED     :: 0x1;
    EXTERNALLY_SYNCHRONIZED_EXT :: 0x1;
    FLAG_BITS_MAX_ENUM          :: 0x7fffffff;

    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT     :: EXTERNALLY_SYNCHRONIZED;
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT :: EXTERNALLY_SYNCHRONIZED_EXT;
    VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM              :: FLAG_BITS_MAX_ENUM;
}

PipelineCacheCreateFlags :: PipelineCacheCreateFlagBits;

ColorComponentFlagBits :: enum_flags u32 {
    R                  :: 0x1;
    G                  :: 0x2;
    B                  :: 0x4;
    A                  :: 0x8;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_COLOR_COMPONENT_R_BIT              :: R;
    VK_COLOR_COMPONENT_G_BIT              :: G;
    VK_COLOR_COMPONENT_B_BIT              :: B;
    VK_COLOR_COMPONENT_A_BIT              :: A;
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

ColorComponentFlags :: ColorComponentFlagBits;

PipelineCreateFlagBits :: enum_flags u32 {
    CREATE_DISABLE_OPTIMIZATION                                     :: 0x1;
    CREATE_ALLOW_DERIVATIVES                                        :: 0x2;
    CREATE_DERIVATIVE                                               :: 0x4;
    CREATE_VIEW_INDEX_FROM_DEVICE_INDEX                             :: 0x8;
    CREATE_DISPATCH_BASE                                            :: 0x10;
    CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED                        :: 0x100;
    CREATE_EARLY_RETURN_ON_FAILURE                                  :: 0x200;
    CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_KHR           :: 0x200000;
    CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_EXT            :: 0x400000;
    CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_KHR                  :: 0x4000;
    CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_KHR              :: 0x8000;
    CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_KHR                     :: 0x10000;
    CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_KHR             :: 0x20000;
    CREATE_RAY_TRACING_SKIP_TRIANGLES_KHR                           :: 0x1000;
    CREATE_RAY_TRACING_SKIP_AABBS_KHR                               :: 0x2000;
    CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_KHR       :: 0x80000;
    CREATE_DEFER_COMPILE_NV                                         :: 0x20;
    CREATE_CAPTURE_STATISTICS_KHR                                   :: 0x40;
    CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_KHR                     :: 0x80;
    CREATE_INDIRECT_BINDABLE_NV                                     :: 0x40000;
    CREATE_LIBRARY_KHR                                              :: 0x800;
    CREATE_DESCRIPTOR_BUFFER_EXT                                    :: 0x20000000;
    CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_EXT                   :: 0x800000;
    CREATE_LINK_TIME_OPTIMIZATION_EXT                               :: 0x400;
    CREATE_RAY_TRACING_ALLOW_MOTION_NV                              :: 0x100000;
    CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_EXT                       :: 0x2000000;
    CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_EXT               :: 0x4000000;
    CREATE_RAY_TRACING_OPACITY_MICROMAP_EXT                         :: 0x1000000;

    CREATE_NO_PROTECTED_ACCESS_EXT                                  :: 0x8000000;
    CREATE_PROTECTED_ACCESS_ONLY_EXT                                :: 0x40000000;

    RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_KHR :: 0x200000;
    RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_EXT  :: 0x400000;
    CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_KHR                         :: 0x8;
    CREATE_DISPATCH_BASE_KHR                                        :: 0x10;
    CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_EXT                    :: 0x100;
    CREATE_EARLY_RETURN_ON_FAILURE_EXT                              :: 0x200;
    CREATE_FLAG_BITS_MAX_ENUM                                       :: 0x7fffffff;

    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT                                     :: CREATE_DISABLE_OPTIMIZATION;
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT                                        :: CREATE_ALLOW_DERIVATIVES;
    VK_PIPELINE_CREATE_DERIVATIVE_BIT                                               :: CREATE_DERIVATIVE;
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT                             :: CREATE_VIEW_INDEX_FROM_DEVICE_INDEX;
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT                                            :: CREATE_DISPATCH_BASE;
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT                        :: CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED;
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT                                  :: CREATE_EARLY_RETURN_ON_FAILURE;
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR           :: CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_KHR;
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT            :: CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_EXT;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR                  :: CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_KHR;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR              :: CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_KHR;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR                     :: CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_KHR;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR             :: CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_KHR;
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR                           :: CREATE_RAY_TRACING_SKIP_TRIANGLES_KHR;
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR                               :: CREATE_RAY_TRACING_SKIP_AABBS_KHR;
    VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR       :: CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_KHR;
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV                                         :: CREATE_DEFER_COMPILE_NV;
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR                                   :: CREATE_CAPTURE_STATISTICS_KHR;
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR                     :: CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_KHR;
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV                                     :: CREATE_INDIRECT_BINDABLE_NV;
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR                                              :: CREATE_LIBRARY_KHR;
    VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT                                    :: CREATE_DESCRIPTOR_BUFFER_EXT;
    VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT                   :: CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_EXT;
    VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT                               :: CREATE_LINK_TIME_OPTIMIZATION_EXT;
    VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV                              :: CREATE_RAY_TRACING_ALLOW_MOTION_NV;
    VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT                       :: CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_EXT;
    VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT               :: CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_EXT;
    VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT                         :: CREATE_RAY_TRACING_OPACITY_MICROMAP_EXT;

    VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT                                  :: CREATE_NO_PROTECTED_ACCESS_EXT;
    VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT                                :: CREATE_PROTECTED_ACCESS_ONLY_EXT;

    VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR :: RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_KHR;
    VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT  :: RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_EXT;
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR                         :: CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_KHR;
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR                                            :: CREATE_DISPATCH_BASE_KHR;
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT                    :: CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_EXT;
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT                              :: CREATE_EARLY_RETURN_ON_FAILURE_EXT;
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM                                           :: CREATE_FLAG_BITS_MAX_ENUM;
}

PipelineCreateFlags :: PipelineCreateFlagBits;

PipelineShaderStageCreateFlagBits :: enum_flags u32 {
    ALLOW_VARYING_SUBGROUP_SIZE     :: 0x1;
    REQUIRE_FULL_SUBGROUPS          :: 0x2;
    ALLOW_VARYING_SUBGROUP_SIZE_EXT :: 0x1;
    REQUIRE_FULL_SUBGROUPS_EXT      :: 0x2;
    FLAG_BITS_MAX_ENUM              :: 0x7fffffff;

    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT     :: ALLOW_VARYING_SUBGROUP_SIZE;
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT          :: REQUIRE_FULL_SUBGROUPS;
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT :: ALLOW_VARYING_SUBGROUP_SIZE_EXT;
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT      :: REQUIRE_FULL_SUBGROUPS_EXT;
    VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM                  :: FLAG_BITS_MAX_ENUM;
}

PipelineShaderStageCreateFlags :: PipelineShaderStageCreateFlagBits;

ShaderStageFlagBits :: enum_flags u32 {
    VERTEX                  :: 0x1;
    TESSELLATION_CONTROL    :: 0x2;
    TESSELLATION_EVALUATION :: 0x4;
    GEOMETRY                :: 0x8;
    FRAGMENT                :: 0x10;
    COMPUTE                 :: 0x20;
    ALL_GRAPHICS            :: 0x1f;
    ALL                     :: 0x7fffffff;
    RAYGEN_KHR              :: 0x100;
    ANY_HIT_KHR             :: 0x200;
    CLOSEST_HIT_KHR         :: 0x400;
    MISS_KHR                :: 0x800;
    INTERSECTION_KHR        :: 0x1000;
    CALLABLE_KHR            :: 0x2000;
    TASK_EXT                :: 0x40;
    MESH_EXT                :: 0x80;
    SUBPASS_SHADING_HUAWEI  :: 0x4000;
    CLUSTER_CULLING_HUAWEI  :: 0x80000;
    RAYGEN_NV               :: 0x100;
    ANY_HIT_NV              :: 0x200;
    CLOSEST_HIT_NV          :: 0x400;
    MISS_NV                 :: 0x800;
    INTERSECTION_NV         :: 0x1000;
    CALLABLE_NV             :: 0x2000;
    TASK_NV                 :: 0x40;
    MESH_NV                 :: 0x80;
    FLAG_BITS_MAX_ENUM      :: 0x7fffffff;

    VK_SHADER_STAGE_VERTEX_BIT                  :: VERTEX;
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT    :: TESSELLATION_CONTROL;
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT :: TESSELLATION_EVALUATION;
    VK_SHADER_STAGE_GEOMETRY_BIT                :: GEOMETRY;
    VK_SHADER_STAGE_FRAGMENT_BIT                :: FRAGMENT;
    VK_SHADER_STAGE_COMPUTE_BIT                 :: COMPUTE;
    VK_SHADER_STAGE_ALL_GRAPHICS                :: ALL_GRAPHICS;
    VK_SHADER_STAGE_ALL                         :: ALL;
    VK_SHADER_STAGE_RAYGEN_BIT_KHR              :: RAYGEN_KHR;
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR             :: ANY_HIT_KHR;
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR         :: CLOSEST_HIT_KHR;
    VK_SHADER_STAGE_MISS_BIT_KHR                :: MISS_KHR;
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR        :: INTERSECTION_KHR;
    VK_SHADER_STAGE_CALLABLE_BIT_KHR            :: CALLABLE_KHR;
    VK_SHADER_STAGE_TASK_BIT_EXT                :: TASK_EXT;
    VK_SHADER_STAGE_MESH_BIT_EXT                :: MESH_EXT;
    VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI  :: SUBPASS_SHADING_HUAWEI;
    VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI  :: CLUSTER_CULLING_HUAWEI;
    VK_SHADER_STAGE_RAYGEN_BIT_NV               :: RAYGEN_NV;
    VK_SHADER_STAGE_ANY_HIT_BIT_NV              :: ANY_HIT_NV;
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV          :: CLOSEST_HIT_NV;
    VK_SHADER_STAGE_MISS_BIT_NV                 :: MISS_NV;
    VK_SHADER_STAGE_INTERSECTION_BIT_NV         :: INTERSECTION_NV;
    VK_SHADER_STAGE_CALLABLE_BIT_NV             :: CALLABLE_NV;
    VK_SHADER_STAGE_TASK_BIT_NV                 :: TASK_NV;
    VK_SHADER_STAGE_MESH_BIT_NV                 :: MESH_NV;
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM          :: FLAG_BITS_MAX_ENUM;
}

CullModeFlagBits :: enum_flags u32 {
    NONE               :: 0x0;
    FRONT              :: 0x1;
    BACK               :: 0x2;
    FRONT_AND_BACK     :: 0x3;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_CULL_MODE_NONE               :: NONE;
    VK_CULL_MODE_FRONT_BIT          :: FRONT;
    VK_CULL_MODE_BACK_BIT           :: BACK;
    VK_CULL_MODE_FRONT_AND_BACK     :: FRONT_AND_BACK;
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

CullModeFlags :: CullModeFlagBits;
PipelineVertexInputStateCreateFlags :: Flags;
PipelineInputAssemblyStateCreateFlags :: Flags;
PipelineTessellationStateCreateFlags :: Flags;
PipelineViewportStateCreateFlags :: Flags;
PipelineRasterizationStateCreateFlags :: Flags;
PipelineMultisampleStateCreateFlags :: Flags;

PipelineDepthStencilStateCreateFlagBits :: enum_flags u32 {
    RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_EXT   :: 0x1;
    RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_EXT :: 0x2;
    RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_ARM   :: 0x1;
    RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_ARM :: 0x2;
    FLAG_BITS_MAX_ENUM                                :: 0x7fffffff;

    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT   :: RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_EXT;
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT :: RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_EXT;
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM   :: RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_ARM;
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM :: RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_ARM;
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM                                    :: FLAG_BITS_MAX_ENUM;
}

PipelineDepthStencilStateCreateFlags :: PipelineDepthStencilStateCreateFlagBits;

PipelineColorBlendStateCreateFlagBits :: enum_flags u32 {
    RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXT :: 0x1;
    RASTERIZATION_ORDER_ATTACHMENT_ACCESS_ARM :: 0x1;
    FLAG_BITS_MAX_ENUM                        :: 0x7fffffff;

    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT :: RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXT;
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM :: RASTERIZATION_ORDER_ATTACHMENT_ACCESS_ARM;
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM                            :: FLAG_BITS_MAX_ENUM;
}

PipelineColorBlendStateCreateFlags :: PipelineColorBlendStateCreateFlagBits;
PipelineDynamicStateCreateFlags :: Flags;

PipelineLayoutCreateFlagBits :: enum_flags u32 {
    INDEPENDENT_SETS_EXT :: 0x2;
    FLAG_BITS_MAX_ENUM   :: 0x7fffffff;

    VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT :: INDEPENDENT_SETS_EXT;
    VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM       :: FLAG_BITS_MAX_ENUM;
}

PipelineLayoutCreateFlags :: PipelineLayoutCreateFlagBits;
ShaderStageFlags :: ShaderStageFlagBits;

SamplerCreateFlagBits :: enum_flags u32 {
    SUBSAMPLED_EXT                       :: 0x1;
    SUBSAMPLED_COARSE_RECONSTRUCTION_EXT :: 0x2;
    DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT :: 0x8;
    NON_SEAMLESS_CUBE_MAP_EXT            :: 0x4;
    IMAGE_PROCESSING_QCOM                :: 0x10;
    FLAG_BITS_MAX_ENUM                   :: 0x7fffffff;

    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT                       :: SUBSAMPLED_EXT;
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT :: SUBSAMPLED_COARSE_RECONSTRUCTION_EXT;
    VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT :: DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT;
    VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT            :: NON_SEAMLESS_CUBE_MAP_EXT;
    VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM                :: IMAGE_PROCESSING_QCOM;
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM                       :: FLAG_BITS_MAX_ENUM;
}

SamplerCreateFlags :: SamplerCreateFlagBits;

DescriptorPoolCreateFlagBits :: enum_flags u32 {
    FREE_DESCRIPTOR_SET   :: 0x1;
    UPDATE_AFTER_BIND     :: 0x2;
    HOST_ONLY_EXT         :: 0x4;
    UPDATE_AFTER_BIND_EXT :: 0x2;
    HOST_ONLY_VALVE       :: 0x4;
    FLAG_BITS_MAX_ENUM    :: 0x7fffffff;

    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT   :: FREE_DESCRIPTOR_SET;
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT     :: UPDATE_AFTER_BIND;
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT         :: HOST_ONLY_EXT;
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT :: UPDATE_AFTER_BIND_EXT;
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE       :: HOST_ONLY_VALVE;
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM        :: FLAG_BITS_MAX_ENUM;
}

DescriptorPoolCreateFlags :: DescriptorPoolCreateFlagBits;
DescriptorPoolResetFlags :: Flags;

DescriptorSetLayoutCreateFlagBits :: enum_flags u32 {
    UPDATE_AFTER_BIND_POOL          :: 0x2;
    PUSH_DESCRIPTOR_KHR             :: 0x1;
    DESCRIPTOR_BUFFER_EXT           :: 0x10;
    EMBEDDED_IMMUTABLE_SAMPLERS_EXT :: 0x20;
    HOST_ONLY_POOL_EXT              :: 0x4;
    UPDATE_AFTER_BIND_POOL_EXT      :: 0x2;
    HOST_ONLY_POOL_VALVE            :: 0x4;
    FLAG_BITS_MAX_ENUM              :: 0x7fffffff;

    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT          :: UPDATE_AFTER_BIND_POOL;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR             :: PUSH_DESCRIPTOR_KHR;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT           :: DESCRIPTOR_BUFFER_EXT;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT :: EMBEDDED_IMMUTABLE_SAMPLERS_EXT;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT              :: HOST_ONLY_POOL_EXT;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT      :: UPDATE_AFTER_BIND_POOL_EXT;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE            :: HOST_ONLY_POOL_VALVE;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM                  :: FLAG_BITS_MAX_ENUM;
}

DescriptorSetLayoutCreateFlags :: DescriptorSetLayoutCreateFlagBits;

AttachmentDescriptionFlagBits :: enum_flags u32 {
    MAY_ALIAS          :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT      :: MAY_ALIAS;
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

AttachmentDescriptionFlags :: AttachmentDescriptionFlagBits;

DependencyFlagBits :: enum_flags u32 {
    BY_REGION          :: 0x1;
    DEVICE_GROUP       :: 0x4;
    VIEW_LOCAL         :: 0x2;
    FEEDBACK_LOOP_EXT  :: 0x8;
    VIEW_LOCAL_KHR     :: 0x2;
    DEVICE_GROUP_KHR   :: 0x4;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_DEPENDENCY_BY_REGION_BIT         :: BY_REGION;
    VK_DEPENDENCY_DEVICE_GROUP_BIT      :: DEVICE_GROUP;
    VK_DEPENDENCY_VIEW_LOCAL_BIT        :: VIEW_LOCAL;
    VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT :: FEEDBACK_LOOP_EXT;
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR    :: VIEW_LOCAL_KHR;
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR  :: DEVICE_GROUP_KHR;
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM    :: FLAG_BITS_MAX_ENUM;
}

DependencyFlags :: DependencyFlagBits;

FramebufferCreateFlagBits :: enum_flags u32 {
    IMAGELESS          :: 0x1;
    IMAGELESS_KHR      :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT      :: IMAGELESS;
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR  :: IMAGELESS_KHR;
    VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

FramebufferCreateFlags :: FramebufferCreateFlagBits;

RenderPassCreateFlagBits :: enum_flags u32 {
    TRANSFORM_QCOM     :: 0x2;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM :: TRANSFORM_QCOM;
    VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

RenderPassCreateFlags :: RenderPassCreateFlagBits;

SubpassDescriptionFlagBits :: enum_flags u32 {
    PER_VIEW_ATTRIBUTES_NVX                           :: 0x1;
    PER_VIEW_POSITION_X_ONLY_NVX                      :: 0x2;
    FRAGMENT_REGION_QCOM                              :: 0x4;
    SHADER_RESOLVE_QCOM                               :: 0x8;
    RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_EXT   :: 0x10;
    RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_EXT   :: 0x20;
    RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_EXT :: 0x40;
    ENABLE_LEGACY_DITHERING_EXT                       :: 0x80;
    RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_ARM   :: 0x10;
    RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_ARM   :: 0x20;
    RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_ARM :: 0x40;
    FLAG_BITS_MAX_ENUM                                :: 0x7fffffff;

    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX                           :: PER_VIEW_ATTRIBUTES_NVX;
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX                      :: PER_VIEW_POSITION_X_ONLY_NVX;
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM                              :: FRAGMENT_REGION_QCOM;
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM                               :: SHADER_RESOLVE_QCOM;
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT   :: RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_EXT;
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT   :: RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_EXT;
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT :: RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_EXT;
    VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT                       :: ENABLE_LEGACY_DITHERING_EXT;
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM   :: RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_ARM;
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM   :: RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_ARM;
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM :: RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_ARM;
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM                                    :: FLAG_BITS_MAX_ENUM;
}

SubpassDescriptionFlags :: SubpassDescriptionFlagBits;

CommandPoolCreateFlagBits :: enum_flags u32 {
    TRANSIENT            :: 0x1;
    RESET_COMMAND_BUFFER :: 0x2;
    PROTECTED            :: 0x4;
    FLAG_BITS_MAX_ENUM   :: 0x7fffffff;

    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT            :: TRANSIENT;
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT :: RESET_COMMAND_BUFFER;
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT            :: PROTECTED;
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM       :: FLAG_BITS_MAX_ENUM;
}

CommandPoolCreateFlags :: CommandPoolCreateFlagBits;

CommandPoolResetFlagBits :: enum_flags u32 {
    RELEASE_RESOURCES  :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT :: RELEASE_RESOURCES;
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM    :: FLAG_BITS_MAX_ENUM;
}

CommandPoolResetFlags :: CommandPoolResetFlagBits;

CommandBufferUsageFlagBits :: enum_flags u32 {
    ONE_TIME_SUBMIT      :: 0x1;
    RENDER_PASS_CONTINUE :: 0x2;
    SIMULTANEOUS_USE     :: 0x4;
    FLAG_BITS_MAX_ENUM   :: 0x7fffffff;

    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT      :: ONE_TIME_SUBMIT;
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT :: RENDER_PASS_CONTINUE;
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT     :: SIMULTANEOUS_USE;
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM       :: FLAG_BITS_MAX_ENUM;
}

CommandBufferUsageFlags :: CommandBufferUsageFlagBits;

QueryControlFlagBits :: enum_flags u32 {
    PRECISE            :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_QUERY_CONTROL_PRECISE_BIT        :: PRECISE;
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

QueryControlFlags :: QueryControlFlagBits;

CommandBufferResetFlagBits :: enum_flags u32 {
    RELEASE_RESOURCES  :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT :: RELEASE_RESOURCES;
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM    :: FLAG_BITS_MAX_ENUM;
}

CommandBufferResetFlags :: CommandBufferResetFlagBits;

StencilFaceFlagBits :: enum_flags u32 {
    FACE_FRONT              :: 0x1;
    FACE_BACK               :: 0x2;
    FACE_FRONT_AND_BACK     :: 0x3;
    FRONT_AND_BACK          :: 0x3;
    FACE_FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_STENCIL_FACE_FRONT_BIT          :: FACE_FRONT;
    VK_STENCIL_FACE_BACK_BIT           :: FACE_BACK;
    VK_STENCIL_FACE_FRONT_AND_BACK     :: FACE_FRONT_AND_BACK;
    VK_STENCIL_FRONT_AND_BACK          :: FRONT_AND_BACK;
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM :: FACE_FLAG_BITS_MAX_ENUM;
}

StencilFaceFlags :: StencilFaceFlagBits;
Extent2D :: struct {
    width:  u32;
    height: u32;
}

Extent3D :: struct {
    width:  u32;
    height: u32;
    depth:  u32;
}

Offset2D :: struct {
    x: s32;
    y: s32;
}

Offset3D :: struct {
    x: s32;
    y: s32;
    z: s32;
}

Rect2D :: struct {
    offset: Offset2D;
    extent: Extent2D;
}

BaseInStructure :: struct {
    sType: StructureType;
    pNext: *BaseInStructure;
}

BaseOutStructure :: struct {
    sType: StructureType;
    pNext: *BaseOutStructure;
}

BufferMemoryBarrier :: struct {
    sType:               StructureType = .BUFFER_MEMORY_BARRIER;
    pNext:               *void;
    srcAccessMask:       AccessFlags;
    dstAccessMask:       AccessFlags;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    buffer:              Buffer;
    offset:              DeviceSize;
    size:                DeviceSize;
}

DispatchIndirectCommand :: struct {
    x: u32;
    y: u32;
    z: u32;
}

DrawIndexedIndirectCommand :: struct {
    indexCount:    u32;
    instanceCount: u32;
    firstIndex:    u32;
    vertexOffset:  s32;
    firstInstance: u32;
}

DrawIndirectCommand :: struct {
    vertexCount:   u32;
    instanceCount: u32;
    firstVertex:   u32;
    firstInstance: u32;
}

ImageSubresourceRange :: struct {
    aspectMask:     ImageAspectFlags;
    baseMipLevel:   u32;
    levelCount:     u32;
    baseArrayLayer: u32;
    layerCount:     u32;
}

ImageMemoryBarrier :: struct {
    sType:               StructureType = .IMAGE_MEMORY_BARRIER;
    pNext:               *void;
    srcAccessMask:       AccessFlags;
    dstAccessMask:       AccessFlags;
    oldLayout:           ImageLayout;
    newLayout:           ImageLayout;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    image:               Image;
    subresourceRange:    ImageSubresourceRange;
}

MemoryBarrier :: struct {
    sType:         StructureType = .MEMORY_BARRIER;
    pNext:         *void;
    srcAccessMask: AccessFlags;
    dstAccessMask: AccessFlags;
}

PipelineCacheHeaderVersionOne :: struct {
    headerSize:        u32;
    headerVersion:     PipelineCacheHeaderVersion;
    vendorID:          u32;
    deviceID:          u32;
    pipelineCacheUUID: [16] u8;
}

PFN_vkAllocationFunction :: #type (pUserData: *void, size: u64, alignment: u64, allocationScope: SystemAllocationScope) -> *void #c_call;

PFN_vkFreeFunction :: #type (pUserData: *void, pMemory: *void) -> void #c_call;

PFN_vkInternalAllocationNotification :: #type (pUserData: *void, size: u64, allocationType: InternalAllocationType, allocationScope: SystemAllocationScope) -> void #c_call;

PFN_vkInternalFreeNotification :: #type (pUserData: *void, size: u64, allocationType: InternalAllocationType, allocationScope: SystemAllocationScope) -> void #c_call;

PFN_vkReallocationFunction :: #type (pUserData: *void, pOriginal: *void, size: u64, alignment: u64, allocationScope: SystemAllocationScope) -> *void #c_call;

PFN_vkVoidFunction :: #type () -> void #c_call;
AllocationCallbacks :: struct {
    pUserData:             *void;
    pfnAllocation:         PFN_vkAllocationFunction;
    pfnReallocation:       PFN_vkReallocationFunction;
    pfnFree:               PFN_vkFreeFunction;
    pfnInternalAllocation: PFN_vkInternalAllocationNotification;
    pfnInternalFree:       PFN_vkInternalFreeNotification;
}

ApplicationInfo :: struct {
    sType:              StructureType = .APPLICATION_INFO;
    pNext:              *void;
    pApplicationName:   *u8;
    applicationVersion: u32;
    pEngineName:        *u8;
    engineVersion:      u32;
    apiVersion:         u32;
}

FormatProperties :: struct {
    linearTilingFeatures:  FormatFeatureFlags;
    optimalTilingFeatures: FormatFeatureFlags;
    bufferFeatures:        FormatFeatureFlags;
}

ImageFormatProperties :: struct {
    maxExtent:       Extent3D;
    maxMipLevels:    u32;
    maxArrayLayers:  u32;
    sampleCounts:    SampleCountFlags;
    maxResourceSize: DeviceSize;
}

InstanceCreateInfo :: struct {
    sType:                   StructureType = .INSTANCE_CREATE_INFO;
    pNext:                   *void;
    flags:                   InstanceCreateFlags;
    pApplicationInfo:        *ApplicationInfo;
    enabledLayerCount:       u32;
    ppEnabledLayerNames:     **u8;
    enabledExtensionCount:   u32;
    ppEnabledExtensionNames: **u8;
}

MemoryHeap :: struct {
    size:  DeviceSize;
    flags: MemoryHeapFlags;
}

MemoryType :: struct {
    propertyFlags: MemoryPropertyFlags;
    heapIndex:     u32;
}

PhysicalDeviceFeatures :: struct {
    robustBufferAccess:                      Bool32;
    fullDrawIndexUint32:                     Bool32;
    imageCubeArray:                          Bool32;
    independentBlend:                        Bool32;
    geometryShader:                          Bool32;
    tessellationShader:                      Bool32;
    sampleRateShading:                       Bool32;
    dualSrcBlend:                            Bool32;
    logicOp:                                 Bool32;
    multiDrawIndirect:                       Bool32;
    drawIndirectFirstInstance:               Bool32;
    depthClamp:                              Bool32;
    depthBiasClamp:                          Bool32;
    fillModeNonSolid:                        Bool32;
    depthBounds:                             Bool32;
    wideLines:                               Bool32;
    largePoints:                             Bool32;
    alphaToOne:                              Bool32;
    multiViewport:                           Bool32;
    samplerAnisotropy:                       Bool32;
    textureCompressionETC2:                  Bool32;
    textureCompressionASTC_LDR:              Bool32;
    textureCompressionBC:                    Bool32;
    occlusionQueryPrecise:                   Bool32;
    pipelineStatisticsQuery:                 Bool32;
    vertexPipelineStoresAndAtomics:          Bool32;
    fragmentStoresAndAtomics:                Bool32;
    shaderTessellationAndGeometryPointSize:  Bool32;
    shaderImageGatherExtended:               Bool32;
    shaderStorageImageExtendedFormats:       Bool32;
    shaderStorageImageMultisample:           Bool32;
    shaderStorageImageReadWithoutFormat:     Bool32;
    shaderStorageImageWriteWithoutFormat:    Bool32;
    shaderUniformBufferArrayDynamicIndexing: Bool32;
    shaderSampledImageArrayDynamicIndexing:  Bool32;
    shaderStorageBufferArrayDynamicIndexing: Bool32;
    shaderStorageImageArrayDynamicIndexing:  Bool32;
    shaderClipDistance:                      Bool32;
    shaderCullDistance:                      Bool32;
    shaderFloat64:                           Bool32;
    shaderInt64:                             Bool32;
    shaderInt16:                             Bool32;
    shaderResourceResidency:                 Bool32;
    shaderResourceMinLod:                    Bool32;
    sparseBinding:                           Bool32;
    sparseResidencyBuffer:                   Bool32;
    sparseResidencyImage2D:                  Bool32;
    sparseResidencyImage3D:                  Bool32;
    sparseResidency2Samples:                 Bool32;
    sparseResidency4Samples:                 Bool32;
    sparseResidency8Samples:                 Bool32;
    sparseResidency16Samples:                Bool32;
    sparseResidencyAliased:                  Bool32;
    variableMultisampleRate:                 Bool32;
    inheritedQueries:                        Bool32;
}

PhysicalDeviceLimits :: struct {
    maxImageDimension1D:                             u32;
    maxImageDimension2D:                             u32;
    maxImageDimension3D:                             u32;
    maxImageDimensionCube:                           u32;
    maxImageArrayLayers:                             u32;
    maxTexelBufferElements:                          u32;
    maxUniformBufferRange:                           u32;
    maxStorageBufferRange:                           u32;
    maxPushConstantsSize:                            u32;
    maxMemoryAllocationCount:                        u32;
    maxSamplerAllocationCount:                       u32;
    bufferImageGranularity:                          DeviceSize;
    sparseAddressSpaceSize:                          DeviceSize;
    maxBoundDescriptorSets:                          u32;
    maxPerStageDescriptorSamplers:                   u32;
    maxPerStageDescriptorUniformBuffers:             u32;
    maxPerStageDescriptorStorageBuffers:             u32;
    maxPerStageDescriptorSampledImages:              u32;
    maxPerStageDescriptorStorageImages:              u32;
    maxPerStageDescriptorInputAttachments:           u32;
    maxPerStageResources:                            u32;
    maxDescriptorSetSamplers:                        u32;
    maxDescriptorSetUniformBuffers:                  u32;
    maxDescriptorSetUniformBuffersDynamic:           u32;
    maxDescriptorSetStorageBuffers:                  u32;
    maxDescriptorSetStorageBuffersDynamic:           u32;
    maxDescriptorSetSampledImages:                   u32;
    maxDescriptorSetStorageImages:                   u32;
    maxDescriptorSetInputAttachments:                u32;
    maxVertexInputAttributes:                        u32;
    maxVertexInputBindings:                          u32;
    maxVertexInputAttributeOffset:                   u32;
    maxVertexInputBindingStride:                     u32;
    maxVertexOutputComponents:                       u32;
    maxTessellationGenerationLevel:                  u32;
    maxTessellationPatchSize:                        u32;
    maxTessellationControlPerVertexInputComponents:  u32;
    maxTessellationControlPerVertexOutputComponents: u32;
    maxTessellationControlPerPatchOutputComponents:  u32;
    maxTessellationControlTotalOutputComponents:     u32;
    maxTessellationEvaluationInputComponents:        u32;
    maxTessellationEvaluationOutputComponents:       u32;
    maxGeometryShaderInvocations:                    u32;
    maxGeometryInputComponents:                      u32;
    maxGeometryOutputComponents:                     u32;
    maxGeometryOutputVertices:                       u32;
    maxGeometryTotalOutputComponents:                u32;
    maxFragmentInputComponents:                      u32;
    maxFragmentOutputAttachments:                    u32;
    maxFragmentDualSrcAttachments:                   u32;
    maxFragmentCombinedOutputResources:              u32;
    maxComputeSharedMemorySize:                      u32;
    maxComputeWorkGroupCount:                        [3] u32;
    maxComputeWorkGroupInvocations:                  u32;
    maxComputeWorkGroupSize:                         [3] u32;
    subPixelPrecisionBits:                           u32;
    subTexelPrecisionBits:                           u32;
    mipmapPrecisionBits:                             u32;
    maxDrawIndexedIndexValue:                        u32;
    maxDrawIndirectCount:                            u32;
    maxSamplerLodBias:                               float;
    maxSamplerAnisotropy:                            float;
    maxViewports:                                    u32;
    maxViewportDimensions:                           [2] u32;
    viewportBoundsRange:                             [2] float;
    viewportSubPixelBits:                            u32;
    minMemoryMapAlignment:                           u64;
    minTexelBufferOffsetAlignment:                   DeviceSize;
    minUniformBufferOffsetAlignment:                 DeviceSize;
    minStorageBufferOffsetAlignment:                 DeviceSize;
    minTexelOffset:                                  s32;
    maxTexelOffset:                                  u32;
    minTexelGatherOffset:                            s32;
    maxTexelGatherOffset:                            u32;
    minInterpolationOffset:                          float;
    maxInterpolationOffset:                          float;
    subPixelInterpolationOffsetBits:                 u32;
    maxFramebufferWidth:                             u32;
    maxFramebufferHeight:                            u32;
    maxFramebufferLayers:                            u32;
    framebufferColorSampleCounts:                    SampleCountFlags;
    framebufferDepthSampleCounts:                    SampleCountFlags;
    framebufferStencilSampleCounts:                  SampleCountFlags;
    framebufferNoAttachmentsSampleCounts:            SampleCountFlags;
    maxColorAttachments:                             u32;
    sampledImageColorSampleCounts:                   SampleCountFlags;
    sampledImageIntegerSampleCounts:                 SampleCountFlags;
    sampledImageDepthSampleCounts:                   SampleCountFlags;
    sampledImageStencilSampleCounts:                 SampleCountFlags;
    storageImageSampleCounts:                        SampleCountFlags;
    maxSampleMaskWords:                              u32;
    timestampComputeAndGraphics:                     Bool32;
    timestampPeriod:                                 float;
    maxClipDistances:                                u32;
    maxCullDistances:                                u32;
    maxCombinedClipAndCullDistances:                 u32;
    discreteQueuePriorities:                         u32;
    pointSizeRange:                                  [2] float;
    lineWidthRange:                                  [2] float;
    pointSizeGranularity:                            float;
    lineWidthGranularity:                            float;
    strictLines:                                     Bool32;
    standardSampleLocations:                         Bool32;
    optimalBufferCopyOffsetAlignment:                DeviceSize;
    optimalBufferCopyRowPitchAlignment:              DeviceSize;
    nonCoherentAtomSize:                             DeviceSize;
}

PhysicalDeviceMemoryProperties :: struct {
    memoryTypeCount: u32;
    memoryTypes:     [32] MemoryType;
    memoryHeapCount: u32;
    memoryHeaps:     [16] MemoryHeap;
}

PhysicalDeviceSparseProperties :: struct {
    residencyStandard2DBlockShape:            Bool32;
    residencyStandard2DMultisampleBlockShape: Bool32;
    residencyStandard3DBlockShape:            Bool32;
    residencyAlignedMipSize:                  Bool32;
    residencyNonResidentStrict:               Bool32;
}

PhysicalDeviceProperties :: struct {
    apiVersion:        u32;
    driverVersion:     u32;
    vendorID:          u32;
    deviceID:          u32;
    deviceType:        PhysicalDeviceType;
    deviceName:        [256] u8;
    pipelineCacheUUID: [16] u8;
    limits:            PhysicalDeviceLimits;
    sparseProperties:  PhysicalDeviceSparseProperties;
}

QueueFamilyProperties :: struct {
    queueFlags:                  QueueFlags;
    queueCount:                  u32;
    timestampValidBits:          u32;
    minImageTransferGranularity: Extent3D;
}

DeviceQueueCreateInfo :: struct {
    sType:            StructureType = .DEVICE_QUEUE_CREATE_INFO;
    pNext:            *void;
    flags:            DeviceQueueCreateFlags;
    queueFamilyIndex: u32;
    queueCount:       u32;
    pQueuePriorities: *float;
}

DeviceCreateInfo :: struct {
    sType:                   StructureType = .DEVICE_CREATE_INFO;
    pNext:                   *void;
    flags:                   DeviceCreateFlags;
    queueCreateInfoCount:    u32;
    pQueueCreateInfos:       *DeviceQueueCreateInfo;
    enabledLayerCount:       u32;
    ppEnabledLayerNames:     **u8;
    enabledExtensionCount:   u32;
    ppEnabledExtensionNames: **u8;
    pEnabledFeatures:        *PhysicalDeviceFeatures;
}

ExtensionProperties :: struct {
    extensionName: [256] u8;
    specVersion:   u32;
}

LayerProperties :: struct {
    layerName:             [256] u8;
    specVersion:           u32;
    implementationVersion: u32;
    description:           [256] u8;
}

SubmitInfo :: struct {
    sType:                StructureType = .SUBMIT_INFO;
    pNext:                *void;
    waitSemaphoreCount:   u32;
    pWaitSemaphores:      *Semaphore;
    pWaitDstStageMask:    *PipelineStageFlags;
    commandBufferCount:   u32;
    pCommandBuffers:      *CommandBuffer;
    signalSemaphoreCount: u32;
    pSignalSemaphores:    *Semaphore;
}

MappedMemoryRange :: struct {
    sType:  StructureType = .MAPPED_MEMORY_RANGE;
    pNext:  *void;
    memory: DeviceMemory;
    offset: DeviceSize;
    size:   DeviceSize;
}

MemoryAllocateInfo :: struct {
    sType:           StructureType = .MEMORY_ALLOCATE_INFO;
    pNext:           *void;
    allocationSize:  DeviceSize;
    memoryTypeIndex: u32;
}

MemoryRequirements :: struct {
    size:           DeviceSize;
    alignment:      DeviceSize;
    memoryTypeBits: u32;
}

SparseMemoryBind :: struct {
    resourceOffset: DeviceSize;
    size:           DeviceSize;
    memory:         DeviceMemory;
    memoryOffset:   DeviceSize;
    flags:          SparseMemoryBindFlags;
}

SparseBufferMemoryBindInfo :: struct {
    buffer:    Buffer;
    bindCount: u32;
    pBinds:    *SparseMemoryBind;
}

SparseImageOpaqueMemoryBindInfo :: struct {
    image:     Image;
    bindCount: u32;
    pBinds:    *SparseMemoryBind;
}

ImageSubresource :: struct {
    aspectMask: ImageAspectFlags;
    mipLevel:   u32;
    arrayLayer: u32;
}

SparseImageMemoryBind :: struct {
    subresource:  ImageSubresource;
    offset:       Offset3D;
    extent:       Extent3D;
    memory:       DeviceMemory;
    memoryOffset: DeviceSize;
    flags:        SparseMemoryBindFlags;
}

SparseImageMemoryBindInfo :: struct {
    image:     Image;
    bindCount: u32;
    pBinds:    *SparseImageMemoryBind;
}

BindSparseInfo :: struct {
    sType:                StructureType = .BIND_SPARSE_INFO;
    pNext:                *void;
    waitSemaphoreCount:   u32;
    pWaitSemaphores:      *Semaphore;
    bufferBindCount:      u32;
    pBufferBinds:         *SparseBufferMemoryBindInfo;
    imageOpaqueBindCount: u32;
    pImageOpaqueBinds:    *SparseImageOpaqueMemoryBindInfo;
    imageBindCount:       u32;
    pImageBinds:          *SparseImageMemoryBindInfo;
    signalSemaphoreCount: u32;
    pSignalSemaphores:    *Semaphore;
}

SparseImageFormatProperties :: struct {
    aspectMask:       ImageAspectFlags;
    imageGranularity: Extent3D;
    flags:            SparseImageFormatFlags;
}

SparseImageMemoryRequirements :: struct {
    formatProperties:     SparseImageFormatProperties;
    imageMipTailFirstLod: u32;
    imageMipTailSize:     DeviceSize;
    imageMipTailOffset:   DeviceSize;
    imageMipTailStride:   DeviceSize;
}

FenceCreateInfo :: struct {
    sType: StructureType = .FENCE_CREATE_INFO;
    pNext: *void;
    flags: FenceCreateFlags;
}

SemaphoreCreateInfo :: struct {
    sType: StructureType = .SEMAPHORE_CREATE_INFO;
    pNext: *void;
    flags: SemaphoreCreateFlags;
}

EventCreateInfo :: struct {
    sType: StructureType = .EVENT_CREATE_INFO;
    pNext: *void;
    flags: EventCreateFlags;
}

QueryPoolCreateInfo :: struct {
    sType:              StructureType = .QUERY_POOL_CREATE_INFO;
    pNext:              *void;
    flags:              QueryPoolCreateFlags;
    queryType:          QueryType;
    queryCount:         u32;
    pipelineStatistics: QueryPipelineStatisticFlags;
}

BufferCreateInfo :: struct {
    sType:                 StructureType = .BUFFER_CREATE_INFO;
    pNext:                 *void;
    flags:                 BufferCreateFlags;
    size:                  DeviceSize;
    usage:                 BufferUsageFlags;
    sharingMode:           SharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices:   *u32;
}

BufferViewCreateInfo :: struct {
    sType:  StructureType = .BUFFER_VIEW_CREATE_INFO;
    pNext:  *void;
    flags:  BufferViewCreateFlags;
    buffer: Buffer;
    format: Format;
    offset: DeviceSize;
    range:  DeviceSize;
}

ImageCreateInfo :: struct {
    sType:                 StructureType = .IMAGE_CREATE_INFO;
    pNext:                 *void;
    flags:                 ImageCreateFlags;
    imageType:             ImageType;
    format:                Format;
    extent:                Extent3D;
    mipLevels:             u32;
    arrayLayers:           u32;
    samples:               SampleCountFlagBits;
    tiling:                ImageTiling;
    usage:                 ImageUsageFlags;
    sharingMode:           SharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices:   *u32;
    initialLayout:         ImageLayout;
}

SubresourceLayout :: struct {
    offset:     DeviceSize;
    size:       DeviceSize;
    rowPitch:   DeviceSize;
    arrayPitch: DeviceSize;
    depthPitch: DeviceSize;
}

ComponentMapping :: struct {
    r: ComponentSwizzle;
    g: ComponentSwizzle;
    b: ComponentSwizzle;
    a: ComponentSwizzle;
}

ImageViewCreateInfo :: struct {
    sType:            StructureType = .IMAGE_VIEW_CREATE_INFO;
    pNext:            *void;
    flags:            ImageViewCreateFlags;
    image:            Image;
    viewType:         ImageViewType;
    format:           Format;
    components:       ComponentMapping;
    subresourceRange: ImageSubresourceRange;
}

ShaderModuleCreateInfo :: struct {
    sType:    StructureType = .SHADER_MODULE_CREATE_INFO;
    pNext:    *void;
    flags:    ShaderModuleCreateFlags;
    codeSize: u64;
    pCode:    *u32;
}

PipelineCacheCreateInfo :: struct {
    sType:           StructureType = .PIPELINE_CACHE_CREATE_INFO;
    pNext:           *void;
    flags:           PipelineCacheCreateFlags;
    initialDataSize: u64;
    pInitialData:    *void;
}

SpecializationMapEntry :: struct {
    constantID: u32;
    offset:     u32;
    size:       u64;
}

SpecializationInfo :: struct {
    mapEntryCount: u32;
    pMapEntries:   *SpecializationMapEntry;
    dataSize:      u64;
    pData:         *void;
}

PipelineShaderStageCreateInfo :: struct {
    sType:               StructureType = .PIPELINE_SHADER_STAGE_CREATE_INFO;
    pNext:               *void;
    flags:               PipelineShaderStageCreateFlags;
    stage:               ShaderStageFlagBits;
    module:              ShaderModule;
    pName:               *u8;
    pSpecializationInfo: *SpecializationInfo;
}

ComputePipelineCreateInfo :: struct {
    sType:              StructureType = .COMPUTE_PIPELINE_CREATE_INFO;
    pNext:              *void;
    flags:              PipelineCreateFlags;
    stage:              PipelineShaderStageCreateInfo;
    layout:             PipelineLayout;
    basePipelineHandle: Pipeline;
    basePipelineIndex:  s32;
}

VertexInputBindingDescription :: struct {
    binding:   u32;
    stride:    u32;
    inputRate: VertexInputRate;
}

VertexInputAttributeDescription :: struct {
    location: u32;
    binding:  u32;
    format:   Format;
    offset:   u32;
}

PipelineVertexInputStateCreateInfo :: struct {
    sType:                           StructureType = .PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
    pNext:                           *void;
    flags:                           PipelineVertexInputStateCreateFlags;
    vertexBindingDescriptionCount:   u32;
    pVertexBindingDescriptions:      *VertexInputBindingDescription;
    vertexAttributeDescriptionCount: u32;
    pVertexAttributeDescriptions:    *VertexInputAttributeDescription;
}

PipelineInputAssemblyStateCreateInfo :: struct {
    sType:                  StructureType = .PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
    pNext:                  *void;
    flags:                  PipelineInputAssemblyStateCreateFlags;
    topology:               PrimitiveTopology;
    primitiveRestartEnable: Bool32;
}

PipelineTessellationStateCreateInfo :: struct {
    sType:              StructureType = .PIPELINE_TESSELLATION_STATE_CREATE_INFO;
    pNext:              *void;
    flags:              PipelineTessellationStateCreateFlags;
    patchControlPoints: u32;
}

Viewport :: struct {
    x:        float;
    y:        float;
    width:    float;
    height:   float;
    minDepth: float;
    maxDepth: float;
}

PipelineViewportStateCreateInfo :: struct {
    sType:         StructureType = .PIPELINE_VIEWPORT_STATE_CREATE_INFO;
    pNext:         *void;
    flags:         PipelineViewportStateCreateFlags;
    viewportCount: u32;
    pViewports:    *Viewport;
    scissorCount:  u32;
    pScissors:     *Rect2D;
}

PipelineRasterizationStateCreateInfo :: struct {
    sType:                   StructureType = .PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
    pNext:                   *void;
    flags:                   PipelineRasterizationStateCreateFlags;
    depthClampEnable:        Bool32;
    rasterizerDiscardEnable: Bool32;
    polygonMode:             PolygonMode;
    cullMode:                CullModeFlags;
    frontFace:               FrontFace;
    depthBiasEnable:         Bool32;
    depthBiasConstantFactor: float;
    depthBiasClamp:          float;
    depthBiasSlopeFactor:    float;
    lineWidth:               float;
}

PipelineMultisampleStateCreateInfo :: struct {
    sType:                 StructureType = .PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
    pNext:                 *void;
    flags:                 PipelineMultisampleStateCreateFlags;
    rasterizationSamples:  SampleCountFlagBits;
    sampleShadingEnable:   Bool32;
    minSampleShading:      float;
    pSampleMask:           *SampleMask;
    alphaToCoverageEnable: Bool32;
    alphaToOneEnable:      Bool32;
}

StencilOpState :: struct {
    failOp:      StencilOp;
    passOp:      StencilOp;
    depthFailOp: StencilOp;
    compareOp:   CompareOp;
    compareMask: u32;
    writeMask:   u32;
    reference:   u32;
}

PipelineDepthStencilStateCreateInfo :: struct {
    sType:                 StructureType = .PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
    pNext:                 *void;
    flags:                 PipelineDepthStencilStateCreateFlags;
    depthTestEnable:       Bool32;
    depthWriteEnable:      Bool32;
    depthCompareOp:        CompareOp;
    depthBoundsTestEnable: Bool32;
    stencilTestEnable:     Bool32;
    front:                 StencilOpState;
    back:                  StencilOpState;
    minDepthBounds:        float;
    maxDepthBounds:        float;
}

PipelineColorBlendAttachmentState :: struct {
    blendEnable:         Bool32;
    srcColorBlendFactor: BlendFactor;
    dstColorBlendFactor: BlendFactor;
    colorBlendOp:        BlendOp;
    srcAlphaBlendFactor: BlendFactor;
    dstAlphaBlendFactor: BlendFactor;
    alphaBlendOp:        BlendOp;
    colorWriteMask:      ColorComponentFlags;
}

PipelineColorBlendStateCreateInfo :: struct {
    sType:           StructureType = .PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
    pNext:           *void;
    flags:           PipelineColorBlendStateCreateFlags;
    logicOpEnable:   Bool32;
    logicOp:         LogicOp;
    attachmentCount: u32;
    pAttachments:    *PipelineColorBlendAttachmentState;
    blendConstants:  [4] float;
}

PipelineDynamicStateCreateInfo :: struct {
    sType:             StructureType = .PIPELINE_DYNAMIC_STATE_CREATE_INFO;
    pNext:             *void;
    flags:             PipelineDynamicStateCreateFlags;
    dynamicStateCount: u32;
    pDynamicStates:    *DynamicState;
}

GraphicsPipelineCreateInfo :: struct {
    sType:               StructureType = .GRAPHICS_PIPELINE_CREATE_INFO;
    pNext:               *void;
    flags:               PipelineCreateFlags;
    stageCount:          u32;
    pStages:             *PipelineShaderStageCreateInfo;
    pVertexInputState:   *PipelineVertexInputStateCreateInfo;
    pInputAssemblyState: *PipelineInputAssemblyStateCreateInfo;
    pTessellationState:  *PipelineTessellationStateCreateInfo;
    pViewportState:      *PipelineViewportStateCreateInfo;
    pRasterizationState: *PipelineRasterizationStateCreateInfo;
    pMultisampleState:   *PipelineMultisampleStateCreateInfo;
    pDepthStencilState:  *PipelineDepthStencilStateCreateInfo;
    pColorBlendState:    *PipelineColorBlendStateCreateInfo;
    pDynamicState:       *PipelineDynamicStateCreateInfo;
    layout:              PipelineLayout;
    renderPass:          RenderPass;
    subpass:             u32;
    basePipelineHandle:  Pipeline;
    basePipelineIndex:   s32;
}

PushConstantRange :: struct {
    stageFlags: ShaderStageFlags;
    offset:     u32;
    size:       u32;
}

PipelineLayoutCreateInfo :: struct {
    sType:                  StructureType = .PIPELINE_LAYOUT_CREATE_INFO;
    pNext:                  *void;
    flags:                  PipelineLayoutCreateFlags;
    setLayoutCount:         u32;
    pSetLayouts:            *DescriptorSetLayout;
    pushConstantRangeCount: u32;
    pPushConstantRanges:    *PushConstantRange;
}

SamplerCreateInfo :: struct {
    sType:                   StructureType = .SAMPLER_CREATE_INFO;
    pNext:                   *void;
    flags:                   SamplerCreateFlags;
    magFilter:               Filter;
    minFilter:               Filter;
    mipmapMode:              SamplerMipmapMode;
    addressModeU:            SamplerAddressMode;
    addressModeV:            SamplerAddressMode;
    addressModeW:            SamplerAddressMode;
    mipLodBias:              float;
    anisotropyEnable:        Bool32;
    maxAnisotropy:           float;
    compareEnable:           Bool32;
    compareOp:               CompareOp;
    minLod:                  float;
    maxLod:                  float;
    borderColor:             BorderColor;
    unnormalizedCoordinates: Bool32;
}

CopyDescriptorSet :: struct {
    sType:           StructureType = .COPY_DESCRIPTOR_SET;
    pNext:           *void;
    srcSet:          DescriptorSet;
    srcBinding:      u32;
    srcArrayElement: u32;
    dstSet:          DescriptorSet;
    dstBinding:      u32;
    dstArrayElement: u32;
    descriptorCount: u32;
}

DescriptorBufferInfo :: struct {
    buffer: Buffer;
    offset: DeviceSize;
    range:  DeviceSize;
}

DescriptorImageInfo :: struct {
    sampler:     Sampler;
    imageView:   ImageView;
    imageLayout: ImageLayout;
}

DescriptorPoolSize :: struct {
    type:            DescriptorType;
    descriptorCount: u32;
}

DescriptorPoolCreateInfo :: struct {
    sType:         StructureType = .DESCRIPTOR_POOL_CREATE_INFO;
    pNext:         *void;
    flags:         DescriptorPoolCreateFlags;
    maxSets:       u32;
    poolSizeCount: u32;
    pPoolSizes:    *DescriptorPoolSize;
}

DescriptorSetAllocateInfo :: struct {
    sType:              StructureType = .DESCRIPTOR_SET_ALLOCATE_INFO;
    pNext:              *void;
    descriptorPool:     DescriptorPool;
    descriptorSetCount: u32;
    pSetLayouts:        *DescriptorSetLayout;
}

DescriptorSetLayoutBinding :: struct {
    binding:            u32;
    descriptorType:     DescriptorType;
    descriptorCount:    u32;
    stageFlags:         ShaderStageFlags;
    pImmutableSamplers: *Sampler;
}

DescriptorSetLayoutCreateInfo :: struct {
    sType:        StructureType = .DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
    pNext:        *void;
    flags:        DescriptorSetLayoutCreateFlags;
    bindingCount: u32;
    pBindings:    *DescriptorSetLayoutBinding;
}

WriteDescriptorSet :: struct {
    sType:            StructureType = .WRITE_DESCRIPTOR_SET;
    pNext:            *void;
    dstSet:           DescriptorSet;
    dstBinding:       u32;
    dstArrayElement:  u32;
    descriptorCount:  u32;
    descriptorType:   DescriptorType;
    pImageInfo:       *DescriptorImageInfo;
    pBufferInfo:      *DescriptorBufferInfo;
    pTexelBufferView: *BufferView;
}

AttachmentDescription :: struct {
    flags:          AttachmentDescriptionFlags;
    format:         Format;
    samples:        SampleCountFlagBits;
    loadOp:         AttachmentLoadOp;
    storeOp:        AttachmentStoreOp;
    stencilLoadOp:  AttachmentLoadOp;
    stencilStoreOp: AttachmentStoreOp;
    initialLayout:  ImageLayout;
    finalLayout:    ImageLayout;
}

AttachmentReference :: struct {
    attachment: u32;
    layout:     ImageLayout;
}

FramebufferCreateInfo :: struct {
    sType:           StructureType = .FRAMEBUFFER_CREATE_INFO;
    pNext:           *void;
    flags:           FramebufferCreateFlags;
    renderPass:      RenderPass;
    attachmentCount: u32;
    pAttachments:    *ImageView;
    width:           u32;
    height:          u32;
    layers:          u32;
}

SubpassDescription :: struct {
    flags:                   SubpassDescriptionFlags;
    pipelineBindPoint:       PipelineBindPoint;
    inputAttachmentCount:    u32;
    pInputAttachments:       *AttachmentReference;
    colorAttachmentCount:    u32;
    pColorAttachments:       *AttachmentReference;
    pResolveAttachments:     *AttachmentReference;
    pDepthStencilAttachment: *AttachmentReference;
    preserveAttachmentCount: u32;
    pPreserveAttachments:    *u32;
}

SubpassDependency :: struct {
    srcSubpass:      u32;
    dstSubpass:      u32;
    srcStageMask:    PipelineStageFlags;
    dstStageMask:    PipelineStageFlags;
    srcAccessMask:   AccessFlags;
    dstAccessMask:   AccessFlags;
    dependencyFlags: DependencyFlags;
}

RenderPassCreateInfo :: struct {
    sType:           StructureType = .RENDER_PASS_CREATE_INFO;
    pNext:           *void;
    flags:           RenderPassCreateFlags;
    attachmentCount: u32;
    pAttachments:    *AttachmentDescription;
    subpassCount:    u32;
    pSubpasses:      *SubpassDescription;
    dependencyCount: u32;
    pDependencies:   *SubpassDependency;
}

CommandPoolCreateInfo :: struct {
    sType:            StructureType = .COMMAND_POOL_CREATE_INFO;
    pNext:            *void;
    flags:            CommandPoolCreateFlags;
    queueFamilyIndex: u32;
}

CommandBufferAllocateInfo :: struct {
    sType:              StructureType = .COMMAND_BUFFER_ALLOCATE_INFO;
    pNext:              *void;
    commandPool:        CommandPool;
    level:              CommandBufferLevel;
    commandBufferCount: u32;
}

CommandBufferInheritanceInfo :: struct {
    sType:                StructureType = .COMMAND_BUFFER_INHERITANCE_INFO;
    pNext:                *void;
    renderPass:           RenderPass;
    subpass:              u32;
    framebuffer:          Framebuffer;
    occlusionQueryEnable: Bool32;
    queryFlags:           QueryControlFlags;
    pipelineStatistics:   QueryPipelineStatisticFlags;
}

CommandBufferBeginInfo :: struct {
    sType:            StructureType = .COMMAND_BUFFER_BEGIN_INFO;
    pNext:            *void;
    flags:            CommandBufferUsageFlags;
    pInheritanceInfo: *CommandBufferInheritanceInfo;
}

BufferCopy :: struct {
    srcOffset: DeviceSize;
    dstOffset: DeviceSize;
    size:      DeviceSize;
}

ImageSubresourceLayers :: struct {
    aspectMask:     ImageAspectFlags;
    mipLevel:       u32;
    baseArrayLayer: u32;
    layerCount:     u32;
}

BufferImageCopy :: struct {
    bufferOffset:      DeviceSize;
    bufferRowLength:   u32;
    bufferImageHeight: u32;
    imageSubresource:  ImageSubresourceLayers;
    imageOffset:       Offset3D;
    imageExtent:       Extent3D;
}

ClearColorValue :: union {
    _float32: [4] float;
    int32:    [4] s32;
    uint32:   [4] u32;
}

ClearDepthStencilValue :: struct {
    depth:   float;
    stencil: u32;
}

ClearValue :: union {
    color:        ClearColorValue;
    depthStencil: ClearDepthStencilValue;
}

ClearAttachment :: struct {
    aspectMask:      ImageAspectFlags;
    colorAttachment: u32;
    clearValue:      ClearValue;
}

ClearRect :: struct {
    rect:           Rect2D;
    baseArrayLayer: u32;
    layerCount:     u32;
}

ImageBlit :: struct {
    srcSubresource: ImageSubresourceLayers;
    srcOffsets:     [2] Offset3D;
    dstSubresource: ImageSubresourceLayers;
    dstOffsets:     [2] Offset3D;
}

ImageCopy :: struct {
    srcSubresource: ImageSubresourceLayers;
    srcOffset:      Offset3D;
    dstSubresource: ImageSubresourceLayers;
    dstOffset:      Offset3D;
    extent:         Extent3D;
}

ImageResolve :: struct {
    srcSubresource: ImageSubresourceLayers;
    srcOffset:      Offset3D;
    dstSubresource: ImageSubresourceLayers;
    dstOffset:      Offset3D;
    extent:         Extent3D;
}

RenderPassBeginInfo :: struct {
    sType:           StructureType = .RENDER_PASS_BEGIN_INFO;
    pNext:           *void;
    renderPass:      RenderPass;
    framebuffer:     Framebuffer;
    renderArea:      Rect2D;
    clearValueCount: u32;
    pClearValues:    *ClearValue;
}

PFN_vkCreateInstance :: #type (pCreateInfo: *InstanceCreateInfo, pAllocator: *AllocationCallbacks, pInstance: *Instance) -> Result #c_call;
PFN_vkDestroyInstance :: #type (instance: Instance, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkEnumeratePhysicalDevices :: #type (instance: Instance, pPhysicalDeviceCount: *u32, pPhysicalDevices: *PhysicalDevice) -> Result #c_call;
PFN_vkGetPhysicalDeviceFeatures :: #type (physicalDevice: PhysicalDevice, pFeatures: *PhysicalDeviceFeatures) -> void #c_call;
PFN_vkGetPhysicalDeviceFormatProperties :: #type (physicalDevice: PhysicalDevice, format: Format, pFormatProperties: *FormatProperties) -> void #c_call;
PFN_vkGetPhysicalDeviceImageFormatProperties :: #type (physicalDevice: PhysicalDevice, format: Format, type: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, pImageFormatProperties: *ImageFormatProperties) -> Result #c_call;
PFN_vkGetPhysicalDeviceProperties :: #type (physicalDevice: PhysicalDevice, pProperties: *PhysicalDeviceProperties) -> void #c_call;
PFN_vkGetPhysicalDeviceQueueFamilyProperties :: #type (physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: *u32, pQueueFamilyProperties: *QueueFamilyProperties) -> void #c_call;
PFN_vkGetPhysicalDeviceMemoryProperties :: #type (physicalDevice: PhysicalDevice, pMemoryProperties: *PhysicalDeviceMemoryProperties) -> void #c_call;
PFN_vkGetInstanceProcAddr :: #type (instance: Instance, pName: *u8) -> PFN_vkVoidFunction #c_call;
PFN_vkGetDeviceProcAddr :: #type (device: Device, pName: *u8) -> PFN_vkVoidFunction #c_call;
PFN_vkCreateDevice :: #type (physicalDevice: PhysicalDevice, pCreateInfo: *DeviceCreateInfo, pAllocator: *AllocationCallbacks, pDevice: *Device) -> Result #c_call;
PFN_vkDestroyDevice :: #type (device: Device, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkEnumerateInstanceExtensionProperties :: #type (pLayerName: *u8, pPropertyCount: *u32, pProperties: *ExtensionProperties) -> Result #c_call;
PFN_vkEnumerateDeviceExtensionProperties :: #type (physicalDevice: PhysicalDevice, pLayerName: *u8, pPropertyCount: *u32, pProperties: *ExtensionProperties) -> Result #c_call;
PFN_vkEnumerateInstanceLayerProperties :: #type (pPropertyCount: *u32, pProperties: *LayerProperties) -> Result #c_call;
PFN_vkEnumerateDeviceLayerProperties :: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *LayerProperties) -> Result #c_call;
PFN_vkGetDeviceQueue :: #type (device: Device, queueFamilyIndex: u32, queueIndex: u32, pQueue: *Queue) -> void #c_call;
PFN_vkQueueSubmit :: #type (queue: Queue, submitCount: u32, pSubmits: *SubmitInfo, fence: Fence) -> Result #c_call;
PFN_vkQueueWaitIdle :: #type (queue: Queue) -> Result #c_call;
PFN_vkDeviceWaitIdle :: #type (device: Device) -> Result #c_call;
PFN_vkAllocateMemory :: #type (device: Device, pAllocateInfo: *MemoryAllocateInfo, pAllocator: *AllocationCallbacks, pMemory: *DeviceMemory) -> Result #c_call;
PFN_vkFreeMemory :: #type (device: Device, memory: DeviceMemory, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkMapMemory :: #type (device: Device, memory: DeviceMemory, offset: DeviceSize, size: DeviceSize, flags: MemoryMapFlags, ppData: **void) -> Result #c_call;
PFN_vkUnmapMemory :: #type (device: Device, memory: DeviceMemory) -> void #c_call;
PFN_vkFlushMappedMemoryRanges :: #type (device: Device, memoryRangeCount: u32, pMemoryRanges: *MappedMemoryRange) -> Result #c_call;
PFN_vkInvalidateMappedMemoryRanges :: #type (device: Device, memoryRangeCount: u32, pMemoryRanges: *MappedMemoryRange) -> Result #c_call;
PFN_vkGetDeviceMemoryCommitment :: #type (device: Device, memory: DeviceMemory, pCommittedMemoryInBytes: *DeviceSize) -> void #c_call;
PFN_vkBindBufferMemory :: #type (device: Device, buffer: Buffer, memory: DeviceMemory, memoryOffset: DeviceSize) -> Result #c_call;
PFN_vkBindImageMemory :: #type (device: Device, image: Image, memory: DeviceMemory, memoryOffset: DeviceSize) -> Result #c_call;
PFN_vkGetBufferMemoryRequirements :: #type (device: Device, buffer: Buffer, pMemoryRequirements: *MemoryRequirements) -> void #c_call;
PFN_vkGetImageMemoryRequirements :: #type (device: Device, image: Image, pMemoryRequirements: *MemoryRequirements) -> void #c_call;
PFN_vkGetImageSparseMemoryRequirements :: #type (device: Device, image: Image, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *SparseImageMemoryRequirements) -> void #c_call;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties :: #type (physicalDevice: PhysicalDevice, format: Format, type: ImageType, samples: SampleCountFlagBits, usage: ImageUsageFlags, tiling: ImageTiling, pPropertyCount: *u32, pProperties: *SparseImageFormatProperties) -> void #c_call;
PFN_vkQueueBindSparse :: #type (queue: Queue, bindInfoCount: u32, pBindInfo: *BindSparseInfo, fence: Fence) -> Result #c_call;
PFN_vkCreateFence :: #type (device: Device, pCreateInfo: *FenceCreateInfo, pAllocator: *AllocationCallbacks, pFence: *Fence) -> Result #c_call;
PFN_vkDestroyFence :: #type (device: Device, fence: Fence, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkResetFences :: #type (device: Device, fenceCount: u32, pFences: *Fence) -> Result #c_call;
PFN_vkGetFenceStatus :: #type (device: Device, fence: Fence) -> Result #c_call;
PFN_vkWaitForFences :: #type (device: Device, fenceCount: u32, pFences: *Fence, waitAll: Bool32, timeout: u64) -> Result #c_call;
PFN_vkCreateSemaphore :: #type (device: Device, pCreateInfo: *SemaphoreCreateInfo, pAllocator: *AllocationCallbacks, pSemaphore: *Semaphore) -> Result #c_call;
PFN_vkDestroySemaphore :: #type (device: Device, semaphore: Semaphore, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCreateEvent :: #type (device: Device, pCreateInfo: *EventCreateInfo, pAllocator: *AllocationCallbacks, pEvent: *Event) -> Result #c_call;
PFN_vkDestroyEvent :: #type (device: Device, event: Event, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkGetEventStatus :: #type (device: Device, event: Event) -> Result #c_call;
PFN_vkSetEvent :: #type (device: Device, event: Event) -> Result #c_call;
PFN_vkResetEvent :: #type (device: Device, event: Event) -> Result #c_call;
PFN_vkCreateQueryPool :: #type (device: Device, pCreateInfo: *QueryPoolCreateInfo, pAllocator: *AllocationCallbacks, pQueryPool: *QueryPool) -> Result #c_call;
PFN_vkDestroyQueryPool :: #type (device: Device, queryPool: QueryPool, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkGetQueryPoolResults :: #type (device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32, dataSize: u64, pData: *void, stride: DeviceSize, flags: QueryResultFlags) -> Result #c_call;
PFN_vkCreateBuffer :: #type (device: Device, pCreateInfo: *BufferCreateInfo, pAllocator: *AllocationCallbacks, pBuffer: *Buffer) -> Result #c_call;
PFN_vkDestroyBuffer :: #type (device: Device, buffer: Buffer, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCreateBufferView :: #type (device: Device, pCreateInfo: *BufferViewCreateInfo, pAllocator: *AllocationCallbacks, pView: *BufferView) -> Result #c_call;
PFN_vkDestroyBufferView :: #type (device: Device, bufferView: BufferView, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCreateImage :: #type (device: Device, pCreateInfo: *ImageCreateInfo, pAllocator: *AllocationCallbacks, pImage: *Image) -> Result #c_call;
PFN_vkDestroyImage :: #type (device: Device, image: Image, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkGetImageSubresourceLayout :: #type (device: Device, image: Image, pSubresource: *ImageSubresource, pLayout: *SubresourceLayout) -> void #c_call;
PFN_vkCreateImageView :: #type (device: Device, pCreateInfo: *ImageViewCreateInfo, pAllocator: *AllocationCallbacks, pView: *ImageView) -> Result #c_call;
PFN_vkDestroyImageView :: #type (device: Device, imageView: ImageView, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCreateShaderModule :: #type (device: Device, pCreateInfo: *ShaderModuleCreateInfo, pAllocator: *AllocationCallbacks, pShaderModule: *ShaderModule) -> Result #c_call;
PFN_vkDestroyShaderModule :: #type (device: Device, shaderModule: ShaderModule, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCreatePipelineCache :: #type (device: Device, pCreateInfo: *PipelineCacheCreateInfo, pAllocator: *AllocationCallbacks, pPipelineCache: *PipelineCache) -> Result #c_call;
PFN_vkDestroyPipelineCache :: #type (device: Device, pipelineCache: PipelineCache, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkGetPipelineCacheData :: #type (device: Device, pipelineCache: PipelineCache, pDataSize: *u64, pData: *void) -> Result #c_call;
PFN_vkMergePipelineCaches :: #type (device: Device, dstCache: PipelineCache, srcCacheCount: u32, pSrcCaches: *PipelineCache) -> Result #c_call;
PFN_vkCreateGraphicsPipelines :: #type (device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: *GraphicsPipelineCreateInfo, pAllocator: *AllocationCallbacks, pPipelines: *Pipeline) -> Result #c_call;
PFN_vkCreateComputePipelines :: #type (device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: *ComputePipelineCreateInfo, pAllocator: *AllocationCallbacks, pPipelines: *Pipeline) -> Result #c_call;
PFN_vkDestroyPipeline :: #type (device: Device, pipeline: Pipeline, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCreatePipelineLayout :: #type (device: Device, pCreateInfo: *PipelineLayoutCreateInfo, pAllocator: *AllocationCallbacks, pPipelineLayout: *PipelineLayout) -> Result #c_call;
PFN_vkDestroyPipelineLayout :: #type (device: Device, pipelineLayout: PipelineLayout, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCreateSampler :: #type (device: Device, pCreateInfo: *SamplerCreateInfo, pAllocator: *AllocationCallbacks, pSampler: *Sampler) -> Result #c_call;
PFN_vkDestroySampler :: #type (device: Device, sampler: Sampler, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCreateDescriptorSetLayout :: #type (device: Device, pCreateInfo: *DescriptorSetLayoutCreateInfo, pAllocator: *AllocationCallbacks, pSetLayout: *DescriptorSetLayout) -> Result #c_call;
PFN_vkDestroyDescriptorSetLayout :: #type (device: Device, descriptorSetLayout: DescriptorSetLayout, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCreateDescriptorPool :: #type (device: Device, pCreateInfo: *DescriptorPoolCreateInfo, pAllocator: *AllocationCallbacks, pDescriptorPool: *DescriptorPool) -> Result #c_call;
PFN_vkDestroyDescriptorPool :: #type (device: Device, descriptorPool: DescriptorPool, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkResetDescriptorPool :: #type (device: Device, descriptorPool: DescriptorPool, flags: DescriptorPoolResetFlags) -> Result #c_call;
PFN_vkAllocateDescriptorSets :: #type (device: Device, pAllocateInfo: *DescriptorSetAllocateInfo, pDescriptorSets: *DescriptorSet) -> Result #c_call;
PFN_vkFreeDescriptorSets :: #type (device: Device, descriptorPool: DescriptorPool, descriptorSetCount: u32, pDescriptorSets: *DescriptorSet) -> Result #c_call;
PFN_vkUpdateDescriptorSets :: #type (device: Device, descriptorWriteCount: u32, pDescriptorWrites: *WriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: *CopyDescriptorSet) -> void #c_call;
PFN_vkCreateFramebuffer :: #type (device: Device, pCreateInfo: *FramebufferCreateInfo, pAllocator: *AllocationCallbacks, pFramebuffer: *Framebuffer) -> Result #c_call;
PFN_vkDestroyFramebuffer :: #type (device: Device, framebuffer: Framebuffer, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCreateRenderPass :: #type (device: Device, pCreateInfo: *RenderPassCreateInfo, pAllocator: *AllocationCallbacks, pRenderPass: *RenderPass) -> Result #c_call;
PFN_vkDestroyRenderPass :: #type (device: Device, renderPass: RenderPass, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkGetRenderAreaGranularity :: #type (device: Device, renderPass: RenderPass, pGranularity: *Extent2D) -> void #c_call;
PFN_vkCreateCommandPool :: #type (device: Device, pCreateInfo: *CommandPoolCreateInfo, pAllocator: *AllocationCallbacks, pCommandPool: *CommandPool) -> Result #c_call;
PFN_vkDestroyCommandPool :: #type (device: Device, commandPool: CommandPool, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkResetCommandPool :: #type (device: Device, commandPool: CommandPool, flags: CommandPoolResetFlags) -> Result #c_call;
PFN_vkAllocateCommandBuffers :: #type (device: Device, pAllocateInfo: *CommandBufferAllocateInfo, pCommandBuffers: *CommandBuffer) -> Result #c_call;
PFN_vkFreeCommandBuffers :: #type (device: Device, commandPool: CommandPool, commandBufferCount: u32, pCommandBuffers: *CommandBuffer) -> void #c_call;
PFN_vkBeginCommandBuffer :: #type (commandBuffer: CommandBuffer, pBeginInfo: *CommandBufferBeginInfo) -> Result #c_call;
PFN_vkEndCommandBuffer :: #type (commandBuffer: CommandBuffer) -> Result #c_call;
PFN_vkResetCommandBuffer :: #type (commandBuffer: CommandBuffer, flags: CommandBufferResetFlags) -> Result #c_call;
PFN_vkCmdBindPipeline :: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline) -> void #c_call;
PFN_vkCmdSetViewport :: #type (commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: *Viewport) -> void #c_call;
PFN_vkCmdSetScissor :: #type (commandBuffer: CommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: *Rect2D) -> void #c_call;
PFN_vkCmdSetLineWidth :: #type (commandBuffer: CommandBuffer, lineWidth: float) -> void #c_call;
PFN_vkCmdSetDepthBias :: #type (commandBuffer: CommandBuffer, depthBiasConstantFactor: float, depthBiasClamp: float, depthBiasSlopeFactor: float) -> void #c_call;
PFN_vkCmdSetBlendConstants :: #type (commandBuffer: CommandBuffer, blendConstants: *[4] float) -> void #c_call;
PFN_vkCmdSetDepthBounds :: #type (commandBuffer: CommandBuffer, minDepthBounds: float, maxDepthBounds: float) -> void #c_call;
PFN_vkCmdSetStencilCompareMask :: #type (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, compareMask: u32) -> void #c_call;
PFN_vkCmdSetStencilWriteMask :: #type (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, writeMask: u32) -> void #c_call;
PFN_vkCmdSetStencilReference :: #type (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, reference: u32) -> void #c_call;
PFN_vkCmdBindDescriptorSets :: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: *DescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: *u32) -> void #c_call;
PFN_vkCmdBindIndexBuffer :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, indexType: IndexType) -> void #c_call;
PFN_vkCmdBindVertexBuffers :: #type (commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *Buffer, pOffsets: *DeviceSize) -> void #c_call;
PFN_vkCmdDraw :: #type (commandBuffer: CommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) -> void #c_call;
PFN_vkCmdDrawIndexed :: #type (commandBuffer: CommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: s32, firstInstance: u32) -> void #c_call;
PFN_vkCmdDrawIndirect :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32) -> void #c_call;
PFN_vkCmdDrawIndexedIndirect :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32) -> void #c_call;
PFN_vkCmdDispatch :: #type (commandBuffer: CommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #c_call;
PFN_vkCmdDispatchIndirect :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize) -> void #c_call;
PFN_vkCmdCopyBuffer :: #type (commandBuffer: CommandBuffer, srcBuffer: Buffer, dstBuffer: Buffer, regionCount: u32, pRegions: *BufferCopy) -> void #c_call;
PFN_vkCmdCopyImage :: #type (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: *ImageCopy) -> void #c_call;
PFN_vkCmdBlitImage :: #type (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: *ImageBlit, filter: Filter) -> void #c_call;
PFN_vkCmdCopyBufferToImage :: #type (commandBuffer: CommandBuffer, srcBuffer: Buffer, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: *BufferImageCopy) -> void #c_call;
PFN_vkCmdCopyImageToBuffer :: #type (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstBuffer: Buffer, regionCount: u32, pRegions: *BufferImageCopy) -> void #c_call;
PFN_vkCmdUpdateBuffer :: #type (commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, dataSize: DeviceSize, pData: *void) -> void #c_call;
PFN_vkCmdFillBuffer :: #type (commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, size: DeviceSize, data: u32) -> void #c_call;
PFN_vkCmdClearColorImage :: #type (commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pColor: *ClearColorValue, rangeCount: u32, pRanges: *ImageSubresourceRange) -> void #c_call;
PFN_vkCmdClearDepthStencilImage :: #type (commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pDepthStencil: *ClearDepthStencilValue, rangeCount: u32, pRanges: *ImageSubresourceRange) -> void #c_call;
PFN_vkCmdClearAttachments :: #type (commandBuffer: CommandBuffer, attachmentCount: u32, pAttachments: *ClearAttachment, rectCount: u32, pRects: *ClearRect) -> void #c_call;
PFN_vkCmdResolveImage :: #type (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: *ImageResolve) -> void #c_call;
PFN_vkCmdSetEvent :: #type (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags) -> void #c_call;
PFN_vkCmdResetEvent :: #type (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags) -> void #c_call;
PFN_vkCmdWaitEvents :: #type (commandBuffer: CommandBuffer, eventCount: u32, pEvents: *Event, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: *MemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *BufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *ImageMemoryBarrier) -> void #c_call;
PFN_vkCmdPipelineBarrier :: #type (commandBuffer: CommandBuffer, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, dependencyFlags: DependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: *MemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *BufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *ImageMemoryBarrier) -> void #c_call;
PFN_vkCmdBeginQuery :: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, flags: QueryControlFlags) -> void #c_call;
PFN_vkCmdEndQuery :: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32) -> void #c_call;
PFN_vkCmdResetQueryPool :: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: u32, queryCount: u32) -> void #c_call;
PFN_vkCmdWriteTimestamp :: #type (commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlagBits, queryPool: QueryPool, query: u32) -> void #c_call;
PFN_vkCmdCopyQueryPoolResults :: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: u32, queryCount: u32, dstBuffer: Buffer, dstOffset: DeviceSize, stride: DeviceSize, flags: QueryResultFlags) -> void #c_call;
PFN_vkCmdPushConstants :: #type (commandBuffer: CommandBuffer, layout: PipelineLayout, stageFlags: ShaderStageFlags, offset: u32, size: u32, pValues: *void) -> void #c_call;
PFN_vkCmdBeginRenderPass :: #type (commandBuffer: CommandBuffer, pRenderPassBegin: *RenderPassBeginInfo, contents: SubpassContents) -> void #c_call;
PFN_vkCmdNextSubpass :: #type (commandBuffer: CommandBuffer, contents: SubpassContents) -> void #c_call;
PFN_vkCmdEndRenderPass :: #type (commandBuffer: CommandBuffer) -> void #c_call;
PFN_vkCmdExecuteCommands :: #type (commandBuffer: CommandBuffer, commandBufferCount: u32, pCommandBuffers: *CommandBuffer) -> void #c_call;

CreateInstance: #type (pCreateInfo: *InstanceCreateInfo, pAllocator: *AllocationCallbacks, pInstance: *Instance) -> Result #c_call;

DestroyInstance: #type (instance: Instance, pAllocator: *AllocationCallbacks) -> void #c_call;

EnumeratePhysicalDevices: #type (instance: Instance, pPhysicalDeviceCount: *u32, pPhysicalDevices: *PhysicalDevice) -> Result #c_call;

GetPhysicalDeviceFeatures: #type (physicalDevice: PhysicalDevice, pFeatures: *PhysicalDeviceFeatures) -> void #c_call;

GetPhysicalDeviceFormatProperties: #type (physicalDevice: PhysicalDevice, format: Format, pFormatProperties: *FormatProperties) -> void #c_call;

GetPhysicalDeviceImageFormatProperties: #type (physicalDevice: PhysicalDevice, format: Format, type: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, pImageFormatProperties: *ImageFormatProperties) -> Result #c_call;

GetPhysicalDeviceProperties: #type (physicalDevice: PhysicalDevice, pProperties: *PhysicalDeviceProperties) -> void #c_call;

GetPhysicalDeviceQueueFamilyProperties: #type (physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: *u32, pQueueFamilyProperties: *QueueFamilyProperties) -> void #c_call;

GetPhysicalDeviceMemoryProperties: #type (physicalDevice: PhysicalDevice, pMemoryProperties: *PhysicalDeviceMemoryProperties) -> void #c_call;

GetInstanceProcAddr: #type (instance: Instance, pName: *u8) -> PFN_vkVoidFunction #c_call;

GetDeviceProcAddr: #type (device: Device, pName: *u8) -> PFN_vkVoidFunction #c_call;

CreateDevice: #type (physicalDevice: PhysicalDevice, pCreateInfo: *DeviceCreateInfo, pAllocator: *AllocationCallbacks, pDevice: *Device) -> Result #c_call;

DestroyDevice: #type (device: Device, pAllocator: *AllocationCallbacks) -> void #c_call;

EnumerateInstanceExtensionProperties: #type (pLayerName: *u8, pPropertyCount: *u32, pProperties: *ExtensionProperties) -> Result #c_call;

EnumerateDeviceExtensionProperties: #type (physicalDevice: PhysicalDevice, pLayerName: *u8, pPropertyCount: *u32, pProperties: *ExtensionProperties) -> Result #c_call;

EnumerateInstanceLayerProperties: #type (pPropertyCount: *u32, pProperties: *LayerProperties) -> Result #c_call;

EnumerateDeviceLayerProperties: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *LayerProperties) -> Result #c_call;

GetDeviceQueue: #type (device: Device, queueFamilyIndex: u32, queueIndex: u32, pQueue: *Queue) -> void #c_call;

QueueSubmit: #type (queue: Queue, submitCount: u32, pSubmits: *SubmitInfo, fence: Fence) -> Result #c_call;

QueueWaitIdle: #type (queue: Queue) -> Result #c_call;

DeviceWaitIdle: #type (device: Device) -> Result #c_call;

AllocateMemory: #type (device: Device, pAllocateInfo: *MemoryAllocateInfo, pAllocator: *AllocationCallbacks, pMemory: *DeviceMemory) -> Result #c_call;

FreeMemory: #type (device: Device, memory: DeviceMemory, pAllocator: *AllocationCallbacks) -> void #c_call;

MapMemory: #type (device: Device, memory: DeviceMemory, offset: DeviceSize, size: DeviceSize, flags: MemoryMapFlags, ppData: **void) -> Result #c_call;

UnmapMemory: #type (device: Device, memory: DeviceMemory) -> void #c_call;

FlushMappedMemoryRanges: #type (device: Device, memoryRangeCount: u32, pMemoryRanges: *MappedMemoryRange) -> Result #c_call;

InvalidateMappedMemoryRanges: #type (device: Device, memoryRangeCount: u32, pMemoryRanges: *MappedMemoryRange) -> Result #c_call;

GetDeviceMemoryCommitment: #type (device: Device, memory: DeviceMemory, pCommittedMemoryInBytes: *DeviceSize) -> void #c_call;

BindBufferMemory: #type (device: Device, buffer: Buffer, memory: DeviceMemory, memoryOffset: DeviceSize) -> Result #c_call;

BindImageMemory: #type (device: Device, image: Image, memory: DeviceMemory, memoryOffset: DeviceSize) -> Result #c_call;

GetBufferMemoryRequirements: #type (device: Device, buffer: Buffer, pMemoryRequirements: *MemoryRequirements) -> void #c_call;

GetImageMemoryRequirements: #type (device: Device, image: Image, pMemoryRequirements: *MemoryRequirements) -> void #c_call;

GetImageSparseMemoryRequirements: #type (device: Device, image: Image, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *SparseImageMemoryRequirements) -> void #c_call;

GetPhysicalDeviceSparseImageFormatProperties: #type (physicalDevice: PhysicalDevice, format: Format, type: ImageType, samples: SampleCountFlagBits, usage: ImageUsageFlags, tiling: ImageTiling, pPropertyCount: *u32, pProperties: *SparseImageFormatProperties) -> void #c_call;

QueueBindSparse: #type (queue: Queue, bindInfoCount: u32, pBindInfo: *BindSparseInfo, fence: Fence) -> Result #c_call;

CreateFence: #type (device: Device, pCreateInfo: *FenceCreateInfo, pAllocator: *AllocationCallbacks, pFence: *Fence) -> Result #c_call;

DestroyFence: #type (device: Device, fence: Fence, pAllocator: *AllocationCallbacks) -> void #c_call;

ResetFences: #type (device: Device, fenceCount: u32, pFences: *Fence) -> Result #c_call;

GetFenceStatus: #type (device: Device, fence: Fence) -> Result #c_call;

WaitForFences: #type (device: Device, fenceCount: u32, pFences: *Fence, waitAll: Bool32, timeout: u64) -> Result #c_call;

CreateSemaphore: #type (device: Device, pCreateInfo: *SemaphoreCreateInfo, pAllocator: *AllocationCallbacks, pSemaphore: *Semaphore) -> Result #c_call;

DestroySemaphore: #type (device: Device, semaphore: Semaphore, pAllocator: *AllocationCallbacks) -> void #c_call;

CreateEvent: #type (device: Device, pCreateInfo: *EventCreateInfo, pAllocator: *AllocationCallbacks, pEvent: *Event) -> Result #c_call;

DestroyEvent: #type (device: Device, event: Event, pAllocator: *AllocationCallbacks) -> void #c_call;

GetEventStatus: #type (device: Device, event: Event) -> Result #c_call;

SetEvent: #type (device: Device, event: Event) -> Result #c_call;

ResetEvent: #type (device: Device, event: Event) -> Result #c_call;

CreateQueryPool: #type (device: Device, pCreateInfo: *QueryPoolCreateInfo, pAllocator: *AllocationCallbacks, pQueryPool: *QueryPool) -> Result #c_call;

DestroyQueryPool: #type (device: Device, queryPool: QueryPool, pAllocator: *AllocationCallbacks) -> void #c_call;

GetQueryPoolResults: #type (device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32, dataSize: u64, pData: *void, stride: DeviceSize, flags: QueryResultFlags) -> Result #c_call;

CreateBuffer: #type (device: Device, pCreateInfo: *BufferCreateInfo, pAllocator: *AllocationCallbacks, pBuffer: *Buffer) -> Result #c_call;

DestroyBuffer: #type (device: Device, buffer: Buffer, pAllocator: *AllocationCallbacks) -> void #c_call;

CreateBufferView: #type (device: Device, pCreateInfo: *BufferViewCreateInfo, pAllocator: *AllocationCallbacks, pView: *BufferView) -> Result #c_call;

DestroyBufferView: #type (device: Device, bufferView: BufferView, pAllocator: *AllocationCallbacks) -> void #c_call;

CreateImage: #type (device: Device, pCreateInfo: *ImageCreateInfo, pAllocator: *AllocationCallbacks, pImage: *Image) -> Result #c_call;

DestroyImage: #type (device: Device, image: Image, pAllocator: *AllocationCallbacks) -> void #c_call;

GetImageSubresourceLayout: #type (device: Device, image: Image, pSubresource: *ImageSubresource, pLayout: *SubresourceLayout) -> void #c_call;

CreateImageView: #type (device: Device, pCreateInfo: *ImageViewCreateInfo, pAllocator: *AllocationCallbacks, pView: *ImageView) -> Result #c_call;

DestroyImageView: #type (device: Device, imageView: ImageView, pAllocator: *AllocationCallbacks) -> void #c_call;

CreateShaderModule: #type (device: Device, pCreateInfo: *ShaderModuleCreateInfo, pAllocator: *AllocationCallbacks, pShaderModule: *ShaderModule) -> Result #c_call;

DestroyShaderModule: #type (device: Device, shaderModule: ShaderModule, pAllocator: *AllocationCallbacks) -> void #c_call;

CreatePipelineCache: #type (device: Device, pCreateInfo: *PipelineCacheCreateInfo, pAllocator: *AllocationCallbacks, pPipelineCache: *PipelineCache) -> Result #c_call;

DestroyPipelineCache: #type (device: Device, pipelineCache: PipelineCache, pAllocator: *AllocationCallbacks) -> void #c_call;

GetPipelineCacheData: #type (device: Device, pipelineCache: PipelineCache, pDataSize: *u64, pData: *void) -> Result #c_call;

MergePipelineCaches: #type (device: Device, dstCache: PipelineCache, srcCacheCount: u32, pSrcCaches: *PipelineCache) -> Result #c_call;

CreateGraphicsPipelines: #type (device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: *GraphicsPipelineCreateInfo, pAllocator: *AllocationCallbacks, pPipelines: *Pipeline) -> Result #c_call;

CreateComputePipelines: #type (device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: *ComputePipelineCreateInfo, pAllocator: *AllocationCallbacks, pPipelines: *Pipeline) -> Result #c_call;

DestroyPipeline: #type (device: Device, pipeline: Pipeline, pAllocator: *AllocationCallbacks) -> void #c_call;

CreatePipelineLayout: #type (device: Device, pCreateInfo: *PipelineLayoutCreateInfo, pAllocator: *AllocationCallbacks, pPipelineLayout: *PipelineLayout) -> Result #c_call;

DestroyPipelineLayout: #type (device: Device, pipelineLayout: PipelineLayout, pAllocator: *AllocationCallbacks) -> void #c_call;

CreateSampler: #type (device: Device, pCreateInfo: *SamplerCreateInfo, pAllocator: *AllocationCallbacks, pSampler: *Sampler) -> Result #c_call;

DestroySampler: #type (device: Device, sampler: Sampler, pAllocator: *AllocationCallbacks) -> void #c_call;

CreateDescriptorSetLayout: #type (device: Device, pCreateInfo: *DescriptorSetLayoutCreateInfo, pAllocator: *AllocationCallbacks, pSetLayout: *DescriptorSetLayout) -> Result #c_call;

DestroyDescriptorSetLayout: #type (device: Device, descriptorSetLayout: DescriptorSetLayout, pAllocator: *AllocationCallbacks) -> void #c_call;

CreateDescriptorPool: #type (device: Device, pCreateInfo: *DescriptorPoolCreateInfo, pAllocator: *AllocationCallbacks, pDescriptorPool: *DescriptorPool) -> Result #c_call;

DestroyDescriptorPool: #type (device: Device, descriptorPool: DescriptorPool, pAllocator: *AllocationCallbacks) -> void #c_call;

ResetDescriptorPool: #type (device: Device, descriptorPool: DescriptorPool, flags: DescriptorPoolResetFlags) -> Result #c_call;

AllocateDescriptorSets: #type (device: Device, pAllocateInfo: *DescriptorSetAllocateInfo, pDescriptorSets: *DescriptorSet) -> Result #c_call;

FreeDescriptorSets: #type (device: Device, descriptorPool: DescriptorPool, descriptorSetCount: u32, pDescriptorSets: *DescriptorSet) -> Result #c_call;

UpdateDescriptorSets: #type (device: Device, descriptorWriteCount: u32, pDescriptorWrites: *WriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: *CopyDescriptorSet) -> void #c_call;

CreateFramebuffer: #type (device: Device, pCreateInfo: *FramebufferCreateInfo, pAllocator: *AllocationCallbacks, pFramebuffer: *Framebuffer) -> Result #c_call;

DestroyFramebuffer: #type (device: Device, framebuffer: Framebuffer, pAllocator: *AllocationCallbacks) -> void #c_call;

CreateRenderPass: #type (device: Device, pCreateInfo: *RenderPassCreateInfo, pAllocator: *AllocationCallbacks, pRenderPass: *RenderPass) -> Result #c_call;

DestroyRenderPass: #type (device: Device, renderPass: RenderPass, pAllocator: *AllocationCallbacks) -> void #c_call;

GetRenderAreaGranularity: #type (device: Device, renderPass: RenderPass, pGranularity: *Extent2D) -> void #c_call;

CreateCommandPool: #type (device: Device, pCreateInfo: *CommandPoolCreateInfo, pAllocator: *AllocationCallbacks, pCommandPool: *CommandPool) -> Result #c_call;

DestroyCommandPool: #type (device: Device, commandPool: CommandPool, pAllocator: *AllocationCallbacks) -> void #c_call;

ResetCommandPool: #type (device: Device, commandPool: CommandPool, flags: CommandPoolResetFlags) -> Result #c_call;

AllocateCommandBuffers: #type (device: Device, pAllocateInfo: *CommandBufferAllocateInfo, pCommandBuffers: *CommandBuffer) -> Result #c_call;

FreeCommandBuffers: #type (device: Device, commandPool: CommandPool, commandBufferCount: u32, pCommandBuffers: *CommandBuffer) -> void #c_call;

BeginCommandBuffer: #type (commandBuffer: CommandBuffer, pBeginInfo: *CommandBufferBeginInfo) -> Result #c_call;

EndCommandBuffer: #type (commandBuffer: CommandBuffer) -> Result #c_call;

ResetCommandBuffer: #type (commandBuffer: CommandBuffer, flags: CommandBufferResetFlags) -> Result #c_call;

CmdBindPipeline: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline) -> void #c_call;

CmdSetViewport: #type (commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: *Viewport) -> void #c_call;

CmdSetScissor: #type (commandBuffer: CommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: *Rect2D) -> void #c_call;

CmdSetLineWidth: #type (commandBuffer: CommandBuffer, lineWidth: float) -> void #c_call;

CmdSetDepthBias: #type (commandBuffer: CommandBuffer, depthBiasConstantFactor: float, depthBiasClamp: float, depthBiasSlopeFactor: float) -> void #c_call;

CmdSetBlendConstants: #type (commandBuffer: CommandBuffer, blendConstants: *[4] float) -> void #c_call;

CmdSetDepthBounds: #type (commandBuffer: CommandBuffer, minDepthBounds: float, maxDepthBounds: float) -> void #c_call;

CmdSetStencilCompareMask: #type (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, compareMask: u32) -> void #c_call;

CmdSetStencilWriteMask: #type (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, writeMask: u32) -> void #c_call;

CmdSetStencilReference: #type (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, reference: u32) -> void #c_call;

CmdBindDescriptorSets: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: *DescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: *u32) -> void #c_call;

CmdBindIndexBuffer: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, indexType: IndexType) -> void #c_call;

CmdBindVertexBuffers: #type (commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *Buffer, pOffsets: *DeviceSize) -> void #c_call;

CmdDraw: #type (commandBuffer: CommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) -> void #c_call;

CmdDrawIndexed: #type (commandBuffer: CommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: s32, firstInstance: u32) -> void #c_call;

CmdDrawIndirect: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32) -> void #c_call;

CmdDrawIndexedIndirect: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32) -> void #c_call;

CmdDispatch: #type (commandBuffer: CommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #c_call;

CmdDispatchIndirect: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize) -> void #c_call;

CmdCopyBuffer: #type (commandBuffer: CommandBuffer, srcBuffer: Buffer, dstBuffer: Buffer, regionCount: u32, pRegions: *BufferCopy) -> void #c_call;

CmdCopyImage: #type (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: *ImageCopy) -> void #c_call;

CmdBlitImage: #type (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: *ImageBlit, filter: Filter) -> void #c_call;

CmdCopyBufferToImage: #type (commandBuffer: CommandBuffer, srcBuffer: Buffer, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: *BufferImageCopy) -> void #c_call;

CmdCopyImageToBuffer: #type (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstBuffer: Buffer, regionCount: u32, pRegions: *BufferImageCopy) -> void #c_call;

CmdUpdateBuffer: #type (commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, dataSize: DeviceSize, pData: *void) -> void #c_call;

CmdFillBuffer: #type (commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, size: DeviceSize, data: u32) -> void #c_call;

CmdClearColorImage: #type (commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pColor: *ClearColorValue, rangeCount: u32, pRanges: *ImageSubresourceRange) -> void #c_call;

CmdClearDepthStencilImage: #type (commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pDepthStencil: *ClearDepthStencilValue, rangeCount: u32, pRanges: *ImageSubresourceRange) -> void #c_call;

CmdClearAttachments: #type (commandBuffer: CommandBuffer, attachmentCount: u32, pAttachments: *ClearAttachment, rectCount: u32, pRects: *ClearRect) -> void #c_call;

CmdResolveImage: #type (commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: *ImageResolve) -> void #c_call;

CmdSetEvent: #type (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags) -> void #c_call;

CmdResetEvent: #type (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags) -> void #c_call;

CmdWaitEvents: #type (commandBuffer: CommandBuffer, eventCount: u32, pEvents: *Event, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: *MemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *BufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *ImageMemoryBarrier) -> void #c_call;

CmdPipelineBarrier: #type (commandBuffer: CommandBuffer, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, dependencyFlags: DependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: *MemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *BufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *ImageMemoryBarrier) -> void #c_call;

CmdBeginQuery: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, flags: QueryControlFlags) -> void #c_call;

CmdEndQuery: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32) -> void #c_call;

CmdResetQueryPool: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: u32, queryCount: u32) -> void #c_call;

CmdWriteTimestamp: #type (commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlagBits, queryPool: QueryPool, query: u32) -> void #c_call;

CmdCopyQueryPoolResults: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: u32, queryCount: u32, dstBuffer: Buffer, dstOffset: DeviceSize, stride: DeviceSize, flags: QueryResultFlags) -> void #c_call;

CmdPushConstants: #type (commandBuffer: CommandBuffer, layout: PipelineLayout, stageFlags: ShaderStageFlags, offset: u32, size: u32, pValues: *void) -> void #c_call;

CmdBeginRenderPass: #type (commandBuffer: CommandBuffer, pRenderPassBegin: *RenderPassBeginInfo, contents: SubpassContents) -> void #c_call;

CmdNextSubpass: #type (commandBuffer: CommandBuffer, contents: SubpassContents) -> void #c_call;

CmdEndRenderPass: #type (commandBuffer: CommandBuffer) -> void #c_call;

CmdExecuteCommands: #type (commandBuffer: CommandBuffer, commandBufferCount: u32, pCommandBuffers: *CommandBuffer) -> void #c_call;

SamplerYcbcrConversion_T :: struct {}
SamplerYcbcrConversion :: *SamplerYcbcrConversion_T;
DescriptorUpdateTemplate_T :: struct {}
DescriptorUpdateTemplate :: *DescriptorUpdateTemplate_T;

PointClippingBehavior :: enum u32 {
    ALL_CLIP_PLANES           :: 0;
    USER_CLIP_PLANES_ONLY     :: 1;
    ALL_CLIP_PLANES_KHR       :: 0;
    USER_CLIP_PLANES_ONLY_KHR :: 1;
    MAX_ENUM                  :: 2147483647;

    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES           :: ALL_CLIP_PLANES;
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY     :: USER_CLIP_PLANES_ONLY;
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR       :: ALL_CLIP_PLANES_KHR;
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR :: USER_CLIP_PLANES_ONLY_KHR;
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM                  :: MAX_ENUM;
}

TessellationDomainOrigin :: enum u32 {
    UPPER_LEFT     :: 0;
    LOWER_LEFT     :: 1;
    UPPER_LEFT_KHR :: 0;
    LOWER_LEFT_KHR :: 1;
    MAX_ENUM       :: 2147483647;

    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT     :: UPPER_LEFT;
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT     :: LOWER_LEFT;
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR :: UPPER_LEFT_KHR;
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR :: LOWER_LEFT_KHR;
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM       :: MAX_ENUM;
}

SamplerYcbcrModelConversion :: enum u32 {
    RGB_IDENTITY       :: 0;
    YCBCR_IDENTITY     :: 1;
    YCBCR_709          :: 2;
    YCBCR_601          :: 3;
    YCBCR_2020         :: 4;
    RGB_IDENTITY_KHR   :: 0;
    YCBCR_IDENTITY_KHR :: 1;
    YCBCR_709_KHR      :: 2;
    YCBCR_601_KHR      :: 3;
    YCBCR_2020_KHR     :: 4;
    MAX_ENUM           :: 2147483647;

    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY       :: RGB_IDENTITY;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY     :: YCBCR_IDENTITY;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709          :: YCBCR_709;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601          :: YCBCR_601;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020         :: YCBCR_2020;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR   :: RGB_IDENTITY_KHR;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR :: YCBCR_IDENTITY_KHR;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR      :: YCBCR_709_KHR;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR      :: YCBCR_601_KHR;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR     :: YCBCR_2020_KHR;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM           :: MAX_ENUM;
}

SamplerYcbcrRange :: enum u32 {
    ITU_FULL       :: 0;
    ITU_NARROW     :: 1;
    ITU_FULL_KHR   :: 0;
    ITU_NARROW_KHR :: 1;
    MAX_ENUM       :: 2147483647;

    VK_SAMPLER_YCBCR_RANGE_ITU_FULL       :: ITU_FULL;
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW     :: ITU_NARROW;
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR   :: ITU_FULL_KHR;
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR :: ITU_NARROW_KHR;
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM       :: MAX_ENUM;
}

ChromaLocation :: enum u32 {
    COSITED_EVEN     :: 0;
    MIDPOINT         :: 1;
    COSITED_EVEN_KHR :: 0;
    MIDPOINT_KHR     :: 1;
    MAX_ENUM         :: 2147483647;

    VK_CHROMA_LOCATION_COSITED_EVEN     :: COSITED_EVEN;
    VK_CHROMA_LOCATION_MIDPOINT         :: MIDPOINT;
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR :: COSITED_EVEN_KHR;
    VK_CHROMA_LOCATION_MIDPOINT_KHR     :: MIDPOINT_KHR;
    VK_CHROMA_LOCATION_MAX_ENUM         :: MAX_ENUM;
}

DescriptorUpdateTemplateType :: enum u32 {
    DESCRIPTOR_SET       :: 0;
    PUSH_DESCRIPTORS_KHR :: 1;
    DESCRIPTOR_SET_KHR   :: 0;
    MAX_ENUM             :: 2147483647;

    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET       :: DESCRIPTOR_SET;
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR :: PUSH_DESCRIPTORS_KHR;
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR   :: DESCRIPTOR_SET_KHR;
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM             :: MAX_ENUM;
}

SubgroupFeatureFlagBits :: enum_flags u32 {
    BASIC              :: 0x1;
    VOTE               :: 0x2;
    ARITHMETIC         :: 0x4;
    BALLOT             :: 0x8;
    SHUFFLE            :: 0x10;
    SHUFFLE_RELATIVE   :: 0x20;
    CLUSTERED          :: 0x40;
    QUAD               :: 0x80;
    PARTITIONED_NV     :: 0x100;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_SUBGROUP_FEATURE_BASIC_BIT            :: BASIC;
    VK_SUBGROUP_FEATURE_VOTE_BIT             :: VOTE;
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT       :: ARITHMETIC;
    VK_SUBGROUP_FEATURE_BALLOT_BIT           :: BALLOT;
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT          :: SHUFFLE;
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT :: SHUFFLE_RELATIVE;
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT        :: CLUSTERED;
    VK_SUBGROUP_FEATURE_QUAD_BIT             :: QUAD;
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV   :: PARTITIONED_NV;
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM   :: FLAG_BITS_MAX_ENUM;
}

SubgroupFeatureFlags :: SubgroupFeatureFlagBits;

PeerMemoryFeatureFlagBits :: enum_flags u32 {
    COPY_SRC           :: 0x1;
    COPY_DST           :: 0x2;
    GENERIC_SRC        :: 0x4;
    GENERIC_DST        :: 0x8;
    COPY_SRC_KHR       :: 0x1;
    COPY_DST_KHR       :: 0x2;
    GENERIC_SRC_KHR    :: 0x4;
    GENERIC_DST_KHR    :: 0x8;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT        :: COPY_SRC;
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT        :: COPY_DST;
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT     :: GENERIC_SRC;
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT     :: GENERIC_DST;
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR    :: COPY_SRC_KHR;
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR    :: COPY_DST_KHR;
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR :: GENERIC_SRC_KHR;
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR :: GENERIC_DST_KHR;
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM  :: FLAG_BITS_MAX_ENUM;
}

PeerMemoryFeatureFlags :: PeerMemoryFeatureFlagBits;

MemoryAllocateFlagBits :: enum_flags u32 {
    DEVICE_MASK                       :: 0x1;
    DEVICE_ADDRESS                    :: 0x2;
    DEVICE_ADDRESS_CAPTURE_REPLAY     :: 0x4;
    DEVICE_MASK_KHR                   :: 0x1;
    DEVICE_ADDRESS_KHR                :: 0x2;
    DEVICE_ADDRESS_CAPTURE_REPLAY_KHR :: 0x4;
    FLAG_BITS_MAX_ENUM                :: 0x7fffffff;

    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT                       :: DEVICE_MASK;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT                    :: DEVICE_ADDRESS;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT     :: DEVICE_ADDRESS_CAPTURE_REPLAY;
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR                   :: DEVICE_MASK_KHR;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR                :: DEVICE_ADDRESS_KHR;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR :: DEVICE_ADDRESS_CAPTURE_REPLAY_KHR;
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM                    :: FLAG_BITS_MAX_ENUM;
}

MemoryAllocateFlags :: MemoryAllocateFlagBits;
CommandPoolTrimFlags :: Flags;
DescriptorUpdateTemplateCreateFlags :: Flags;

ExternalMemoryHandleTypeFlagBits :: enum_flags u32 {
    OPAQUE_FD                       :: 0x1;
    OPAQUE_WIN32                    :: 0x2;
    OPAQUE_WIN32_KMT                :: 0x4;
    D3D11_TEXTURE                   :: 0x8;
    D3D11_TEXTURE_KMT               :: 0x10;
    D3D12_HEAP                      :: 0x20;
    D3D12_RESOURCE                  :: 0x40;
    DMA_BUF_EXT                     :: 0x200;
    ANDROID_HARDWARE_BUFFER_ANDROID :: 0x400;
    HOST_ALLOCATION_EXT             :: 0x80;
    HOST_MAPPED_FOREIGN_MEMORY_EXT  :: 0x100;
    ZIRCON_VMO_FUCHSIA              :: 0x800;
    RDMA_ADDRESS_NV                 :: 0x1000;
    OPAQUE_FD_KHR                   :: 0x1;
    OPAQUE_WIN32_KHR                :: 0x2;
    OPAQUE_WIN32_KMT_KHR            :: 0x4;
    D3D11_TEXTURE_KHR               :: 0x8;
    D3D11_TEXTURE_KMT_KHR           :: 0x10;
    D3D12_HEAP_KHR                  :: 0x20;
    D3D12_RESOURCE_KHR              :: 0x40;
    FLAG_BITS_MAX_ENUM              :: 0x7fffffff;

    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT                       :: OPAQUE_FD;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT                    :: OPAQUE_WIN32;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT                :: OPAQUE_WIN32_KMT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT                   :: D3D11_TEXTURE;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT               :: D3D11_TEXTURE_KMT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT                      :: D3D12_HEAP;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT                  :: D3D12_RESOURCE;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT                     :: DMA_BUF_EXT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID :: ANDROID_HARDWARE_BUFFER_ANDROID;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT             :: HOST_ALLOCATION_EXT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT  :: HOST_MAPPED_FOREIGN_MEMORY_EXT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA              :: ZIRCON_VMO_FUCHSIA;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV                 :: RDMA_ADDRESS_NV;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR                   :: OPAQUE_FD_KHR;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR                :: OPAQUE_WIN32_KHR;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR            :: OPAQUE_WIN32_KMT_KHR;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR               :: D3D11_TEXTURE_KHR;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR           :: D3D11_TEXTURE_KMT_KHR;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR                  :: D3D12_HEAP_KHR;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR              :: D3D12_RESOURCE_KHR;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM                  :: FLAG_BITS_MAX_ENUM;
}

ExternalMemoryHandleTypeFlags :: ExternalMemoryHandleTypeFlagBits;

ExternalMemoryFeatureFlagBits :: enum_flags u32 {
    DEDICATED_ONLY     :: 0x1;
    EXPORTABLE         :: 0x2;
    IMPORTABLE         :: 0x4;
    DEDICATED_ONLY_KHR :: 0x1;
    EXPORTABLE_KHR     :: 0x2;
    IMPORTABLE_KHR     :: 0x4;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT     :: DEDICATED_ONLY;
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT         :: EXPORTABLE;
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT         :: IMPORTABLE;
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR :: DEDICATED_ONLY_KHR;
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR     :: EXPORTABLE_KHR;
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR     :: IMPORTABLE_KHR;
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM     :: FLAG_BITS_MAX_ENUM;
}

ExternalMemoryFeatureFlags :: ExternalMemoryFeatureFlagBits;

ExternalFenceHandleTypeFlagBits :: enum_flags u32 {
    OPAQUE_FD            :: 0x1;
    OPAQUE_WIN32         :: 0x2;
    OPAQUE_WIN32_KMT     :: 0x4;
    SYNC_FD              :: 0x8;
    OPAQUE_FD_KHR        :: 0x1;
    OPAQUE_WIN32_KHR     :: 0x2;
    OPAQUE_WIN32_KMT_KHR :: 0x4;
    SYNC_FD_KHR          :: 0x8;
    FLAG_BITS_MAX_ENUM   :: 0x7fffffff;

    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT            :: OPAQUE_FD;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT         :: OPAQUE_WIN32;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT     :: OPAQUE_WIN32_KMT;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT              :: SYNC_FD;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR        :: OPAQUE_FD_KHR;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR     :: OPAQUE_WIN32_KHR;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR :: OPAQUE_WIN32_KMT_KHR;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR          :: SYNC_FD_KHR;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM       :: FLAG_BITS_MAX_ENUM;
}

ExternalFenceHandleTypeFlags :: ExternalFenceHandleTypeFlagBits;

ExternalFenceFeatureFlagBits :: enum_flags u32 {
    EXPORTABLE         :: 0x1;
    IMPORTABLE         :: 0x2;
    EXPORTABLE_KHR     :: 0x1;
    IMPORTABLE_KHR     :: 0x2;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT     :: EXPORTABLE;
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT     :: IMPORTABLE;
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR :: EXPORTABLE_KHR;
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR :: IMPORTABLE_KHR;
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

ExternalFenceFeatureFlags :: ExternalFenceFeatureFlagBits;

FenceImportFlagBits :: enum_flags u32 {
    TEMPORARY          :: 0x1;
    TEMPORARY_KHR      :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_FENCE_IMPORT_TEMPORARY_BIT      :: TEMPORARY;
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR  :: TEMPORARY_KHR;
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

FenceImportFlags :: FenceImportFlagBits;

SemaphoreImportFlagBits :: enum_flags u32 {
    TEMPORARY          :: 0x1;
    TEMPORARY_KHR      :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT      :: TEMPORARY;
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR  :: TEMPORARY_KHR;
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

SemaphoreImportFlags :: SemaphoreImportFlagBits;

ExternalSemaphoreHandleTypeFlagBits :: enum_flags u32 {
    OPAQUE_FD            :: 0x1;
    OPAQUE_WIN32         :: 0x2;
    OPAQUE_WIN32_KMT     :: 0x4;
    D3D12_FENCE          :: 0x8;
    SYNC_FD              :: 0x10;
    ZIRCON_EVENT_FUCHSIA :: 0x80;
    D3D11_FENCE          :: 0x8;
    OPAQUE_FD_KHR        :: 0x1;
    OPAQUE_WIN32_KHR     :: 0x2;
    OPAQUE_WIN32_KMT_KHR :: 0x4;
    D3D12_FENCE_KHR      :: 0x8;
    SYNC_FD_KHR          :: 0x10;
    FLAG_BITS_MAX_ENUM   :: 0x7fffffff;

    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT            :: OPAQUE_FD;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT         :: OPAQUE_WIN32;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT     :: OPAQUE_WIN32_KMT;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT          :: D3D12_FENCE;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT              :: SYNC_FD;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA :: ZIRCON_EVENT_FUCHSIA;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT          :: D3D11_FENCE;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR        :: OPAQUE_FD_KHR;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR     :: OPAQUE_WIN32_KHR;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR :: OPAQUE_WIN32_KMT_KHR;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR      :: D3D12_FENCE_KHR;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR          :: SYNC_FD_KHR;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM       :: FLAG_BITS_MAX_ENUM;
}

ExternalSemaphoreHandleTypeFlags :: ExternalSemaphoreHandleTypeFlagBits;

ExternalSemaphoreFeatureFlagBits :: enum_flags u32 {
    EXPORTABLE         :: 0x1;
    IMPORTABLE         :: 0x2;
    EXPORTABLE_KHR     :: 0x1;
    IMPORTABLE_KHR     :: 0x2;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT     :: EXPORTABLE;
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT     :: IMPORTABLE;
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR :: EXPORTABLE_KHR;
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR :: IMPORTABLE_KHR;
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

ExternalSemaphoreFeatureFlags :: ExternalSemaphoreFeatureFlagBits;
PhysicalDeviceSubgroupProperties :: struct {
    sType:                     StructureType = .PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
    pNext:                     *void;
    subgroupSize:              u32;
    supportedStages:           ShaderStageFlags;
    supportedOperations:       SubgroupFeatureFlags;
    quadOperationsInAllStages: Bool32;
}

BindBufferMemoryInfo :: struct {
    sType:        StructureType = .BIND_BUFFER_MEMORY_INFO;
    pNext:        *void;
    buffer:       Buffer;
    memory:       DeviceMemory;
    memoryOffset: DeviceSize;
}

BindImageMemoryInfo :: struct {
    sType:        StructureType = .BIND_IMAGE_MEMORY_INFO;
    pNext:        *void;
    image:        Image;
    memory:       DeviceMemory;
    memoryOffset: DeviceSize;
}

PhysicalDevice16BitStorageFeatures :: struct {
    sType:                              StructureType = .PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
    pNext:                              *void;
    storageBuffer16BitAccess:           Bool32;
    uniformAndStorageBuffer16BitAccess: Bool32;
    storagePushConstant16:              Bool32;
    storageInputOutput16:               Bool32;
}

MemoryDedicatedRequirements :: struct {
    sType:                       StructureType = .MEMORY_DEDICATED_REQUIREMENTS;
    pNext:                       *void;
    prefersDedicatedAllocation:  Bool32;
    requiresDedicatedAllocation: Bool32;
}

MemoryDedicatedAllocateInfo :: struct {
    sType:  StructureType = .MEMORY_DEDICATED_ALLOCATE_INFO;
    pNext:  *void;
    image:  Image;
    buffer: Buffer;
}

MemoryAllocateFlagsInfo :: struct {
    sType:      StructureType = .MEMORY_ALLOCATE_FLAGS_INFO;
    pNext:      *void;
    flags:      MemoryAllocateFlags;
    deviceMask: u32;
}

DeviceGroupRenderPassBeginInfo :: struct {
    sType:                 StructureType = .DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
    pNext:                 *void;
    deviceMask:            u32;
    deviceRenderAreaCount: u32;
    pDeviceRenderAreas:    *Rect2D;
}

DeviceGroupCommandBufferBeginInfo :: struct {
    sType:      StructureType = .DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
    pNext:      *void;
    deviceMask: u32;
}

DeviceGroupSubmitInfo :: struct {
    sType:                         StructureType = .DEVICE_GROUP_SUBMIT_INFO;
    pNext:                         *void;
    waitSemaphoreCount:            u32;
    pWaitSemaphoreDeviceIndices:   *u32;
    commandBufferCount:            u32;
    pCommandBufferDeviceMasks:     *u32;
    signalSemaphoreCount:          u32;
    pSignalSemaphoreDeviceIndices: *u32;
}

DeviceGroupBindSparseInfo :: struct {
    sType:               StructureType = .DEVICE_GROUP_BIND_SPARSE_INFO;
    pNext:               *void;
    resourceDeviceIndex: u32;
    memoryDeviceIndex:   u32;
}

BindBufferMemoryDeviceGroupInfo :: struct {
    sType:            StructureType = .BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
    pNext:            *void;
    deviceIndexCount: u32;
    pDeviceIndices:   *u32;
}

BindImageMemoryDeviceGroupInfo :: struct {
    sType:                        StructureType = .BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
    pNext:                        *void;
    deviceIndexCount:             u32;
    pDeviceIndices:               *u32;
    splitInstanceBindRegionCount: u32;
    pSplitInstanceBindRegions:    *Rect2D;
}

PhysicalDeviceGroupProperties :: struct {
    sType:               StructureType = .PHYSICAL_DEVICE_GROUP_PROPERTIES;
    pNext:               *void;
    physicalDeviceCount: u32;
    physicalDevices:     [32] PhysicalDevice;
    subsetAllocation:    Bool32;
}

DeviceGroupDeviceCreateInfo :: struct {
    sType:               StructureType = .DEVICE_GROUP_DEVICE_CREATE_INFO;
    pNext:               *void;
    physicalDeviceCount: u32;
    pPhysicalDevices:    *PhysicalDevice;
}

BufferMemoryRequirementsInfo2 :: struct {
    sType:  StructureType = .BUFFER_MEMORY_REQUIREMENTS_INFO_2;
    pNext:  *void;
    buffer: Buffer;
}

ImageMemoryRequirementsInfo2 :: struct {
    sType: StructureType = .IMAGE_MEMORY_REQUIREMENTS_INFO_2;
    pNext: *void;
    image: Image;
}

ImageSparseMemoryRequirementsInfo2 :: struct {
    sType: StructureType = .IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
    pNext: *void;
    image: Image;
}

MemoryRequirements2 :: struct {
    sType:              StructureType = .MEMORY_REQUIREMENTS_2;
    pNext:              *void;
    memoryRequirements: MemoryRequirements;
}

SparseImageMemoryRequirements2 :: struct {
    sType:              StructureType = .SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
    pNext:              *void;
    memoryRequirements: SparseImageMemoryRequirements;
}

PhysicalDeviceFeatures2 :: struct {
    sType:    StructureType = .PHYSICAL_DEVICE_FEATURES_2;
    pNext:    *void;
    features: PhysicalDeviceFeatures;
}

PhysicalDeviceProperties2 :: struct {
    sType:      StructureType = .PHYSICAL_DEVICE_PROPERTIES_2;
    pNext:      *void;
    properties: PhysicalDeviceProperties;
}

FormatProperties2 :: struct {
    sType:            StructureType = .FORMAT_PROPERTIES_2;
    pNext:            *void;
    formatProperties: FormatProperties;
}

ImageFormatProperties2 :: struct {
    sType:                 StructureType = .IMAGE_FORMAT_PROPERTIES_2;
    pNext:                 *void;
    imageFormatProperties: ImageFormatProperties;
}

PhysicalDeviceImageFormatInfo2 :: struct {
    sType:  StructureType = .PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
    pNext:  *void;
    format: Format;
    type:   ImageType;
    tiling: ImageTiling;
    usage:  ImageUsageFlags;
    flags:  ImageCreateFlags;
}

QueueFamilyProperties2 :: struct {
    sType:                 StructureType = .QUEUE_FAMILY_PROPERTIES_2;
    pNext:                 *void;
    queueFamilyProperties: QueueFamilyProperties;
}

PhysicalDeviceMemoryProperties2 :: struct {
    sType:            StructureType = .PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
    pNext:            *void;
    memoryProperties: PhysicalDeviceMemoryProperties;
}

SparseImageFormatProperties2 :: struct {
    sType:      StructureType = .SPARSE_IMAGE_FORMAT_PROPERTIES_2;
    pNext:      *void;
    properties: SparseImageFormatProperties;
}

PhysicalDeviceSparseImageFormatInfo2 :: struct {
    sType:   StructureType = .PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
    pNext:   *void;
    format:  Format;
    type:    ImageType;
    samples: SampleCountFlagBits;
    usage:   ImageUsageFlags;
    tiling:  ImageTiling;
}

PhysicalDevicePointClippingProperties :: struct {
    sType:                 StructureType = .PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
    pNext:                 *void;
    pointClippingBehavior: PointClippingBehavior;
}

InputAttachmentAspectReference :: struct {
    subpass:              u32;
    inputAttachmentIndex: u32;
    aspectMask:           ImageAspectFlags;
}

RenderPassInputAttachmentAspectCreateInfo :: struct {
    sType:                StructureType = .RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
    pNext:                *void;
    aspectReferenceCount: u32;
    pAspectReferences:    *InputAttachmentAspectReference;
}

ImageViewUsageCreateInfo :: struct {
    sType: StructureType = .IMAGE_VIEW_USAGE_CREATE_INFO;
    pNext: *void;
    usage: ImageUsageFlags;
}

PipelineTessellationDomainOriginStateCreateInfo :: struct {
    sType:        StructureType = .PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
    pNext:        *void;
    domainOrigin: TessellationDomainOrigin;
}

RenderPassMultiviewCreateInfo :: struct {
    sType:                StructureType = .RENDER_PASS_MULTIVIEW_CREATE_INFO;
    pNext:                *void;
    subpassCount:         u32;
    pViewMasks:           *u32;
    dependencyCount:      u32;
    pViewOffsets:         *s32;
    correlationMaskCount: u32;
    pCorrelationMasks:    *u32;
}

PhysicalDeviceMultiviewFeatures :: struct {
    sType:                       StructureType = .PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
    pNext:                       *void;
    multiview:                   Bool32;
    multiviewGeometryShader:     Bool32;
    multiviewTessellationShader: Bool32;
}

PhysicalDeviceMultiviewProperties :: struct {
    sType:                     StructureType = .PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
    pNext:                     *void;
    maxMultiviewViewCount:     u32;
    maxMultiviewInstanceIndex: u32;
}

PhysicalDeviceVariablePointersFeatures :: struct {
    sType:                         StructureType = .PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
    pNext:                         *void;
    variablePointersStorageBuffer: Bool32;
    variablePointers:              Bool32;
}

PhysicalDeviceVariablePointerFeatures :: PhysicalDeviceVariablePointersFeatures;

PhysicalDeviceProtectedMemoryFeatures :: struct {
    sType:           StructureType = .PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
    pNext:           *void;
    protectedMemory: Bool32;
}

PhysicalDeviceProtectedMemoryProperties :: struct {
    sType:            StructureType = .PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
    pNext:            *void;
    protectedNoFault: Bool32;
}

DeviceQueueInfo2 :: struct {
    sType:            StructureType = .DEVICE_QUEUE_INFO_2;
    pNext:            *void;
    flags:            DeviceQueueCreateFlags;
    queueFamilyIndex: u32;
    queueIndex:       u32;
}

ProtectedSubmitInfo :: struct {
    sType:           StructureType = .PROTECTED_SUBMIT_INFO;
    pNext:           *void;
    protectedSubmit: Bool32;
}

SamplerYcbcrConversionCreateInfo :: struct {
    sType:                       StructureType = .SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
    pNext:                       *void;
    format:                      Format;
    ycbcrModel:                  SamplerYcbcrModelConversion;
    ycbcrRange:                  SamplerYcbcrRange;
    components:                  ComponentMapping;
    xChromaOffset:               ChromaLocation;
    yChromaOffset:               ChromaLocation;
    chromaFilter:                Filter;
    forceExplicitReconstruction: Bool32;
}

SamplerYcbcrConversionInfo :: struct {
    sType:      StructureType = .SAMPLER_YCBCR_CONVERSION_INFO;
    pNext:      *void;
    conversion: SamplerYcbcrConversion;
}

BindImagePlaneMemoryInfo :: struct {
    sType:       StructureType = .BIND_IMAGE_PLANE_MEMORY_INFO;
    pNext:       *void;
    planeAspect: ImageAspectFlagBits;
}

ImagePlaneMemoryRequirementsInfo :: struct {
    sType:       StructureType = .IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
    pNext:       *void;
    planeAspect: ImageAspectFlagBits;
}

PhysicalDeviceSamplerYcbcrConversionFeatures :: struct {
    sType:                  StructureType = .PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
    pNext:                  *void;
    samplerYcbcrConversion: Bool32;
}

SamplerYcbcrConversionImageFormatProperties :: struct {
    sType:                               StructureType = .SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
    pNext:                               *void;
    combinedImageSamplerDescriptorCount: u32;
}

DescriptorUpdateTemplateEntry :: struct {
    dstBinding:      u32;
    dstArrayElement: u32;
    descriptorCount: u32;
    descriptorType:  DescriptorType;
    offset:          u64;
    stride:          u64;
}

DescriptorUpdateTemplateCreateInfo :: struct {
    sType:                      StructureType = .DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
    pNext:                      *void;
    flags:                      DescriptorUpdateTemplateCreateFlags;
    descriptorUpdateEntryCount: u32;
    pDescriptorUpdateEntries:   *DescriptorUpdateTemplateEntry;
    templateType:               DescriptorUpdateTemplateType;
    descriptorSetLayout:        DescriptorSetLayout;
    pipelineBindPoint:          PipelineBindPoint;
    pipelineLayout:             PipelineLayout;
    set:                        u32;
}

ExternalMemoryProperties :: struct {
    externalMemoryFeatures:        ExternalMemoryFeatureFlags;
    exportFromImportedHandleTypes: ExternalMemoryHandleTypeFlags;
    compatibleHandleTypes:         ExternalMemoryHandleTypeFlags;
}

PhysicalDeviceExternalImageFormatInfo :: struct {
    sType:      StructureType = .PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
    pNext:      *void;
    handleType: ExternalMemoryHandleTypeFlagBits;
}

ExternalImageFormatProperties :: struct {
    sType:                    StructureType = .EXTERNAL_IMAGE_FORMAT_PROPERTIES;
    pNext:                    *void;
    externalMemoryProperties: ExternalMemoryProperties;
}

PhysicalDeviceExternalBufferInfo :: struct {
    sType:      StructureType = .PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
    pNext:      *void;
    flags:      BufferCreateFlags;
    usage:      BufferUsageFlags;
    handleType: ExternalMemoryHandleTypeFlagBits;
}

ExternalBufferProperties :: struct {
    sType:                    StructureType = .EXTERNAL_BUFFER_PROPERTIES;
    pNext:                    *void;
    externalMemoryProperties: ExternalMemoryProperties;
}

PhysicalDeviceIDProperties :: struct {
    sType:           StructureType = .PHYSICAL_DEVICE_ID_PROPERTIES;
    pNext:           *void;
    deviceUUID:      [16] u8;
    driverUUID:      [16] u8;
    deviceLUID:      [8] u8;
    deviceNodeMask:  u32;
    deviceLUIDValid: Bool32;
}

ExternalMemoryImageCreateInfo :: struct {
    sType:       StructureType = .EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
    pNext:       *void;
    handleTypes: ExternalMemoryHandleTypeFlags;
}

ExternalMemoryBufferCreateInfo :: struct {
    sType:       StructureType = .EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
    pNext:       *void;
    handleTypes: ExternalMemoryHandleTypeFlags;
}

ExportMemoryAllocateInfo :: struct {
    sType:       StructureType = .EXPORT_MEMORY_ALLOCATE_INFO;
    pNext:       *void;
    handleTypes: ExternalMemoryHandleTypeFlags;
}

PhysicalDeviceExternalFenceInfo :: struct {
    sType:      StructureType = .PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
    pNext:      *void;
    handleType: ExternalFenceHandleTypeFlagBits;
}

ExternalFenceProperties :: struct {
    sType:                         StructureType = .EXTERNAL_FENCE_PROPERTIES;
    pNext:                         *void;
    exportFromImportedHandleTypes: ExternalFenceHandleTypeFlags;
    compatibleHandleTypes:         ExternalFenceHandleTypeFlags;
    externalFenceFeatures:         ExternalFenceFeatureFlags;
}

ExportFenceCreateInfo :: struct {
    sType:       StructureType = .EXPORT_FENCE_CREATE_INFO;
    pNext:       *void;
    handleTypes: ExternalFenceHandleTypeFlags;
}

ExportSemaphoreCreateInfo :: struct {
    sType:       StructureType = .EXPORT_SEMAPHORE_CREATE_INFO;
    pNext:       *void;
    handleTypes: ExternalSemaphoreHandleTypeFlags;
}

PhysicalDeviceExternalSemaphoreInfo :: struct {
    sType:      StructureType = .PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
    pNext:      *void;
    handleType: ExternalSemaphoreHandleTypeFlagBits;
}

ExternalSemaphoreProperties :: struct {
    sType:                         StructureType = .EXTERNAL_SEMAPHORE_PROPERTIES;
    pNext:                         *void;
    exportFromImportedHandleTypes: ExternalSemaphoreHandleTypeFlags;
    compatibleHandleTypes:         ExternalSemaphoreHandleTypeFlags;
    externalSemaphoreFeatures:     ExternalSemaphoreFeatureFlags;
}

PhysicalDeviceMaintenance3Properties :: struct {
    sType:                   StructureType = .PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
    pNext:                   *void;
    maxPerSetDescriptors:    u32;
    maxMemoryAllocationSize: DeviceSize;
}

DescriptorSetLayoutSupport :: struct {
    sType:     StructureType = .DESCRIPTOR_SET_LAYOUT_SUPPORT;
    pNext:     *void;
    supported: Bool32;
}

PhysicalDeviceShaderDrawParametersFeatures :: struct {
    sType:                StructureType = .PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
    pNext:                *void;
    shaderDrawParameters: Bool32;
}

PhysicalDeviceShaderDrawParameterFeatures :: PhysicalDeviceShaderDrawParametersFeatures;

PFN_vkEnumerateInstanceVersion :: #type (pApiVersion: *u32) -> Result #c_call;
PFN_vkBindBufferMemory2 :: #type (device: Device, bindInfoCount: u32, pBindInfos: *BindBufferMemoryInfo) -> Result #c_call;
PFN_vkBindImageMemory2 :: #type (device: Device, bindInfoCount: u32, pBindInfos: *BindImageMemoryInfo) -> Result #c_call;
PFN_vkGetDeviceGroupPeerMemoryFeatures :: #type (device: Device, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: *PeerMemoryFeatureFlags) -> void #c_call;
PFN_vkCmdSetDeviceMask :: #type (commandBuffer: CommandBuffer, deviceMask: u32) -> void #c_call;
PFN_vkCmdDispatchBase :: #type (commandBuffer: CommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #c_call;
PFN_vkEnumeratePhysicalDeviceGroups :: #type (instance: Instance, pPhysicalDeviceGroupCount: *u32, pPhysicalDeviceGroupProperties: *PhysicalDeviceGroupProperties) -> Result #c_call;
PFN_vkGetImageMemoryRequirements2 :: #type (device: Device, pInfo: *ImageMemoryRequirementsInfo2, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;
PFN_vkGetBufferMemoryRequirements2 :: #type (device: Device, pInfo: *BufferMemoryRequirementsInfo2, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;
PFN_vkGetImageSparseMemoryRequirements2 :: #type (device: Device, pInfo: *ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *SparseImageMemoryRequirements2) -> void #c_call;
PFN_vkGetPhysicalDeviceFeatures2 :: #type (physicalDevice: PhysicalDevice, pFeatures: *PhysicalDeviceFeatures2) -> void #c_call;
PFN_vkGetPhysicalDeviceProperties2 :: #type (physicalDevice: PhysicalDevice, pProperties: *PhysicalDeviceProperties2) -> void #c_call;
PFN_vkGetPhysicalDeviceFormatProperties2 :: #type (physicalDevice: PhysicalDevice, format: Format, pFormatProperties: *FormatProperties2) -> void #c_call;
PFN_vkGetPhysicalDeviceImageFormatProperties2 :: #type (physicalDevice: PhysicalDevice, pImageFormatInfo: *PhysicalDeviceImageFormatInfo2, pImageFormatProperties: *ImageFormatProperties2) -> Result #c_call;
PFN_vkGetPhysicalDeviceQueueFamilyProperties2 :: #type (physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: *u32, pQueueFamilyProperties: *QueueFamilyProperties2) -> void #c_call;
PFN_vkGetPhysicalDeviceMemoryProperties2 :: #type (physicalDevice: PhysicalDevice, pMemoryProperties: *PhysicalDeviceMemoryProperties2) -> void #c_call;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 :: #type (physicalDevice: PhysicalDevice, pFormatInfo: *PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *u32, pProperties: *SparseImageFormatProperties2) -> void #c_call;
PFN_vkTrimCommandPool :: #type (device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags) -> void #c_call;
PFN_vkGetDeviceQueue2 :: #type (device: Device, pQueueInfo: *DeviceQueueInfo2, pQueue: *Queue) -> void #c_call;
PFN_vkCreateSamplerYcbcrConversion :: #type (device: Device, pCreateInfo: *SamplerYcbcrConversionCreateInfo, pAllocator: *AllocationCallbacks, pYcbcrConversion: *SamplerYcbcrConversion) -> Result #c_call;
PFN_vkDestroySamplerYcbcrConversion :: #type (device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCreateDescriptorUpdateTemplate :: #type (device: Device, pCreateInfo: *DescriptorUpdateTemplateCreateInfo, pAllocator: *AllocationCallbacks, pDescriptorUpdateTemplate: *DescriptorUpdateTemplate) -> Result #c_call;
PFN_vkDestroyDescriptorUpdateTemplate :: #type (device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkUpdateDescriptorSetWithTemplate :: #type (device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: *void) -> void #c_call;
PFN_vkGetPhysicalDeviceExternalBufferProperties :: #type (physicalDevice: PhysicalDevice, pExternalBufferInfo: *PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *ExternalBufferProperties) -> void #c_call;
PFN_vkGetPhysicalDeviceExternalFenceProperties :: #type (physicalDevice: PhysicalDevice, pExternalFenceInfo: *PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *ExternalFenceProperties) -> void #c_call;
PFN_vkGetPhysicalDeviceExternalSemaphoreProperties :: #type (physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: *PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *ExternalSemaphoreProperties) -> void #c_call;
PFN_vkGetDescriptorSetLayoutSupport :: #type (device: Device, pCreateInfo: *DescriptorSetLayoutCreateInfo, pSupport: *DescriptorSetLayoutSupport) -> void #c_call;

EnumerateInstanceVersion: #type (pApiVersion: *u32) -> Result #c_call;

BindBufferMemory2: #type (device: Device, bindInfoCount: u32, pBindInfos: *BindBufferMemoryInfo) -> Result #c_call;

BindImageMemory2: #type (device: Device, bindInfoCount: u32, pBindInfos: *BindImageMemoryInfo) -> Result #c_call;

GetDeviceGroupPeerMemoryFeatures: #type (device: Device, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: *PeerMemoryFeatureFlags) -> void #c_call;

CmdSetDeviceMask: #type (commandBuffer: CommandBuffer, deviceMask: u32) -> void #c_call;

CmdDispatchBase: #type (commandBuffer: CommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #c_call;

EnumeratePhysicalDeviceGroups: #type (instance: Instance, pPhysicalDeviceGroupCount: *u32, pPhysicalDeviceGroupProperties: *PhysicalDeviceGroupProperties) -> Result #c_call;

GetImageMemoryRequirements2: #type (device: Device, pInfo: *ImageMemoryRequirementsInfo2, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;

GetBufferMemoryRequirements2: #type (device: Device, pInfo: *BufferMemoryRequirementsInfo2, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;

GetImageSparseMemoryRequirements2: #type (device: Device, pInfo: *ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *SparseImageMemoryRequirements2) -> void #c_call;

GetPhysicalDeviceFeatures2: #type (physicalDevice: PhysicalDevice, pFeatures: *PhysicalDeviceFeatures2) -> void #c_call;

GetPhysicalDeviceProperties2: #type (physicalDevice: PhysicalDevice, pProperties: *PhysicalDeviceProperties2) -> void #c_call;

GetPhysicalDeviceFormatProperties2: #type (physicalDevice: PhysicalDevice, format: Format, pFormatProperties: *FormatProperties2) -> void #c_call;

GetPhysicalDeviceImageFormatProperties2: #type (physicalDevice: PhysicalDevice, pImageFormatInfo: *PhysicalDeviceImageFormatInfo2, pImageFormatProperties: *ImageFormatProperties2) -> Result #c_call;

GetPhysicalDeviceQueueFamilyProperties2: #type (physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: *u32, pQueueFamilyProperties: *QueueFamilyProperties2) -> void #c_call;

GetPhysicalDeviceMemoryProperties2: #type (physicalDevice: PhysicalDevice, pMemoryProperties: *PhysicalDeviceMemoryProperties2) -> void #c_call;

GetPhysicalDeviceSparseImageFormatProperties2: #type (physicalDevice: PhysicalDevice, pFormatInfo: *PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *u32, pProperties: *SparseImageFormatProperties2) -> void #c_call;

TrimCommandPool: #type (device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags) -> void #c_call;

GetDeviceQueue2: #type (device: Device, pQueueInfo: *DeviceQueueInfo2, pQueue: *Queue) -> void #c_call;

CreateSamplerYcbcrConversion: #type (device: Device, pCreateInfo: *SamplerYcbcrConversionCreateInfo, pAllocator: *AllocationCallbacks, pYcbcrConversion: *SamplerYcbcrConversion) -> Result #c_call;

DestroySamplerYcbcrConversion: #type (device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: *AllocationCallbacks) -> void #c_call;

CreateDescriptorUpdateTemplate: #type (device: Device, pCreateInfo: *DescriptorUpdateTemplateCreateInfo, pAllocator: *AllocationCallbacks, pDescriptorUpdateTemplate: *DescriptorUpdateTemplate) -> Result #c_call;

DestroyDescriptorUpdateTemplate: #type (device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: *AllocationCallbacks) -> void #c_call;

UpdateDescriptorSetWithTemplate: #type (device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: *void) -> void #c_call;

GetPhysicalDeviceExternalBufferProperties: #type (physicalDevice: PhysicalDevice, pExternalBufferInfo: *PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *ExternalBufferProperties) -> void #c_call;

GetPhysicalDeviceExternalFenceProperties: #type (physicalDevice: PhysicalDevice, pExternalFenceInfo: *PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *ExternalFenceProperties) -> void #c_call;

GetPhysicalDeviceExternalSemaphoreProperties: #type (physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: *PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *ExternalSemaphoreProperties) -> void #c_call;

GetDescriptorSetLayoutSupport: #type (device: Device, pCreateInfo: *DescriptorSetLayoutCreateInfo, pSupport: *DescriptorSetLayoutSupport) -> void #c_call;

DriverId :: enum u32 {
    AMD_PROPRIETARY               :: 1;
    AMD_OPEN_SOURCE               :: 2;
    MESA_RADV                     :: 3;
    NVIDIA_PROPRIETARY            :: 4;
    INTEL_PROPRIETARY_WINDOWS     :: 5;
    INTEL_OPEN_SOURCE_MESA        :: 6;
    IMAGINATION_PROPRIETARY       :: 7;
    QUALCOMM_PROPRIETARY          :: 8;
    ARM_PROPRIETARY               :: 9;
    GOOGLE_SWIFTSHADER            :: 10;
    GGP_PROPRIETARY               :: 11;
    BROADCOM_PROPRIETARY          :: 12;
    MESA_LLVMPIPE                 :: 13;
    MOLTENVK                      :: 14;
    COREAVI_PROPRIETARY           :: 15;
    JUICE_PROPRIETARY             :: 16;
    VERISILICON_PROPRIETARY       :: 17;
    MESA_TURNIP                   :: 18;
    MESA_V3DV                     :: 19;
    MESA_PANVK                    :: 20;
    SAMSUNG_PROPRIETARY           :: 21;
    MESA_VENUS                    :: 22;
    MESA_DOZEN                    :: 23;
    MESA_NVK                      :: 24;
    IMAGINATION_OPEN_SOURCE_MESA  :: 25;
    AMD_PROPRIETARY_KHR           :: 1;
    AMD_OPEN_SOURCE_KHR           :: 2;
    MESA_RADV_KHR                 :: 3;
    NVIDIA_PROPRIETARY_KHR        :: 4;
    INTEL_PROPRIETARY_WINDOWS_KHR :: 5;
    INTEL_OPEN_SOURCE_MESA_KHR    :: 6;
    IMAGINATION_PROPRIETARY_KHR   :: 7;
    QUALCOMM_PROPRIETARY_KHR      :: 8;
    ARM_PROPRIETARY_KHR           :: 9;
    GOOGLE_SWIFTSHADER_KHR        :: 10;
    GGP_PROPRIETARY_KHR           :: 11;
    BROADCOM_PROPRIETARY_KHR      :: 12;
    MAX_ENUM                      :: 2147483647;

    VK_DRIVER_ID_AMD_PROPRIETARY               :: AMD_PROPRIETARY;
    VK_DRIVER_ID_AMD_OPEN_SOURCE               :: AMD_OPEN_SOURCE;
    VK_DRIVER_ID_MESA_RADV                     :: MESA_RADV;
    VK_DRIVER_ID_NVIDIA_PROPRIETARY            :: NVIDIA_PROPRIETARY;
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS     :: INTEL_PROPRIETARY_WINDOWS;
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA        :: INTEL_OPEN_SOURCE_MESA;
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY       :: IMAGINATION_PROPRIETARY;
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY          :: QUALCOMM_PROPRIETARY;
    VK_DRIVER_ID_ARM_PROPRIETARY               :: ARM_PROPRIETARY;
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER            :: GOOGLE_SWIFTSHADER;
    VK_DRIVER_ID_GGP_PROPRIETARY               :: GGP_PROPRIETARY;
    VK_DRIVER_ID_BROADCOM_PROPRIETARY          :: BROADCOM_PROPRIETARY;
    VK_DRIVER_ID_MESA_LLVMPIPE                 :: MESA_LLVMPIPE;
    VK_DRIVER_ID_MOLTENVK                      :: MOLTENVK;
    VK_DRIVER_ID_COREAVI_PROPRIETARY           :: COREAVI_PROPRIETARY;
    VK_DRIVER_ID_JUICE_PROPRIETARY             :: JUICE_PROPRIETARY;
    VK_DRIVER_ID_VERISILICON_PROPRIETARY       :: VERISILICON_PROPRIETARY;
    VK_DRIVER_ID_MESA_TURNIP                   :: MESA_TURNIP;
    VK_DRIVER_ID_MESA_V3DV                     :: MESA_V3DV;
    VK_DRIVER_ID_MESA_PANVK                    :: MESA_PANVK;
    VK_DRIVER_ID_SAMSUNG_PROPRIETARY           :: SAMSUNG_PROPRIETARY;
    VK_DRIVER_ID_MESA_VENUS                    :: MESA_VENUS;
    VK_DRIVER_ID_MESA_DOZEN                    :: MESA_DOZEN;
    VK_DRIVER_ID_MESA_NVK                      :: MESA_NVK;
    VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA  :: IMAGINATION_OPEN_SOURCE_MESA;
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR           :: AMD_PROPRIETARY_KHR;
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR           :: AMD_OPEN_SOURCE_KHR;
    VK_DRIVER_ID_MESA_RADV_KHR                 :: MESA_RADV_KHR;
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR        :: NVIDIA_PROPRIETARY_KHR;
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR :: INTEL_PROPRIETARY_WINDOWS_KHR;
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR    :: INTEL_OPEN_SOURCE_MESA_KHR;
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR   :: IMAGINATION_PROPRIETARY_KHR;
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR      :: QUALCOMM_PROPRIETARY_KHR;
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR           :: ARM_PROPRIETARY_KHR;
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR        :: GOOGLE_SWIFTSHADER_KHR;
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR           :: GGP_PROPRIETARY_KHR;
    VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR      :: BROADCOM_PROPRIETARY_KHR;
    VK_DRIVER_ID_MAX_ENUM                      :: MAX_ENUM;
}

ShaderFloatControlsIndependence :: enum u32 {
    _32_BIT_ONLY     :: 0;
    ALL              :: 1;
    NONE             :: 2;
    _32_BIT_ONLY_KHR :: 0;
    ALL_KHR          :: 1;
    NONE_KHR         :: 2;
    MAX_ENUM         :: 2147483647;

    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY     :: _32_BIT_ONLY;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL             :: ALL;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE            :: NONE;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR :: _32_BIT_ONLY_KHR;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR         :: ALL_KHR;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR        :: NONE_KHR;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM        :: MAX_ENUM;
}

SamplerReductionMode :: enum u32 {
    WEIGHTED_AVERAGE     :: 0;
    MIN                  :: 1;
    MAX                  :: 2;
    WEIGHTED_AVERAGE_EXT :: 0;
    MIN_EXT              :: 1;
    MAX_EXT              :: 2;
    MAX_ENUM             :: 2147483647;

    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE     :: WEIGHTED_AVERAGE;
    VK_SAMPLER_REDUCTION_MODE_MIN                  :: MIN;
    VK_SAMPLER_REDUCTION_MODE_MAX                  :: MAX;
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT :: WEIGHTED_AVERAGE_EXT;
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT              :: MIN_EXT;
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT              :: MAX_EXT;
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM             :: MAX_ENUM;
}

SemaphoreType :: enum u32 {
    BINARY       :: 0;
    TIMELINE     :: 1;
    BINARY_KHR   :: 0;
    TIMELINE_KHR :: 1;
    MAX_ENUM     :: 2147483647;

    VK_SEMAPHORE_TYPE_BINARY       :: BINARY;
    VK_SEMAPHORE_TYPE_TIMELINE     :: TIMELINE;
    VK_SEMAPHORE_TYPE_BINARY_KHR   :: BINARY_KHR;
    VK_SEMAPHORE_TYPE_TIMELINE_KHR :: TIMELINE_KHR;
    VK_SEMAPHORE_TYPE_MAX_ENUM     :: MAX_ENUM;
}

ResolveModeFlagBits :: enum_flags u32 {
    NONE               :: 0x0;
    SAMPLE_ZERO        :: 0x1;
    AVERAGE            :: 0x2;
    MIN                :: 0x4;
    MAX                :: 0x8;
    NONE_KHR           :: 0x0;
    SAMPLE_ZERO_KHR    :: 0x1;
    AVERAGE_KHR        :: 0x2;
    MIN_KHR            :: 0x4;
    MAX_KHR            :: 0x8;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_RESOLVE_MODE_NONE                :: NONE;
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT     :: SAMPLE_ZERO;
    VK_RESOLVE_MODE_AVERAGE_BIT         :: AVERAGE;
    VK_RESOLVE_MODE_MIN_BIT             :: MIN;
    VK_RESOLVE_MODE_MAX_BIT             :: MAX;
    VK_RESOLVE_MODE_NONE_KHR            :: NONE_KHR;
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR :: SAMPLE_ZERO_KHR;
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR     :: AVERAGE_KHR;
    VK_RESOLVE_MODE_MIN_BIT_KHR         :: MIN_KHR;
    VK_RESOLVE_MODE_MAX_BIT_KHR         :: MAX_KHR;
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM  :: FLAG_BITS_MAX_ENUM;
}

ResolveModeFlags :: ResolveModeFlagBits;

DescriptorBindingFlagBits :: enum_flags u32 {
    UPDATE_AFTER_BIND               :: 0x1;
    UPDATE_UNUSED_WHILE_PENDING     :: 0x2;
    PARTIALLY_BOUND                 :: 0x4;
    VARIABLE_DESCRIPTOR_COUNT       :: 0x8;
    UPDATE_AFTER_BIND_EXT           :: 0x1;
    UPDATE_UNUSED_WHILE_PENDING_EXT :: 0x2;
    PARTIALLY_BOUND_EXT             :: 0x4;
    VARIABLE_DESCRIPTOR_COUNT_EXT   :: 0x8;
    FLAG_BITS_MAX_ENUM              :: 0x7fffffff;

    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT               :: UPDATE_AFTER_BIND;
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT     :: UPDATE_UNUSED_WHILE_PENDING;
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT                 :: PARTIALLY_BOUND;
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT       :: VARIABLE_DESCRIPTOR_COUNT;
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT           :: UPDATE_AFTER_BIND_EXT;
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT :: UPDATE_UNUSED_WHILE_PENDING_EXT;
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT             :: PARTIALLY_BOUND_EXT;
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT   :: VARIABLE_DESCRIPTOR_COUNT_EXT;
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM                  :: FLAG_BITS_MAX_ENUM;
}

DescriptorBindingFlags :: DescriptorBindingFlagBits;

SemaphoreWaitFlagBits :: enum_flags u32 {
    ANY                :: 0x1;
    ANY_KHR            :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_SEMAPHORE_WAIT_ANY_BIT            :: ANY;
    VK_SEMAPHORE_WAIT_ANY_BIT_KHR        :: ANY_KHR;
    VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

SemaphoreWaitFlags :: SemaphoreWaitFlagBits;
PhysicalDeviceVulkan11Features :: struct {
    sType:                              StructureType = .PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
    pNext:                              *void;
    storageBuffer16BitAccess:           Bool32;
    uniformAndStorageBuffer16BitAccess: Bool32;
    storagePushConstant16:              Bool32;
    storageInputOutput16:               Bool32;
    multiview:                          Bool32;
    multiviewGeometryShader:            Bool32;
    multiviewTessellationShader:        Bool32;
    variablePointersStorageBuffer:      Bool32;
    variablePointers:                   Bool32;
    protectedMemory:                    Bool32;
    samplerYcbcrConversion:             Bool32;
    shaderDrawParameters:               Bool32;
}

PhysicalDeviceVulkan11Properties :: struct {
    sType:                             StructureType = .PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
    pNext:                             *void;
    deviceUUID:                        [16] u8;
    driverUUID:                        [16] u8;
    deviceLUID:                        [8] u8;
    deviceNodeMask:                    u32;
    deviceLUIDValid:                   Bool32;
    subgroupSize:                      u32;
    subgroupSupportedStages:           ShaderStageFlags;
    subgroupSupportedOperations:       SubgroupFeatureFlags;
    subgroupQuadOperationsInAllStages: Bool32;
    pointClippingBehavior:             PointClippingBehavior;
    maxMultiviewViewCount:             u32;
    maxMultiviewInstanceIndex:         u32;
    protectedNoFault:                  Bool32;
    maxPerSetDescriptors:              u32;
    maxMemoryAllocationSize:           DeviceSize;
}

PhysicalDeviceVulkan12Features :: struct {
    sType:                                              StructureType = .PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
    pNext:                                              *void;
    samplerMirrorClampToEdge:                           Bool32;
    drawIndirectCount:                                  Bool32;
    storageBuffer8BitAccess:                            Bool32;
    uniformAndStorageBuffer8BitAccess:                  Bool32;
    storagePushConstant8:                               Bool32;
    shaderBufferInt64Atomics:                           Bool32;
    shaderSharedInt64Atomics:                           Bool32;
    shaderFloat16:                                      Bool32;
    shaderInt8:                                         Bool32;
    descriptorIndexing:                                 Bool32;
    shaderInputAttachmentArrayDynamicIndexing:          Bool32;
    shaderUniformTexelBufferArrayDynamicIndexing:       Bool32;
    shaderStorageTexelBufferArrayDynamicIndexing:       Bool32;
    shaderUniformBufferArrayNonUniformIndexing:         Bool32;
    shaderSampledImageArrayNonUniformIndexing:          Bool32;
    shaderStorageBufferArrayNonUniformIndexing:         Bool32;
    shaderStorageImageArrayNonUniformIndexing:          Bool32;
    shaderInputAttachmentArrayNonUniformIndexing:       Bool32;
    shaderUniformTexelBufferArrayNonUniformIndexing:    Bool32;
    shaderStorageTexelBufferArrayNonUniformIndexing:    Bool32;
    descriptorBindingUniformBufferUpdateAfterBind:      Bool32;
    descriptorBindingSampledImageUpdateAfterBind:       Bool32;
    descriptorBindingStorageImageUpdateAfterBind:       Bool32;
    descriptorBindingStorageBufferUpdateAfterBind:      Bool32;
    descriptorBindingUniformTexelBufferUpdateAfterBind: Bool32;
    descriptorBindingStorageTexelBufferUpdateAfterBind: Bool32;
    descriptorBindingUpdateUnusedWhilePending:          Bool32;
    descriptorBindingPartiallyBound:                    Bool32;
    descriptorBindingVariableDescriptorCount:           Bool32;
    runtimeDescriptorArray:                             Bool32;
    samplerFilterMinmax:                                Bool32;
    scalarBlockLayout:                                  Bool32;
    imagelessFramebuffer:                               Bool32;
    uniformBufferStandardLayout:                        Bool32;
    shaderSubgroupExtendedTypes:                        Bool32;
    separateDepthStencilLayouts:                        Bool32;
    hostQueryReset:                                     Bool32;
    timelineSemaphore:                                  Bool32;
    bufferDeviceAddress:                                Bool32;
    bufferDeviceAddressCaptureReplay:                   Bool32;
    bufferDeviceAddressMultiDevice:                     Bool32;
    MemoryModel:                                        Bool32;
    MemoryModelDeviceScope:                             Bool32;
    MemoryModelAvailabilityVisibilityChains:            Bool32;
    shaderOutputViewportIndex:                          Bool32;
    shaderOutputLayer:                                  Bool32;
    subgroupBroadcastDynamicId:                         Bool32;
}

ConformanceVersion :: struct {
    major:    u8;
    minor:    u8;
    subminor: u8;
    patch:    u8;
}

PhysicalDeviceVulkan12Properties :: struct {
    sType:                                                StructureType = .PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
    pNext:                                                *void;
    driverID:                                             DriverId;
    driverName:                                           [256] u8;
    driverInfo:                                           [256] u8;
    conformanceVersion:                                   ConformanceVersion;
    denormBehaviorIndependence:                           ShaderFloatControlsIndependence;
    roundingModeIndependence:                             ShaderFloatControlsIndependence;
    shaderSignedZeroInfNanPreserveFloat16:                Bool32;
    shaderSignedZeroInfNanPreserveFloat32:                Bool32;
    shaderSignedZeroInfNanPreserveFloat64:                Bool32;
    shaderDenormPreserveFloat16:                          Bool32;
    shaderDenormPreserveFloat32:                          Bool32;
    shaderDenormPreserveFloat64:                          Bool32;
    shaderDenormFlushToZeroFloat16:                       Bool32;
    shaderDenormFlushToZeroFloat32:                       Bool32;
    shaderDenormFlushToZeroFloat64:                       Bool32;
    shaderRoundingModeRTEFloat16:                         Bool32;
    shaderRoundingModeRTEFloat32:                         Bool32;
    shaderRoundingModeRTEFloat64:                         Bool32;
    shaderRoundingModeRTZFloat16:                         Bool32;
    shaderRoundingModeRTZFloat32:                         Bool32;
    shaderRoundingModeRTZFloat64:                         Bool32;
    maxUpdateAfterBindDescriptorsInAllPools:              u32;
    shaderUniformBufferArrayNonUniformIndexingNative:     Bool32;
    shaderSampledImageArrayNonUniformIndexingNative:      Bool32;
    shaderStorageBufferArrayNonUniformIndexingNative:     Bool32;
    shaderStorageImageArrayNonUniformIndexingNative:      Bool32;
    shaderInputAttachmentArrayNonUniformIndexingNative:   Bool32;
    robustBufferAccessUpdateAfterBind:                    Bool32;
    quadDivergentImplicitLod:                             Bool32;
    maxPerStageDescriptorUpdateAfterBindSamplers:         u32;
    maxPerStageDescriptorUpdateAfterBindUniformBuffers:   u32;
    maxPerStageDescriptorUpdateAfterBindStorageBuffers:   u32;
    maxPerStageDescriptorUpdateAfterBindSampledImages:    u32;
    maxPerStageDescriptorUpdateAfterBindStorageImages:    u32;
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32;
    maxPerStageUpdateAfterBindResources:                  u32;
    maxDescriptorSetUpdateAfterBindSamplers:              u32;
    maxDescriptorSetUpdateAfterBindUniformBuffers:        u32;
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindStorageBuffers:        u32;
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindSampledImages:         u32;
    maxDescriptorSetUpdateAfterBindStorageImages:         u32;
    maxDescriptorSetUpdateAfterBindInputAttachments:      u32;
    supportedDepthResolveModes:                           ResolveModeFlags;
    supportedStencilResolveModes:                         ResolveModeFlags;
    independentResolveNone:                               Bool32;
    independentResolve:                                   Bool32;
    filterMinmaxSingleComponentFormats:                   Bool32;
    filterMinmaxImageComponentMapping:                    Bool32;
    maxTimelineSemaphoreValueDifference:                  u64;
    framebufferIntegerColorSampleCounts:                  SampleCountFlags;
}

ImageFormatListCreateInfo :: struct {
    sType:           StructureType = .IMAGE_FORMAT_LIST_CREATE_INFO;
    pNext:           *void;
    viewFormatCount: u32;
    pViewFormats:    *Format;
}

AttachmentDescription2 :: struct {
    sType:          StructureType = .ATTACHMENT_DESCRIPTION_2;
    pNext:          *void;
    flags:          AttachmentDescriptionFlags;
    format:         Format;
    samples:        SampleCountFlagBits;
    loadOp:         AttachmentLoadOp;
    storeOp:        AttachmentStoreOp;
    stencilLoadOp:  AttachmentLoadOp;
    stencilStoreOp: AttachmentStoreOp;
    initialLayout:  ImageLayout;
    finalLayout:    ImageLayout;
}

AttachmentReference2 :: struct {
    sType:      StructureType = .ATTACHMENT_REFERENCE_2;
    pNext:      *void;
    attachment: u32;
    layout:     ImageLayout;
    aspectMask: ImageAspectFlags;
}

SubpassDescription2 :: struct {
    sType:                   StructureType = .SUBPASS_DESCRIPTION_2;
    pNext:                   *void;
    flags:                   SubpassDescriptionFlags;
    pipelineBindPoint:       PipelineBindPoint;
    viewMask:                u32;
    inputAttachmentCount:    u32;
    pInputAttachments:       *AttachmentReference2;
    colorAttachmentCount:    u32;
    pColorAttachments:       *AttachmentReference2;
    pResolveAttachments:     *AttachmentReference2;
    pDepthStencilAttachment: *AttachmentReference2;
    preserveAttachmentCount: u32;
    pPreserveAttachments:    *u32;
}

SubpassDependency2 :: struct {
    sType:           StructureType = .SUBPASS_DEPENDENCY_2;
    pNext:           *void;
    srcSubpass:      u32;
    dstSubpass:      u32;
    srcStageMask:    PipelineStageFlags;
    dstStageMask:    PipelineStageFlags;
    srcAccessMask:   AccessFlags;
    dstAccessMask:   AccessFlags;
    dependencyFlags: DependencyFlags;
    viewOffset:      s32;
}

RenderPassCreateInfo2 :: struct {
    sType:                   StructureType = .RENDER_PASS_CREATE_INFO_2;
    pNext:                   *void;
    flags:                   RenderPassCreateFlags;
    attachmentCount:         u32;
    pAttachments:            *AttachmentDescription2;
    subpassCount:            u32;
    pSubpasses:              *SubpassDescription2;
    dependencyCount:         u32;
    pDependencies:           *SubpassDependency2;
    correlatedViewMaskCount: u32;
    pCorrelatedViewMasks:    *u32;
}

SubpassBeginInfo :: struct {
    sType:    StructureType = .SUBPASS_BEGIN_INFO;
    pNext:    *void;
    contents: SubpassContents;
}

SubpassEndInfo :: struct {
    sType: StructureType = .SUBPASS_END_INFO;
    pNext: *void;
}

PhysicalDevice8BitStorageFeatures :: struct {
    sType:                             StructureType = .PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
    pNext:                             *void;
    storageBuffer8BitAccess:           Bool32;
    uniformAndStorageBuffer8BitAccess: Bool32;
    storagePushConstant8:              Bool32;
}

PhysicalDeviceDriverProperties :: struct {
    sType:              StructureType = .PHYSICAL_DEVICE_DRIVER_PROPERTIES;
    pNext:              *void;
    driverID:           DriverId;
    driverName:         [256] u8;
    driverInfo:         [256] u8;
    conformanceVersion: ConformanceVersion;
}

PhysicalDeviceShaderAtomicInt64Features :: struct {
    sType:                    StructureType = .PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
    pNext:                    *void;
    shaderBufferInt64Atomics: Bool32;
    shaderSharedInt64Atomics: Bool32;
}

PhysicalDeviceShaderFloat16Int8Features :: struct {
    sType:         StructureType = .PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
    pNext:         *void;
    shaderFloat16: Bool32;
    shaderInt8:    Bool32;
}

PhysicalDeviceFloatControlsProperties :: struct {
    sType:                                 StructureType = .PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
    pNext:                                 *void;
    denormBehaviorIndependence:            ShaderFloatControlsIndependence;
    roundingModeIndependence:              ShaderFloatControlsIndependence;
    shaderSignedZeroInfNanPreserveFloat16: Bool32;
    shaderSignedZeroInfNanPreserveFloat32: Bool32;
    shaderSignedZeroInfNanPreserveFloat64: Bool32;
    shaderDenormPreserveFloat16:           Bool32;
    shaderDenormPreserveFloat32:           Bool32;
    shaderDenormPreserveFloat64:           Bool32;
    shaderDenormFlushToZeroFloat16:        Bool32;
    shaderDenormFlushToZeroFloat32:        Bool32;
    shaderDenormFlushToZeroFloat64:        Bool32;
    shaderRoundingModeRTEFloat16:          Bool32;
    shaderRoundingModeRTEFloat32:          Bool32;
    shaderRoundingModeRTEFloat64:          Bool32;
    shaderRoundingModeRTZFloat16:          Bool32;
    shaderRoundingModeRTZFloat32:          Bool32;
    shaderRoundingModeRTZFloat64:          Bool32;
}

DescriptorSetLayoutBindingFlagsCreateInfo :: struct {
    sType:         StructureType = .DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
    pNext:         *void;
    bindingCount:  u32;
    pBindingFlags: *DescriptorBindingFlags;
}

PhysicalDeviceDescriptorIndexingFeatures :: struct {
    sType:                                              StructureType = .PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
    pNext:                                              *void;
    shaderInputAttachmentArrayDynamicIndexing:          Bool32;
    shaderUniformTexelBufferArrayDynamicIndexing:       Bool32;
    shaderStorageTexelBufferArrayDynamicIndexing:       Bool32;
    shaderUniformBufferArrayNonUniformIndexing:         Bool32;
    shaderSampledImageArrayNonUniformIndexing:          Bool32;
    shaderStorageBufferArrayNonUniformIndexing:         Bool32;
    shaderStorageImageArrayNonUniformIndexing:          Bool32;
    shaderInputAttachmentArrayNonUniformIndexing:       Bool32;
    shaderUniformTexelBufferArrayNonUniformIndexing:    Bool32;
    shaderStorageTexelBufferArrayNonUniformIndexing:    Bool32;
    descriptorBindingUniformBufferUpdateAfterBind:      Bool32;
    descriptorBindingSampledImageUpdateAfterBind:       Bool32;
    descriptorBindingStorageImageUpdateAfterBind:       Bool32;
    descriptorBindingStorageBufferUpdateAfterBind:      Bool32;
    descriptorBindingUniformTexelBufferUpdateAfterBind: Bool32;
    descriptorBindingStorageTexelBufferUpdateAfterBind: Bool32;
    descriptorBindingUpdateUnusedWhilePending:          Bool32;
    descriptorBindingPartiallyBound:                    Bool32;
    descriptorBindingVariableDescriptorCount:           Bool32;
    runtimeDescriptorArray:                             Bool32;
}

PhysicalDeviceDescriptorIndexingProperties :: struct {
    sType:                                                StructureType = .PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
    pNext:                                                *void;
    maxUpdateAfterBindDescriptorsInAllPools:              u32;
    shaderUniformBufferArrayNonUniformIndexingNative:     Bool32;
    shaderSampledImageArrayNonUniformIndexingNative:      Bool32;
    shaderStorageBufferArrayNonUniformIndexingNative:     Bool32;
    shaderStorageImageArrayNonUniformIndexingNative:      Bool32;
    shaderInputAttachmentArrayNonUniformIndexingNative:   Bool32;
    robustBufferAccessUpdateAfterBind:                    Bool32;
    quadDivergentImplicitLod:                             Bool32;
    maxPerStageDescriptorUpdateAfterBindSamplers:         u32;
    maxPerStageDescriptorUpdateAfterBindUniformBuffers:   u32;
    maxPerStageDescriptorUpdateAfterBindStorageBuffers:   u32;
    maxPerStageDescriptorUpdateAfterBindSampledImages:    u32;
    maxPerStageDescriptorUpdateAfterBindStorageImages:    u32;
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32;
    maxPerStageUpdateAfterBindResources:                  u32;
    maxDescriptorSetUpdateAfterBindSamplers:              u32;
    maxDescriptorSetUpdateAfterBindUniformBuffers:        u32;
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindStorageBuffers:        u32;
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindSampledImages:         u32;
    maxDescriptorSetUpdateAfterBindStorageImages:         u32;
    maxDescriptorSetUpdateAfterBindInputAttachments:      u32;
}

DescriptorSetVariableDescriptorCountAllocateInfo :: struct {
    sType:              StructureType = .DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
    pNext:              *void;
    descriptorSetCount: u32;
    pDescriptorCounts:  *u32;
}

DescriptorSetVariableDescriptorCountLayoutSupport :: struct {
    sType:                      StructureType = .DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
    pNext:                      *void;
    maxVariableDescriptorCount: u32;
}

SubpassDescriptionDepthStencilResolve :: struct {
    sType:                          StructureType = .SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
    pNext:                          *void;
    depthResolveMode:               ResolveModeFlagBits;
    stencilResolveMode:             ResolveModeFlagBits;
    pDepthStencilResolveAttachment: *AttachmentReference2;
}

PhysicalDeviceDepthStencilResolveProperties :: struct {
    sType:                        StructureType = .PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
    pNext:                        *void;
    supportedDepthResolveModes:   ResolveModeFlags;
    supportedStencilResolveModes: ResolveModeFlags;
    independentResolveNone:       Bool32;
    independentResolve:           Bool32;
}

PhysicalDeviceScalarBlockLayoutFeatures :: struct {
    sType:             StructureType = .PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
    pNext:             *void;
    scalarBlockLayout: Bool32;
}

ImageStencilUsageCreateInfo :: struct {
    sType:        StructureType = .IMAGE_STENCIL_USAGE_CREATE_INFO;
    pNext:        *void;
    stencilUsage: ImageUsageFlags;
}

SamplerReductionModeCreateInfo :: struct {
    sType:         StructureType = .SAMPLER_REDUCTION_MODE_CREATE_INFO;
    pNext:         *void;
    reductionMode: SamplerReductionMode;
}

PhysicalDeviceSamplerFilterMinmaxProperties :: struct {
    sType:                              StructureType = .PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
    pNext:                              *void;
    filterMinmaxSingleComponentFormats: Bool32;
    filterMinmaxImageComponentMapping:  Bool32;
}

PhysicalDeviceVulkanMemoryModelFeatures :: struct {
    sType:                                   StructureType = .PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
    pNext:                                   *void;
    MemoryModel:                             Bool32;
    MemoryModelDeviceScope:                  Bool32;
    MemoryModelAvailabilityVisibilityChains: Bool32;
}

PhysicalDeviceImagelessFramebufferFeatures :: struct {
    sType:                StructureType = .PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
    pNext:                *void;
    imagelessFramebuffer: Bool32;
}

FramebufferAttachmentImageInfo :: struct {
    sType:           StructureType = .FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
    pNext:           *void;
    flags:           ImageCreateFlags;
    usage:           ImageUsageFlags;
    width:           u32;
    height:          u32;
    layerCount:      u32;
    viewFormatCount: u32;
    pViewFormats:    *Format;
}

FramebufferAttachmentsCreateInfo :: struct {
    sType:                    StructureType = .FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
    pNext:                    *void;
    attachmentImageInfoCount: u32;
    pAttachmentImageInfos:    *FramebufferAttachmentImageInfo;
}

RenderPassAttachmentBeginInfo :: struct {
    sType:           StructureType = .RENDER_PASS_ATTACHMENT_BEGIN_INFO;
    pNext:           *void;
    attachmentCount: u32;
    pAttachments:    *ImageView;
}

PhysicalDeviceUniformBufferStandardLayoutFeatures :: struct {
    sType:                       StructureType = .PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
    pNext:                       *void;
    uniformBufferStandardLayout: Bool32;
}

PhysicalDeviceShaderSubgroupExtendedTypesFeatures :: struct {
    sType:                       StructureType = .PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
    pNext:                       *void;
    shaderSubgroupExtendedTypes: Bool32;
}

PhysicalDeviceSeparateDepthStencilLayoutsFeatures :: struct {
    sType:                       StructureType = .PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
    pNext:                       *void;
    separateDepthStencilLayouts: Bool32;
}

AttachmentReferenceStencilLayout :: struct {
    sType:         StructureType = .ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
    pNext:         *void;
    stencilLayout: ImageLayout;
}

AttachmentDescriptionStencilLayout :: struct {
    sType:                StructureType = .ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
    pNext:                *void;
    stencilInitialLayout: ImageLayout;
    stencilFinalLayout:   ImageLayout;
}

PhysicalDeviceHostQueryResetFeatures :: struct {
    sType:          StructureType = .PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
    pNext:          *void;
    hostQueryReset: Bool32;
}

PhysicalDeviceTimelineSemaphoreFeatures :: struct {
    sType:             StructureType = .PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
    pNext:             *void;
    timelineSemaphore: Bool32;
}

PhysicalDeviceTimelineSemaphoreProperties :: struct {
    sType:                               StructureType = .PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
    pNext:                               *void;
    maxTimelineSemaphoreValueDifference: u64;
}

SemaphoreTypeCreateInfo :: struct {
    sType:         StructureType = .SEMAPHORE_TYPE_CREATE_INFO;
    pNext:         *void;
    semaphoreType: SemaphoreType;
    initialValue:  u64;
}

TimelineSemaphoreSubmitInfo :: struct {
    sType:                     StructureType = .TIMELINE_SEMAPHORE_SUBMIT_INFO;
    pNext:                     *void;
    waitSemaphoreValueCount:   u32;
    pWaitSemaphoreValues:      *u64;
    signalSemaphoreValueCount: u32;
    pSignalSemaphoreValues:    *u64;
}

SemaphoreWaitInfo :: struct {
    sType:          StructureType = .SEMAPHORE_WAIT_INFO;
    pNext:          *void;
    flags:          SemaphoreWaitFlags;
    semaphoreCount: u32;
    pSemaphores:    *Semaphore;
    pValues:        *u64;
}

SemaphoreSignalInfo :: struct {
    sType:     StructureType = .SEMAPHORE_SIGNAL_INFO;
    pNext:     *void;
    semaphore: Semaphore;
    value:     u64;
}

PhysicalDeviceBufferDeviceAddressFeatures :: struct {
    sType:                            StructureType = .PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
    pNext:                            *void;
    bufferDeviceAddress:              Bool32;
    bufferDeviceAddressCaptureReplay: Bool32;
    bufferDeviceAddressMultiDevice:   Bool32;
}

BufferDeviceAddressInfo :: struct {
    sType:  StructureType = .BUFFER_DEVICE_ADDRESS_INFO;
    pNext:  *void;
    buffer: Buffer;
}

BufferOpaqueCaptureAddressCreateInfo :: struct {
    sType:                StructureType = .BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
    pNext:                *void;
    opaqueCaptureAddress: u64;
}

MemoryOpaqueCaptureAddressAllocateInfo :: struct {
    sType:                StructureType = .MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
    pNext:                *void;
    opaqueCaptureAddress: u64;
}

DeviceMemoryOpaqueCaptureAddressInfo :: struct {
    sType:  StructureType = .DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
    pNext:  *void;
    memory: DeviceMemory;
}

PFN_vkCmdDrawIndirectCount :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;
PFN_vkCmdDrawIndexedIndirectCount :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;
PFN_vkCreateRenderPass2 :: #type (device: Device, pCreateInfo: *RenderPassCreateInfo2, pAllocator: *AllocationCallbacks, pRenderPass: *RenderPass) -> Result #c_call;
PFN_vkCmdBeginRenderPass2 :: #type (commandBuffer: CommandBuffer, pRenderPassBegin: *RenderPassBeginInfo, pSubpassBeginInfo: *SubpassBeginInfo) -> void #c_call;
PFN_vkCmdNextSubpass2 :: #type (commandBuffer: CommandBuffer, pSubpassBeginInfo: *SubpassBeginInfo, pSubpassEndInfo: *SubpassEndInfo) -> void #c_call;
PFN_vkCmdEndRenderPass2 :: #type (commandBuffer: CommandBuffer, pSubpassEndInfo: *SubpassEndInfo) -> void #c_call;
PFN_vkResetQueryPool :: #type (device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32) -> void #c_call;
PFN_vkGetSemaphoreCounterValue :: #type (device: Device, semaphore: Semaphore, pValue: *u64) -> Result #c_call;
PFN_vkWaitSemaphores :: #type (device: Device, pWaitInfo: *SemaphoreWaitInfo, timeout: u64) -> Result #c_call;
PFN_vkSignalSemaphore :: #type (device: Device, pSignalInfo: *SemaphoreSignalInfo) -> Result #c_call;
PFN_vkGetBufferDeviceAddress :: #type (device: Device, pInfo: *BufferDeviceAddressInfo) -> DeviceAddress #c_call;
PFN_vkGetBufferOpaqueCaptureAddress :: #type (device: Device, pInfo: *BufferDeviceAddressInfo) -> u64 #c_call;
PFN_vkGetDeviceMemoryOpaqueCaptureAddress :: #type (device: Device, pInfo: *DeviceMemoryOpaqueCaptureAddressInfo) -> u64 #c_call;

CmdDrawIndirectCount: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

CmdDrawIndexedIndirectCount: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

CreateRenderPass2: #type (device: Device, pCreateInfo: *RenderPassCreateInfo2, pAllocator: *AllocationCallbacks, pRenderPass: *RenderPass) -> Result #c_call;

CmdBeginRenderPass2: #type (commandBuffer: CommandBuffer, pRenderPassBegin: *RenderPassBeginInfo, pSubpassBeginInfo: *SubpassBeginInfo) -> void #c_call;

CmdNextSubpass2: #type (commandBuffer: CommandBuffer, pSubpassBeginInfo: *SubpassBeginInfo, pSubpassEndInfo: *SubpassEndInfo) -> void #c_call;

CmdEndRenderPass2: #type (commandBuffer: CommandBuffer, pSubpassEndInfo: *SubpassEndInfo) -> void #c_call;

ResetQueryPool: #type (device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32) -> void #c_call;

GetSemaphoreCounterValue: #type (device: Device, semaphore: Semaphore, pValue: *u64) -> Result #c_call;

WaitSemaphores: #type (device: Device, pWaitInfo: *SemaphoreWaitInfo, timeout: u64) -> Result #c_call;

SignalSemaphore: #type (device: Device, pSignalInfo: *SemaphoreSignalInfo) -> Result #c_call;

GetBufferDeviceAddress: #type (device: Device, pInfo: *BufferDeviceAddressInfo) -> DeviceAddress #c_call;

GetBufferOpaqueCaptureAddress: #type (device: Device, pInfo: *BufferDeviceAddressInfo) -> u64 #c_call;

GetDeviceMemoryOpaqueCaptureAddress: #type (device: Device, pInfo: *DeviceMemoryOpaqueCaptureAddressInfo) -> u64 #c_call;

Flags64 :: u64;
PrivateDataSlot_T :: struct {}
PrivateDataSlot :: *PrivateDataSlot_T;

PipelineCreationFeedbackFlagBits :: enum_flags u32 {
    VALID                              :: 0x1;
    APPLICATION_PIPELINE_CACHE_HIT     :: 0x2;
    BASE_PIPELINE_ACCELERATION         :: 0x4;
    VALID_EXT                          :: 0x1;
    APPLICATION_PIPELINE_CACHE_HIT_EXT :: 0x2;
    BASE_PIPELINE_ACCELERATION_EXT     :: 0x4;
    FLAG_BITS_MAX_ENUM                 :: 0x7fffffff;

    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT                              :: VALID;
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT     :: APPLICATION_PIPELINE_CACHE_HIT;
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT         :: BASE_PIPELINE_ACCELERATION;
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT                          :: VALID_EXT;
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT :: APPLICATION_PIPELINE_CACHE_HIT_EXT;
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT     :: BASE_PIPELINE_ACCELERATION_EXT;
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM                     :: FLAG_BITS_MAX_ENUM;
}

PipelineCreationFeedbackFlags :: PipelineCreationFeedbackFlagBits;

ToolPurposeFlagBits :: enum_flags u32 {
    VALIDATION              :: 0x1;
    PROFILING               :: 0x2;
    TRACING                 :: 0x4;
    ADDITIONAL_FEATURES     :: 0x8;
    MODIFYING_FEATURES      :: 0x10;
    DEBUG_REPORTING_EXT     :: 0x20;
    DEBUG_MARKERS_EXT       :: 0x40;
    VALIDATION_EXT          :: 0x1;
    PROFILING_EXT           :: 0x2;
    TRACING_EXT             :: 0x4;
    ADDITIONAL_FEATURES_EXT :: 0x8;
    MODIFYING_FEATURES_EXT  :: 0x10;
    FLAG_BITS_MAX_ENUM      :: 0x7fffffff;

    VK_TOOL_PURPOSE_VALIDATION_BIT              :: VALIDATION;
    VK_TOOL_PURPOSE_PROFILING_BIT               :: PROFILING;
    VK_TOOL_PURPOSE_TRACING_BIT                 :: TRACING;
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT     :: ADDITIONAL_FEATURES;
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT      :: MODIFYING_FEATURES;
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT     :: DEBUG_REPORTING_EXT;
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT       :: DEBUG_MARKERS_EXT;
    VK_TOOL_PURPOSE_VALIDATION_BIT_EXT          :: VALIDATION_EXT;
    VK_TOOL_PURPOSE_PROFILING_BIT_EXT           :: PROFILING_EXT;
    VK_TOOL_PURPOSE_TRACING_BIT_EXT             :: TRACING_EXT;
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT :: ADDITIONAL_FEATURES_EXT;
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT  :: MODIFYING_FEATURES_EXT;
    VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM          :: FLAG_BITS_MAX_ENUM;
}

ToolPurposeFlags :: ToolPurposeFlagBits;
PrivateDataSlotCreateFlags :: Flags;
PipelineStageFlags2 :: PipelineStageFlagBits2;

PipelineStageFlagBits2 :: enum_flags u64 {
    NONE                                 :: 0x0;
    NONE_KHR                             :: 0x0;
    TOP_OF_PIPE                          :: 0x1;
    TOP_OF_PIPE_KHR                      :: 0x1;
    DRAW_INDIRECT                        :: 0x2;
    DRAW_INDIRECT_KHR                    :: 0x2;
    VERTEX_INPUT                         :: 0x4;
    VERTEX_INPUT_KHR                     :: 0x4;
    VERTEX_SHADER                        :: 0x8;
    VERTEX_SHADER_KHR                    :: 0x8;
    TESSELLATION_CONTROL_SHADER          :: 0x10;
    TESSELLATION_CONTROL_SHADER_KHR      :: 0x10;
    TESSELLATION_EVALUATION_SHADER       :: 0x20;
    TESSELLATION_EVALUATION_SHADER_KHR   :: 0x20;
    GEOMETRY_SHADER                      :: 0x40;
    GEOMETRY_SHADER_KHR                  :: 0x40;
    FRAGMENT_SHADER                      :: 0x80;
    FRAGMENT_SHADER_KHR                  :: 0x80;
    EARLY_FRAGMENT_TESTS                 :: 0x100;
    EARLY_FRAGMENT_TESTS_KHR             :: 0x100;
    LATE_FRAGMENT_TESTS                  :: 0x200;
    LATE_FRAGMENT_TESTS_KHR              :: 0x200;
    COLOR_ATTACHMENT_OUTPUT              :: 0x400;
    COLOR_ATTACHMENT_OUTPUT_KHR          :: 0x400;
    COMPUTE_SHADER                       :: 0x800;
    COMPUTE_SHADER_KHR                   :: 0x800;
    ALL_TRANSFER                         :: 0x1000;
    ALL_TRANSFER_KHR                     :: 0x1000;
    TRANSFER                             :: 0x1000;
    TRANSFER_KHR                         :: 0x1000;
    BOTTOM_OF_PIPE                       :: 0x2000;
    BOTTOM_OF_PIPE_KHR                   :: 0x2000;
    HOST                                 :: 0x4000;
    HOST_KHR                             :: 0x4000;
    ALL_GRAPHICS                         :: 0x8000;
    ALL_GRAPHICS_KHR                     :: 0x8000;
    ALL_COMMANDS                         :: 0x10000;
    ALL_COMMANDS_KHR                     :: 0x10000;
    COPY                                 :: 0x100000000;
    COPY_KHR                             :: 0x100000000;
    RESOLVE                              :: 0x200000000;
    RESOLVE_KHR                          :: 0x200000000;
    BLIT                                 :: 0x400000000;
    BLIT_KHR                             :: 0x400000000;
    CLEAR                                :: 0x800000000;
    CLEAR_KHR                            :: 0x800000000;
    INDEX_INPUT                          :: 0x1000000000;
    INDEX_INPUT_KHR                      :: 0x1000000000;
    VERTEX_ATTRIBUTE_INPUT               :: 0x2000000000;
    VERTEX_ATTRIBUTE_INPUT_KHR           :: 0x2000000000;
    PRE_RASTERIZATION_SHADERS            :: 0x4000000000;
    PRE_RASTERIZATION_SHADERS_KHR        :: 0x4000000000;
    VIDEO_DECODE_KHR                     :: 0x4000000;
    TRANSFORM_FEEDBACK_EXT               :: 0x1000000;
    CONDITIONAL_RENDERING_EXT            :: 0x40000;
    COMMAND_PREPROCESS_NV                :: 0x20000;
    FRAGMENT_SHADING_RATE_ATTACHMENT_KHR :: 0x400000;
    SHADING_RATE_IMAGE_NV                :: 0x400000;
    ACCELERATION_STRUCTURE_BUILD_KHR     :: 0x2000000;
    RAY_TRACING_SHADER_KHR               :: 0x200000;
    RAY_TRACING_SHADER_NV                :: 0x200000;
    ACCELERATION_STRUCTURE_BUILD_NV      :: 0x2000000;
    FRAGMENT_DENSITY_PROCESS_EXT         :: 0x800000;
    TASK_SHADER_NV                       :: 0x80000;
    MESH_SHADER_NV                       :: 0x100000;
    TASK_SHADER_EXT                      :: 0x80000;
    MESH_SHADER_EXT                      :: 0x100000;
    SUBPASS_SHADING_HUAWEI               :: 0x8000000000;
    INVOCATION_MASK_HUAWEI               :: 0x10000000000;
    ACCELERATION_STRUCTURE_COPY_KHR      :: 0x10000000;
    MICROMAP_BUILD_EXT                   :: 0x40000000;
    CLUSTER_CULLING_SHADER_HUAWEI        :: 0x20000000000;
    OPTICAL_FLOW_NV                      :: 0x20000000;

    VK_PIPELINE_STAGE_2_NONE                                     :: NONE;
    VK_PIPELINE_STAGE_2_NONE_KHR                                 :: NONE_KHR;
    VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT                          :: TOP_OF_PIPE;
    VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR                      :: TOP_OF_PIPE_KHR;
    VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT                        :: DRAW_INDIRECT;
    VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR                    :: DRAW_INDIRECT_KHR;
    VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT                         :: VERTEX_INPUT;
    VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR                     :: VERTEX_INPUT_KHR;
    VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT                        :: VERTEX_SHADER;
    VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR                    :: VERTEX_SHADER_KHR;
    VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT          :: TESSELLATION_CONTROL_SHADER;
    VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR      :: TESSELLATION_CONTROL_SHADER_KHR;
    VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT       :: TESSELLATION_EVALUATION_SHADER;
    VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR   :: TESSELLATION_EVALUATION_SHADER_KHR;
    VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT                      :: GEOMETRY_SHADER;
    VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR                  :: GEOMETRY_SHADER_KHR;
    VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT                      :: FRAGMENT_SHADER;
    VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR                  :: FRAGMENT_SHADER_KHR;
    VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT                 :: EARLY_FRAGMENT_TESTS;
    VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR             :: EARLY_FRAGMENT_TESTS_KHR;
    VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT                  :: LATE_FRAGMENT_TESTS;
    VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR              :: LATE_FRAGMENT_TESTS_KHR;
    VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT              :: COLOR_ATTACHMENT_OUTPUT;
    VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR          :: COLOR_ATTACHMENT_OUTPUT_KHR;
    VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT                       :: COMPUTE_SHADER;
    VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR                   :: COMPUTE_SHADER_KHR;
    VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT                         :: ALL_TRANSFER;
    VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR                     :: ALL_TRANSFER_KHR;
    VK_PIPELINE_STAGE_2_TRANSFER_BIT                             :: TRANSFER;
    VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR                         :: TRANSFER_KHR;
    VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT                       :: BOTTOM_OF_PIPE;
    VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR                   :: BOTTOM_OF_PIPE_KHR;
    VK_PIPELINE_STAGE_2_HOST_BIT                                 :: HOST;
    VK_PIPELINE_STAGE_2_HOST_BIT_KHR                             :: HOST_KHR;
    VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT                         :: ALL_GRAPHICS;
    VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR                     :: ALL_GRAPHICS_KHR;
    VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT                         :: ALL_COMMANDS;
    VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR                     :: ALL_COMMANDS_KHR;
    VK_PIPELINE_STAGE_2_COPY_BIT                                 :: COPY;
    VK_PIPELINE_STAGE_2_COPY_BIT_KHR                             :: COPY_KHR;
    VK_PIPELINE_STAGE_2_RESOLVE_BIT                              :: RESOLVE;
    VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR                          :: RESOLVE_KHR;
    VK_PIPELINE_STAGE_2_BLIT_BIT                                 :: BLIT;
    VK_PIPELINE_STAGE_2_BLIT_BIT_KHR                             :: BLIT_KHR;
    VK_PIPELINE_STAGE_2_CLEAR_BIT                                :: CLEAR;
    VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR                            :: CLEAR_KHR;
    VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT                          :: INDEX_INPUT;
    VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR                      :: INDEX_INPUT_KHR;
    VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT               :: VERTEX_ATTRIBUTE_INPUT;
    VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR           :: VERTEX_ATTRIBUTE_INPUT_KHR;
    VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT            :: PRE_RASTERIZATION_SHADERS;
    VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR        :: PRE_RASTERIZATION_SHADERS_KHR;
    VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR                     :: VIDEO_DECODE_KHR;
    VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT               :: TRANSFORM_FEEDBACK_EXT;
    VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT            :: CONDITIONAL_RENDERING_EXT;
    VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV                :: COMMAND_PREPROCESS_NV;
    VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR :: FRAGMENT_SHADING_RATE_ATTACHMENT_KHR;
    VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV                :: SHADING_RATE_IMAGE_NV;
    VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR     :: ACCELERATION_STRUCTURE_BUILD_KHR;
    VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR               :: RAY_TRACING_SHADER_KHR;
    VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV                :: RAY_TRACING_SHADER_NV;
    VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV      :: ACCELERATION_STRUCTURE_BUILD_NV;
    VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT         :: FRAGMENT_DENSITY_PROCESS_EXT;
    VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV                       :: TASK_SHADER_NV;
    VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV                       :: MESH_SHADER_NV;
    VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT                      :: TASK_SHADER_EXT;
    VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT                      :: MESH_SHADER_EXT;
    VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI               :: SUBPASS_SHADING_HUAWEI;
    VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI               :: INVOCATION_MASK_HUAWEI;
    VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR      :: ACCELERATION_STRUCTURE_COPY_KHR;
    VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT                   :: MICROMAP_BUILD_EXT;
    VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI        :: CLUSTER_CULLING_SHADER_HUAWEI;
    VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV                      :: OPTICAL_FLOW_NV;
}

AccessFlags2 :: AccessFlagBits2;

AccessFlagBits2 :: enum_flags u64 {
    NONE                                      :: 0x0;
    NONE_KHR                                  :: 0x0;
    INDIRECT_COMMAND_READ                     :: 0x1;
    INDIRECT_COMMAND_READ_KHR                 :: 0x1;
    INDEX_READ                                :: 0x2;
    INDEX_READ_KHR                            :: 0x2;
    VERTEX_ATTRIBUTE_READ                     :: 0x4;
    VERTEX_ATTRIBUTE_READ_KHR                 :: 0x4;
    UNIFORM_READ                              :: 0x8;
    UNIFORM_READ_KHR                          :: 0x8;
    INPUT_ATTACHMENT_READ                     :: 0x10;
    INPUT_ATTACHMENT_READ_KHR                 :: 0x10;
    SHADER_READ                               :: 0x20;
    SHADER_READ_KHR                           :: 0x20;
    SHADER_WRITE                              :: 0x40;
    SHADER_WRITE_KHR                          :: 0x40;
    COLOR_ATTACHMENT_READ                     :: 0x80;
    COLOR_ATTACHMENT_READ_KHR                 :: 0x80;
    COLOR_ATTACHMENT_WRITE                    :: 0x100;
    COLOR_ATTACHMENT_WRITE_KHR                :: 0x100;
    DEPTH_STENCIL_ATTACHMENT_READ             :: 0x200;
    DEPTH_STENCIL_ATTACHMENT_READ_KHR         :: 0x200;
    DEPTH_STENCIL_ATTACHMENT_WRITE            :: 0x400;
    DEPTH_STENCIL_ATTACHMENT_WRITE_KHR        :: 0x400;
    TRANSFER_READ                             :: 0x800;
    TRANSFER_READ_KHR                         :: 0x800;
    TRANSFER_WRITE                            :: 0x1000;
    TRANSFER_WRITE_KHR                        :: 0x1000;
    HOST_READ                                 :: 0x2000;
    HOST_READ_KHR                             :: 0x2000;
    HOST_WRITE                                :: 0x4000;
    HOST_WRITE_KHR                            :: 0x4000;
    MEMORY_READ                               :: 0x8000;
    MEMORY_READ_KHR                           :: 0x8000;
    MEMORY_WRITE                              :: 0x10000;
    MEMORY_WRITE_KHR                          :: 0x10000;
    SHADER_SAMPLED_READ                       :: 0x100000000;
    SHADER_SAMPLED_READ_KHR                   :: 0x100000000;
    SHADER_STORAGE_READ                       :: 0x200000000;
    SHADER_STORAGE_READ_KHR                   :: 0x200000000;
    SHADER_STORAGE_WRITE                      :: 0x400000000;
    SHADER_STORAGE_WRITE_KHR                  :: 0x400000000;
    VIDEO_DECODE_READ_KHR                     :: 0x800000000;
    VIDEO_DECODE_WRITE_KHR                    :: 0x1000000000;
    TRANSFORM_FEEDBACK_WRITE_EXT              :: 0x2000000;
    TRANSFORM_FEEDBACK_COUNTER_READ_EXT       :: 0x4000000;
    TRANSFORM_FEEDBACK_COUNTER_WRITE_EXT      :: 0x8000000;
    CONDITIONAL_RENDERING_READ_EXT            :: 0x100000;
    COMMAND_PREPROCESS_READ_NV                :: 0x20000;
    COMMAND_PREPROCESS_WRITE_NV               :: 0x40000;
    FRAGMENT_SHADING_RATE_ATTACHMENT_READ_KHR :: 0x800000;
    SHADING_RATE_IMAGE_READ_NV                :: 0x800000;
    ACCELERATION_STRUCTURE_READ_KHR           :: 0x200000;
    ACCELERATION_STRUCTURE_WRITE_KHR          :: 0x400000;
    ACCELERATION_STRUCTURE_READ_NV            :: 0x200000;
    ACCELERATION_STRUCTURE_WRITE_NV           :: 0x400000;
    FRAGMENT_DENSITY_MAP_READ_EXT             :: 0x1000000;
    COLOR_ATTACHMENT_READ_NONCOHERENT_EXT     :: 0x80000;
    DESCRIPTOR_BUFFER_READ_EXT                :: 0x20000000000;
    INVOCATION_MASK_READ_HUAWEI               :: 0x8000000000;
    SHADER_BINDING_TABLE_READ_KHR             :: 0x10000000000;
    MICROMAP_READ_EXT                         :: 0x100000000000;
    MICROMAP_WRITE_EXT                        :: 0x200000000000;
    OPTICAL_FLOW_READ_NV                      :: 0x40000000000;
    OPTICAL_FLOW_WRITE_NV                     :: 0x80000000000;

    VK_ACCESS_2_NONE                                          :: NONE;
    VK_ACCESS_2_NONE_KHR                                      :: NONE_KHR;
    VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT                     :: INDIRECT_COMMAND_READ;
    VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR                 :: INDIRECT_COMMAND_READ_KHR;
    VK_ACCESS_2_INDEX_READ_BIT                                :: INDEX_READ;
    VK_ACCESS_2_INDEX_READ_BIT_KHR                            :: INDEX_READ_KHR;
    VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT                     :: VERTEX_ATTRIBUTE_READ;
    VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR                 :: VERTEX_ATTRIBUTE_READ_KHR;
    VK_ACCESS_2_UNIFORM_READ_BIT                              :: UNIFORM_READ;
    VK_ACCESS_2_UNIFORM_READ_BIT_KHR                          :: UNIFORM_READ_KHR;
    VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT                     :: INPUT_ATTACHMENT_READ;
    VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR                 :: INPUT_ATTACHMENT_READ_KHR;
    VK_ACCESS_2_SHADER_READ_BIT                               :: SHADER_READ;
    VK_ACCESS_2_SHADER_READ_BIT_KHR                           :: SHADER_READ_KHR;
    VK_ACCESS_2_SHADER_WRITE_BIT                              :: SHADER_WRITE;
    VK_ACCESS_2_SHADER_WRITE_BIT_KHR                          :: SHADER_WRITE_KHR;
    VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT                     :: COLOR_ATTACHMENT_READ;
    VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR                 :: COLOR_ATTACHMENT_READ_KHR;
    VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT                    :: COLOR_ATTACHMENT_WRITE;
    VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR                :: COLOR_ATTACHMENT_WRITE_KHR;
    VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT             :: DEPTH_STENCIL_ATTACHMENT_READ;
    VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR         :: DEPTH_STENCIL_ATTACHMENT_READ_KHR;
    VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT            :: DEPTH_STENCIL_ATTACHMENT_WRITE;
    VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR        :: DEPTH_STENCIL_ATTACHMENT_WRITE_KHR;
    VK_ACCESS_2_TRANSFER_READ_BIT                             :: TRANSFER_READ;
    VK_ACCESS_2_TRANSFER_READ_BIT_KHR                         :: TRANSFER_READ_KHR;
    VK_ACCESS_2_TRANSFER_WRITE_BIT                            :: TRANSFER_WRITE;
    VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR                        :: TRANSFER_WRITE_KHR;
    VK_ACCESS_2_HOST_READ_BIT                                 :: HOST_READ;
    VK_ACCESS_2_HOST_READ_BIT_KHR                             :: HOST_READ_KHR;
    VK_ACCESS_2_HOST_WRITE_BIT                                :: HOST_WRITE;
    VK_ACCESS_2_HOST_WRITE_BIT_KHR                            :: HOST_WRITE_KHR;
    VK_ACCESS_2_MEMORY_READ_BIT                               :: MEMORY_READ;
    VK_ACCESS_2_MEMORY_READ_BIT_KHR                           :: MEMORY_READ_KHR;
    VK_ACCESS_2_MEMORY_WRITE_BIT                              :: MEMORY_WRITE;
    VK_ACCESS_2_MEMORY_WRITE_BIT_KHR                          :: MEMORY_WRITE_KHR;
    VK_ACCESS_2_SHADER_SAMPLED_READ_BIT                       :: SHADER_SAMPLED_READ;
    VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR                   :: SHADER_SAMPLED_READ_KHR;
    VK_ACCESS_2_SHADER_STORAGE_READ_BIT                       :: SHADER_STORAGE_READ;
    VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR                   :: SHADER_STORAGE_READ_KHR;
    VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT                      :: SHADER_STORAGE_WRITE;
    VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR                  :: SHADER_STORAGE_WRITE_KHR;
    VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR                     :: VIDEO_DECODE_READ_KHR;
    VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR                    :: VIDEO_DECODE_WRITE_KHR;
    VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT              :: TRANSFORM_FEEDBACK_WRITE_EXT;
    VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT       :: TRANSFORM_FEEDBACK_COUNTER_READ_EXT;
    VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT      :: TRANSFORM_FEEDBACK_COUNTER_WRITE_EXT;
    VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT            :: CONDITIONAL_RENDERING_READ_EXT;
    VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV                :: COMMAND_PREPROCESS_READ_NV;
    VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV               :: COMMAND_PREPROCESS_WRITE_NV;
    VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR :: FRAGMENT_SHADING_RATE_ATTACHMENT_READ_KHR;
    VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV                :: SHADING_RATE_IMAGE_READ_NV;
    VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR           :: ACCELERATION_STRUCTURE_READ_KHR;
    VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR          :: ACCELERATION_STRUCTURE_WRITE_KHR;
    VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV            :: ACCELERATION_STRUCTURE_READ_NV;
    VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV           :: ACCELERATION_STRUCTURE_WRITE_NV;
    VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT             :: FRAGMENT_DENSITY_MAP_READ_EXT;
    VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT     :: COLOR_ATTACHMENT_READ_NONCOHERENT_EXT;
    VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT                :: DESCRIPTOR_BUFFER_READ_EXT;
    VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI               :: INVOCATION_MASK_READ_HUAWEI;
    VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR             :: SHADER_BINDING_TABLE_READ_KHR;
    VK_ACCESS_2_MICROMAP_READ_BIT_EXT                         :: MICROMAP_READ_EXT;
    VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT                        :: MICROMAP_WRITE_EXT;
    VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV                      :: OPTICAL_FLOW_READ_NV;
    VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV                     :: OPTICAL_FLOW_WRITE_NV;
}

SubmitFlagBits :: enum_flags u32 {
    PROTECTED          :: 0x1;
    PROTECTED_KHR      :: 0x1;
    FLAG_BITS_MAX_ENUM :: 0x7fffffff;

    VK_SUBMIT_PROTECTED_BIT      :: PROTECTED;
    VK_SUBMIT_PROTECTED_BIT_KHR  :: PROTECTED_KHR;
    VK_SUBMIT_FLAG_BITS_MAX_ENUM :: FLAG_BITS_MAX_ENUM;
}

SubmitFlags :: SubmitFlagBits;

RenderingFlagBits :: enum_flags u32 {
    CONTENTS_SECONDARY_COMMAND_BUFFERS     :: 0x1;
    SUSPENDING                             :: 0x2;
    RESUMING                               :: 0x4;
    ENABLE_LEGACY_DITHERING_EXT            :: 0x8;
    CONTENTS_SECONDARY_COMMAND_BUFFERS_KHR :: 0x1;
    SUSPENDING_KHR                         :: 0x2;
    RESUMING_KHR                           :: 0x4;
    FLAG_BITS_MAX_ENUM                     :: 0x7fffffff;

    VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT     :: CONTENTS_SECONDARY_COMMAND_BUFFERS;
    VK_RENDERING_SUSPENDING_BIT                             :: SUSPENDING;
    VK_RENDERING_RESUMING_BIT                               :: RESUMING;
    VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT            :: ENABLE_LEGACY_DITHERING_EXT;
    VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR :: CONTENTS_SECONDARY_COMMAND_BUFFERS_KHR;
    VK_RENDERING_SUSPENDING_BIT_KHR                         :: SUSPENDING_KHR;
    VK_RENDERING_RESUMING_BIT_KHR                           :: RESUMING_KHR;
    VK_RENDERING_FLAG_BITS_MAX_ENUM                         :: FLAG_BITS_MAX_ENUM;
}

RenderingFlags :: RenderingFlagBits;
FormatFeatureFlags2 :: FormatFeatureFlagBits2;

FormatFeatureFlagBits2 :: enum_flags u64 {
    SAMPLED_IMAGE                                                               :: 0x1;
    SAMPLED_IMAGE_KHR                                                           :: 0x1;
    STORAGE_IMAGE                                                               :: 0x2;
    STORAGE_IMAGE_KHR                                                           :: 0x2;
    STORAGE_IMAGE_ATOMIC                                                        :: 0x4;
    STORAGE_IMAGE_ATOMIC_KHR                                                    :: 0x4;
    UNIFORM_TEXEL_BUFFER                                                        :: 0x8;
    UNIFORM_TEXEL_BUFFER_KHR                                                    :: 0x8;
    STORAGE_TEXEL_BUFFER                                                        :: 0x10;
    STORAGE_TEXEL_BUFFER_KHR                                                    :: 0x10;
    STORAGE_TEXEL_BUFFER_ATOMIC                                                 :: 0x20;
    STORAGE_TEXEL_BUFFER_ATOMIC_KHR                                             :: 0x20;
    VERTEX_BUFFER                                                               :: 0x40;
    VERTEX_BUFFER_KHR                                                           :: 0x40;
    COLOR_ATTACHMENT                                                            :: 0x80;
    COLOR_ATTACHMENT_KHR                                                        :: 0x80;
    COLOR_ATTACHMENT_BLEND                                                      :: 0x100;
    COLOR_ATTACHMENT_BLEND_KHR                                                  :: 0x100;
    DEPTH_STENCIL_ATTACHMENT                                                    :: 0x200;
    DEPTH_STENCIL_ATTACHMENT_KHR                                                :: 0x200;
    BLIT_SRC                                                                    :: 0x400;
    BLIT_SRC_KHR                                                                :: 0x400;
    BLIT_DST                                                                    :: 0x800;
    BLIT_DST_KHR                                                                :: 0x800;
    SAMPLED_IMAGE_FILTER_LINEAR                                                 :: 0x1000;
    SAMPLED_IMAGE_FILTER_LINEAR_KHR                                             :: 0x1000;
    SAMPLED_IMAGE_FILTER_CUBIC                                                  :: 0x2000;
    SAMPLED_IMAGE_FILTER_CUBIC_EXT                                              :: 0x2000;
    TRANSFER_SRC                                                                :: 0x4000;
    TRANSFER_SRC_KHR                                                            :: 0x4000;
    TRANSFER_DST                                                                :: 0x8000;
    TRANSFER_DST_KHR                                                            :: 0x8000;
    SAMPLED_IMAGE_FILTER_MINMAX                                                 :: 0x10000;
    SAMPLED_IMAGE_FILTER_MINMAX_KHR                                             :: 0x10000;
    MIDPOINT_CHROMA_SAMPLES                                                     :: 0x20000;
    MIDPOINT_CHROMA_SAMPLES_KHR                                                 :: 0x20000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER                                :: 0x40000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_KHR                            :: 0x40000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER               :: 0x80000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_KHR           :: 0x80000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT               :: 0x100000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_KHR           :: 0x100000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE     :: 0x200000;
    SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_KHR :: 0x200000;
    DISJOINT                                                                    :: 0x400000;
    DISJOINT_KHR                                                                :: 0x400000;
    COSITED_CHROMA_SAMPLES                                                      :: 0x800000;
    COSITED_CHROMA_SAMPLES_KHR                                                  :: 0x800000;
    STORAGE_READ_WITHOUT_FORMAT                                                 :: 0x80000000;
    STORAGE_READ_WITHOUT_FORMAT_KHR                                             :: 0x80000000;
    STORAGE_WRITE_WITHOUT_FORMAT                                                :: 0x100000000;
    STORAGE_WRITE_WITHOUT_FORMAT_KHR                                            :: 0x100000000;
    SAMPLED_IMAGE_DEPTH_COMPARISON                                              :: 0x200000000;
    SAMPLED_IMAGE_DEPTH_COMPARISON_KHR                                          :: 0x200000000;
    VIDEO_DECODE_OUTPUT_KHR                                                     :: 0x2000000;
    VIDEO_DECODE_DPB_KHR                                                        :: 0x4000000;
    ACCELERATION_STRUCTURE_VERTEX_BUFFER_KHR                                    :: 0x20000000;
    FRAGMENT_DENSITY_MAP_EXT                                                    :: 0x1000000;
    FRAGMENT_SHADING_RATE_ATTACHMENT_KHR                                        :: 0x40000000;
    LINEAR_COLOR_ATTACHMENT_NV                                                  :: 0x4000000000;
    WEIGHT_IMAGE_QCOM                                                           :: 0x400000000;
    WEIGHT_SAMPLED_IMAGE_QCOM                                                   :: 0x800000000;
    BLOCK_MATCHING_QCOM                                                         :: 0x1000000000;
    BOX_FILTER_SAMPLED_QCOM                                                     :: 0x2000000000;
    OPTICAL_FLOW_IMAGE_NV                                                       :: 0x10000000000;
    OPTICAL_FLOW_VECTOR_NV                                                      :: 0x20000000000;
    OPTICAL_FLOW_COST_NV                                                        :: 0x40000000000;

    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT                                                               :: SAMPLED_IMAGE;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR                                                           :: SAMPLED_IMAGE_KHR;
    VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT                                                               :: STORAGE_IMAGE;
    VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR                                                           :: STORAGE_IMAGE_KHR;
    VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT                                                        :: STORAGE_IMAGE_ATOMIC;
    VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR                                                    :: STORAGE_IMAGE_ATOMIC_KHR;
    VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT                                                        :: UNIFORM_TEXEL_BUFFER;
    VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR                                                    :: UNIFORM_TEXEL_BUFFER_KHR;
    VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT                                                        :: STORAGE_TEXEL_BUFFER;
    VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR                                                    :: STORAGE_TEXEL_BUFFER_KHR;
    VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT                                                 :: STORAGE_TEXEL_BUFFER_ATOMIC;
    VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR                                             :: STORAGE_TEXEL_BUFFER_ATOMIC_KHR;
    VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT                                                               :: VERTEX_BUFFER;
    VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR                                                           :: VERTEX_BUFFER_KHR;
    VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT                                                            :: COLOR_ATTACHMENT;
    VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR                                                        :: COLOR_ATTACHMENT_KHR;
    VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT                                                      :: COLOR_ATTACHMENT_BLEND;
    VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR                                                  :: COLOR_ATTACHMENT_BLEND_KHR;
    VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT                                                    :: DEPTH_STENCIL_ATTACHMENT;
    VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR                                                :: DEPTH_STENCIL_ATTACHMENT_KHR;
    VK_FORMAT_FEATURE_2_BLIT_SRC_BIT                                                                    :: BLIT_SRC;
    VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR                                                                :: BLIT_SRC_KHR;
    VK_FORMAT_FEATURE_2_BLIT_DST_BIT                                                                    :: BLIT_DST;
    VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR                                                                :: BLIT_DST_KHR;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT                                                 :: SAMPLED_IMAGE_FILTER_LINEAR;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR                                             :: SAMPLED_IMAGE_FILTER_LINEAR_KHR;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT                                                  :: SAMPLED_IMAGE_FILTER_CUBIC;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT                                              :: SAMPLED_IMAGE_FILTER_CUBIC_EXT;
    VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT                                                                :: TRANSFER_SRC;
    VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR                                                            :: TRANSFER_SRC_KHR;
    VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT                                                                :: TRANSFER_DST;
    VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR                                                            :: TRANSFER_DST_KHR;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT                                                 :: SAMPLED_IMAGE_FILTER_MINMAX;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR                                             :: SAMPLED_IMAGE_FILTER_MINMAX_KHR;
    VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT                                                     :: MIDPOINT_CHROMA_SAMPLES;
    VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR                                                 :: MIDPOINT_CHROMA_SAMPLES_KHR;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT                                :: SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR                            :: SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_KHR;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT               :: SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR           :: SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_KHR;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT               :: SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR           :: SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_KHR;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT     :: SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR :: SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_KHR;
    VK_FORMAT_FEATURE_2_DISJOINT_BIT                                                                    :: DISJOINT;
    VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR                                                                :: DISJOINT_KHR;
    VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT                                                      :: COSITED_CHROMA_SAMPLES;
    VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR                                                  :: COSITED_CHROMA_SAMPLES_KHR;
    VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT                                                 :: STORAGE_READ_WITHOUT_FORMAT;
    VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR                                             :: STORAGE_READ_WITHOUT_FORMAT_KHR;
    VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT                                                :: STORAGE_WRITE_WITHOUT_FORMAT;
    VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR                                            :: STORAGE_WRITE_WITHOUT_FORMAT_KHR;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT                                              :: SAMPLED_IMAGE_DEPTH_COMPARISON;
    VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR                                          :: SAMPLED_IMAGE_DEPTH_COMPARISON_KHR;
    VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR                                                     :: VIDEO_DECODE_OUTPUT_KHR;
    VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR                                                        :: VIDEO_DECODE_DPB_KHR;
    VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR                                    :: ACCELERATION_STRUCTURE_VERTEX_BUFFER_KHR;
    VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT                                                    :: FRAGMENT_DENSITY_MAP_EXT;
    VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR                                        :: FRAGMENT_SHADING_RATE_ATTACHMENT_KHR;
    VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV                                                  :: LINEAR_COLOR_ATTACHMENT_NV;
    VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM                                                           :: WEIGHT_IMAGE_QCOM;
    VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM                                                   :: WEIGHT_SAMPLED_IMAGE_QCOM;
    VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM                                                         :: BLOCK_MATCHING_QCOM;
    VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM                                                     :: BOX_FILTER_SAMPLED_QCOM;
    VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV                                                       :: OPTICAL_FLOW_IMAGE_NV;
    VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV                                                      :: OPTICAL_FLOW_VECTOR_NV;
    VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV                                                        :: OPTICAL_FLOW_COST_NV;
}

PhysicalDeviceVulkan13Features :: struct {
    sType:                                              StructureType = .PHYSICAL_DEVICE_VULKAN_1_3_FEATURES;
    pNext:                                              *void;
    robustImageAccess:                                  Bool32;
    inlineUniformBlock:                                 Bool32;
    descriptorBindingInlineUniformBlockUpdateAfterBind: Bool32;
    pipelineCreationCacheControl:                       Bool32;
    privateData:                                        Bool32;
    shaderDemoteToHelperInvocation:                     Bool32;
    shaderTerminateInvocation:                          Bool32;
    subgroupSizeControl:                                Bool32;
    computeFullSubgroups:                               Bool32;
    synchronization2:                                   Bool32;
    textureCompressionASTC_HDR:                         Bool32;
    shaderZeroInitializeWorkgroupMemory:                Bool32;
    dynamicRendering:                                   Bool32;
    shaderIntegerDotProduct:                            Bool32;
    maintenance4:                                       Bool32;
}

PhysicalDeviceVulkan13Properties :: struct {
    sType:                                                                         StructureType = .PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES;
    pNext:                                                                         *void;
    minSubgroupSize:                                                               u32;
    maxSubgroupSize:                                                               u32;
    maxComputeWorkgroupSubgroups:                                                  u32;
    requiredSubgroupSizeStages:                                                    ShaderStageFlags;
    maxInlineUniformBlockSize:                                                     u32;
    maxPerStageDescriptorInlineUniformBlocks:                                      u32;
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks:                       u32;
    maxDescriptorSetInlineUniformBlocks:                                           u32;
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks:                            u32;
    maxInlineUniformTotalSize:                                                     u32;
    integerDotProduct8BitUnsignedAccelerated:                                      Bool32;
    integerDotProduct8BitSignedAccelerated:                                        Bool32;
    integerDotProduct8BitMixedSignednessAccelerated:                               Bool32;
    integerDotProduct4x8BitPackedUnsignedAccelerated:                              Bool32;
    integerDotProduct4x8BitPackedSignedAccelerated:                                Bool32;
    integerDotProduct4x8BitPackedMixedSignednessAccelerated:                       Bool32;
    integerDotProduct16BitUnsignedAccelerated:                                     Bool32;
    integerDotProduct16BitSignedAccelerated:                                       Bool32;
    integerDotProduct16BitMixedSignednessAccelerated:                              Bool32;
    integerDotProduct32BitUnsignedAccelerated:                                     Bool32;
    integerDotProduct32BitSignedAccelerated:                                       Bool32;
    integerDotProduct32BitMixedSignednessAccelerated:                              Bool32;
    integerDotProduct64BitUnsignedAccelerated:                                     Bool32;
    integerDotProduct64BitSignedAccelerated:                                       Bool32;
    integerDotProduct64BitMixedSignednessAccelerated:                              Bool32;
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated:                Bool32;
    integerDotProductAccumulatingSaturating8BitSignedAccelerated:                  Bool32;
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated:         Bool32;
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated:        Bool32;
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated:          Bool32;
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: Bool32;
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated:               Bool32;
    integerDotProductAccumulatingSaturating16BitSignedAccelerated:                 Bool32;
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated:        Bool32;
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated:               Bool32;
    integerDotProductAccumulatingSaturating32BitSignedAccelerated:                 Bool32;
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated:        Bool32;
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated:               Bool32;
    integerDotProductAccumulatingSaturating64BitSignedAccelerated:                 Bool32;
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated:        Bool32;
    storageTexelBufferOffsetAlignmentBytes:                                        DeviceSize;
    storageTexelBufferOffsetSingleTexelAlignment:                                  Bool32;
    uniformTexelBufferOffsetAlignmentBytes:                                        DeviceSize;
    uniformTexelBufferOffsetSingleTexelAlignment:                                  Bool32;
    maxBufferSize:                                                                 DeviceSize;
}

PipelineCreationFeedback :: struct {
    flags:    PipelineCreationFeedbackFlags;
    duration: u64;
}

PipelineCreationFeedbackCreateInfo :: struct {
    sType:                              StructureType = .PIPELINE_CREATION_FEEDBACK_CREATE_INFO;
    pNext:                              *void;
    pPipelineCreationFeedback:          *PipelineCreationFeedback;
    pipelineStageCreationFeedbackCount: u32;
    pPipelineStageCreationFeedbacks:    *PipelineCreationFeedback;
}

PhysicalDeviceShaderTerminateInvocationFeatures :: struct {
    sType:                     StructureType = .PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES;
    pNext:                     *void;
    shaderTerminateInvocation: Bool32;
}

PhysicalDeviceToolProperties :: struct {
    sType:       StructureType = .PHYSICAL_DEVICE_TOOL_PROPERTIES;
    pNext:       *void;
    name:        [256] u8;
    version:     [256] u8;
    purposes:    ToolPurposeFlags;
    description: [256] u8;
    layer:       [256] u8;
}

PhysicalDeviceShaderDemoteToHelperInvocationFeatures :: struct {
    sType:                          StructureType = .PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES;
    pNext:                          *void;
    shaderDemoteToHelperInvocation: Bool32;
}

PhysicalDevicePrivateDataFeatures :: struct {
    sType:       StructureType = .PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES;
    pNext:       *void;
    privateData: Bool32;
}

DevicePrivateDataCreateInfo :: struct {
    sType:                       StructureType = .DEVICE_PRIVATE_DATA_CREATE_INFO;
    pNext:                       *void;
    privateDataSlotRequestCount: u32;
}

PrivateDataSlotCreateInfo :: struct {
    sType: StructureType = .PRIVATE_DATA_SLOT_CREATE_INFO;
    pNext: *void;
    flags: PrivateDataSlotCreateFlags;
}

PhysicalDevicePipelineCreationCacheControlFeatures :: struct {
    sType:                        StructureType = .PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES;
    pNext:                        *void;
    pipelineCreationCacheControl: Bool32;
}

MemoryBarrier2 :: struct {
    sType:         StructureType = .MEMORY_BARRIER_2;
    pNext:         *void;
    srcStageMask:  PipelineStageFlags2;
    srcAccessMask: AccessFlags2;
    dstStageMask:  PipelineStageFlags2;
    dstAccessMask: AccessFlags2;
}

BufferMemoryBarrier2 :: struct {
    sType:               StructureType = .BUFFER_MEMORY_BARRIER_2;
    pNext:               *void;
    srcStageMask:        PipelineStageFlags2;
    srcAccessMask:       AccessFlags2;
    dstStageMask:        PipelineStageFlags2;
    dstAccessMask:       AccessFlags2;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    buffer:              Buffer;
    offset:              DeviceSize;
    size:                DeviceSize;
}

ImageMemoryBarrier2 :: struct {
    sType:               StructureType = .IMAGE_MEMORY_BARRIER_2;
    pNext:               *void;
    srcStageMask:        PipelineStageFlags2;
    srcAccessMask:       AccessFlags2;
    dstStageMask:        PipelineStageFlags2;
    dstAccessMask:       AccessFlags2;
    oldLayout:           ImageLayout;
    newLayout:           ImageLayout;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    image:               Image;
    subresourceRange:    ImageSubresourceRange;
}

DependencyInfo :: struct {
    sType:                    StructureType = .DEPENDENCY_INFO;
    pNext:                    *void;
    dependencyFlags:          DependencyFlags;
    memoryBarrierCount:       u32;
    pMemoryBarriers:          *MemoryBarrier2;
    bufferMemoryBarrierCount: u32;
    pBufferMemoryBarriers:    *BufferMemoryBarrier2;
    imageMemoryBarrierCount:  u32;
    pImageMemoryBarriers:     *ImageMemoryBarrier2;
}

SemaphoreSubmitInfo :: struct {
    sType:       StructureType = .SEMAPHORE_SUBMIT_INFO;
    pNext:       *void;
    semaphore:   Semaphore;
    value:       u64;
    stageMask:   PipelineStageFlags2;
    deviceIndex: u32;
}

CommandBufferSubmitInfo :: struct {
    sType:         StructureType = .COMMAND_BUFFER_SUBMIT_INFO;
    pNext:         *void;
    commandBuffer: CommandBuffer;
    deviceMask:    u32;
}

SubmitInfo2 :: struct {
    sType:                    StructureType = .SUBMIT_INFO_2;
    pNext:                    *void;
    flags:                    SubmitFlags;
    waitSemaphoreInfoCount:   u32;
    pWaitSemaphoreInfos:      *SemaphoreSubmitInfo;
    commandBufferInfoCount:   u32;
    pCommandBufferInfos:      *CommandBufferSubmitInfo;
    signalSemaphoreInfoCount: u32;
    pSignalSemaphoreInfos:    *SemaphoreSubmitInfo;
}

PhysicalDeviceSynchronization2Features :: struct {
    sType:            StructureType = .PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES;
    pNext:            *void;
    synchronization2: Bool32;
}

PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures :: struct {
    sType:                               StructureType = .PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES;
    pNext:                               *void;
    shaderZeroInitializeWorkgroupMemory: Bool32;
}

PhysicalDeviceImageRobustnessFeatures :: struct {
    sType:             StructureType = .PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES;
    pNext:             *void;
    robustImageAccess: Bool32;
}

BufferCopy2 :: struct {
    sType:     StructureType = .BUFFER_COPY_2;
    pNext:     *void;
    srcOffset: DeviceSize;
    dstOffset: DeviceSize;
    size:      DeviceSize;
}

CopyBufferInfo2 :: struct {
    sType:       StructureType = .COPY_BUFFER_INFO_2;
    pNext:       *void;
    srcBuffer:   Buffer;
    dstBuffer:   Buffer;
    regionCount: u32;
    pRegions:    *BufferCopy2;
}

ImageCopy2 :: struct {
    sType:          StructureType = .IMAGE_COPY_2;
    pNext:          *void;
    srcSubresource: ImageSubresourceLayers;
    srcOffset:      Offset3D;
    dstSubresource: ImageSubresourceLayers;
    dstOffset:      Offset3D;
    extent:         Extent3D;
}

CopyImageInfo2 :: struct {
    sType:          StructureType = .COPY_IMAGE_INFO_2;
    pNext:          *void;
    srcImage:       Image;
    srcImageLayout: ImageLayout;
    dstImage:       Image;
    dstImageLayout: ImageLayout;
    regionCount:    u32;
    pRegions:       *ImageCopy2;
}

BufferImageCopy2 :: struct {
    sType:             StructureType = .BUFFER_IMAGE_COPY_2;
    pNext:             *void;
    bufferOffset:      DeviceSize;
    bufferRowLength:   u32;
    bufferImageHeight: u32;
    imageSubresource:  ImageSubresourceLayers;
    imageOffset:       Offset3D;
    imageExtent:       Extent3D;
}

CopyBufferToImageInfo2 :: struct {
    sType:          StructureType = .COPY_BUFFER_TO_IMAGE_INFO_2;
    pNext:          *void;
    srcBuffer:      Buffer;
    dstImage:       Image;
    dstImageLayout: ImageLayout;
    regionCount:    u32;
    pRegions:       *BufferImageCopy2;
}

CopyImageToBufferInfo2 :: struct {
    sType:          StructureType = .COPY_IMAGE_TO_BUFFER_INFO_2;
    pNext:          *void;
    srcImage:       Image;
    srcImageLayout: ImageLayout;
    dstBuffer:      Buffer;
    regionCount:    u32;
    pRegions:       *BufferImageCopy2;
}

ImageBlit2 :: struct {
    sType:          StructureType = .IMAGE_BLIT_2;
    pNext:          *void;
    srcSubresource: ImageSubresourceLayers;
    srcOffsets:     [2] Offset3D;
    dstSubresource: ImageSubresourceLayers;
    dstOffsets:     [2] Offset3D;
}

BlitImageInfo2 :: struct {
    sType:          StructureType = .BLIT_IMAGE_INFO_2;
    pNext:          *void;
    srcImage:       Image;
    srcImageLayout: ImageLayout;
    dstImage:       Image;
    dstImageLayout: ImageLayout;
    regionCount:    u32;
    pRegions:       *ImageBlit2;
    filter:         Filter;
}

ImageResolve2 :: struct {
    sType:          StructureType = .IMAGE_RESOLVE_2;
    pNext:          *void;
    srcSubresource: ImageSubresourceLayers;
    srcOffset:      Offset3D;
    dstSubresource: ImageSubresourceLayers;
    dstOffset:      Offset3D;
    extent:         Extent3D;
}

ResolveImageInfo2 :: struct {
    sType:          StructureType = .RESOLVE_IMAGE_INFO_2;
    pNext:          *void;
    srcImage:       Image;
    srcImageLayout: ImageLayout;
    dstImage:       Image;
    dstImageLayout: ImageLayout;
    regionCount:    u32;
    pRegions:       *ImageResolve2;
}

PhysicalDeviceSubgroupSizeControlFeatures :: struct {
    sType:                StructureType = .PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES;
    pNext:                *void;
    subgroupSizeControl:  Bool32;
    computeFullSubgroups: Bool32;
}

PhysicalDeviceSubgroupSizeControlProperties :: struct {
    sType:                        StructureType = .PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES;
    pNext:                        *void;
    minSubgroupSize:              u32;
    maxSubgroupSize:              u32;
    maxComputeWorkgroupSubgroups: u32;
    requiredSubgroupSizeStages:   ShaderStageFlags;
}

PipelineShaderStageRequiredSubgroupSizeCreateInfo :: struct {
    sType:                StructureType = .PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO;
    pNext:                *void;
    requiredSubgroupSize: u32;
}

PhysicalDeviceInlineUniformBlockFeatures :: struct {
    sType:                                              StructureType = .PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES;
    pNext:                                              *void;
    inlineUniformBlock:                                 Bool32;
    descriptorBindingInlineUniformBlockUpdateAfterBind: Bool32;
}

PhysicalDeviceInlineUniformBlockProperties :: struct {
    sType:                                                   StructureType = .PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES;
    pNext:                                                   *void;
    maxInlineUniformBlockSize:                               u32;
    maxPerStageDescriptorInlineUniformBlocks:                u32;
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32;
    maxDescriptorSetInlineUniformBlocks:                     u32;
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks:      u32;
}

WriteDescriptorSetInlineUniformBlock :: struct {
    sType:    StructureType = .WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK;
    pNext:    *void;
    dataSize: u32;
    pData:    *void;
}

DescriptorPoolInlineUniformBlockCreateInfo :: struct {
    sType:                         StructureType = .DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO;
    pNext:                         *void;
    maxInlineUniformBlockBindings: u32;
}

PhysicalDeviceTextureCompressionASTCHDRFeatures :: struct {
    sType:                      StructureType = .PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES;
    pNext:                      *void;
    textureCompressionASTC_HDR: Bool32;
}

RenderingAttachmentInfo :: struct {
    sType:              StructureType = .RENDERING_ATTACHMENT_INFO;
    pNext:              *void;
    imageView:          ImageView;
    imageLayout:        ImageLayout;
    resolveMode:        ResolveModeFlagBits;
    resolveImageView:   ImageView;
    resolveImageLayout: ImageLayout;
    loadOp:             AttachmentLoadOp;
    storeOp:            AttachmentStoreOp;
    clearValue:         ClearValue;
}

RenderingInfo :: struct {
    sType:                StructureType = .RENDERING_INFO;
    pNext:                *void;
    flags:                RenderingFlags;
    renderArea:           Rect2D;
    layerCount:           u32;
    viewMask:             u32;
    colorAttachmentCount: u32;
    pColorAttachments:    *RenderingAttachmentInfo;
    pDepthAttachment:     *RenderingAttachmentInfo;
    pStencilAttachment:   *RenderingAttachmentInfo;
}

PipelineRenderingCreateInfo :: struct {
    sType:                   StructureType = .PIPELINE_RENDERING_CREATE_INFO;
    pNext:                   *void;
    viewMask:                u32;
    colorAttachmentCount:    u32;
    pColorAttachmentFormats: *Format;
    depthAttachmentFormat:   Format;
    stencilAttachmentFormat: Format;
}

PhysicalDeviceDynamicRenderingFeatures :: struct {
    sType:            StructureType = .PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES;
    pNext:            *void;
    dynamicRendering: Bool32;
}

CommandBufferInheritanceRenderingInfo :: struct {
    sType:                   StructureType = .COMMAND_BUFFER_INHERITANCE_RENDERING_INFO;
    pNext:                   *void;
    flags:                   RenderingFlags;
    viewMask:                u32;
    colorAttachmentCount:    u32;
    pColorAttachmentFormats: *Format;
    depthAttachmentFormat:   Format;
    stencilAttachmentFormat: Format;
    rasterizationSamples:    SampleCountFlagBits;
}

PhysicalDeviceShaderIntegerDotProductFeatures :: struct {
    sType:                   StructureType = .PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES;
    pNext:                   *void;
    shaderIntegerDotProduct: Bool32;
}

PhysicalDeviceShaderIntegerDotProductProperties :: struct {
    sType:                                                                         StructureType = .PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES;
    pNext:                                                                         *void;
    integerDotProduct8BitUnsignedAccelerated:                                      Bool32;
    integerDotProduct8BitSignedAccelerated:                                        Bool32;
    integerDotProduct8BitMixedSignednessAccelerated:                               Bool32;
    integerDotProduct4x8BitPackedUnsignedAccelerated:                              Bool32;
    integerDotProduct4x8BitPackedSignedAccelerated:                                Bool32;
    integerDotProduct4x8BitPackedMixedSignednessAccelerated:                       Bool32;
    integerDotProduct16BitUnsignedAccelerated:                                     Bool32;
    integerDotProduct16BitSignedAccelerated:                                       Bool32;
    integerDotProduct16BitMixedSignednessAccelerated:                              Bool32;
    integerDotProduct32BitUnsignedAccelerated:                                     Bool32;
    integerDotProduct32BitSignedAccelerated:                                       Bool32;
    integerDotProduct32BitMixedSignednessAccelerated:                              Bool32;
    integerDotProduct64BitUnsignedAccelerated:                                     Bool32;
    integerDotProduct64BitSignedAccelerated:                                       Bool32;
    integerDotProduct64BitMixedSignednessAccelerated:                              Bool32;
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated:                Bool32;
    integerDotProductAccumulatingSaturating8BitSignedAccelerated:                  Bool32;
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated:         Bool32;
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated:        Bool32;
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated:          Bool32;
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: Bool32;
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated:               Bool32;
    integerDotProductAccumulatingSaturating16BitSignedAccelerated:                 Bool32;
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated:        Bool32;
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated:               Bool32;
    integerDotProductAccumulatingSaturating32BitSignedAccelerated:                 Bool32;
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated:        Bool32;
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated:               Bool32;
    integerDotProductAccumulatingSaturating64BitSignedAccelerated:                 Bool32;
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated:        Bool32;
}

PhysicalDeviceTexelBufferAlignmentProperties :: struct {
    sType:                                        StructureType = .PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES;
    pNext:                                        *void;
    storageTexelBufferOffsetAlignmentBytes:       DeviceSize;
    storageTexelBufferOffsetSingleTexelAlignment: Bool32;
    uniformTexelBufferOffsetAlignmentBytes:       DeviceSize;
    uniformTexelBufferOffsetSingleTexelAlignment: Bool32;
}

FormatProperties3 :: struct {
    sType:                 StructureType = .FORMAT_PROPERTIES_3;
    pNext:                 *void;
    linearTilingFeatures:  FormatFeatureFlags2;
    optimalTilingFeatures: FormatFeatureFlags2;
    bufferFeatures:        FormatFeatureFlags2;
}

PhysicalDeviceMaintenance4Features :: struct {
    sType:        StructureType = .PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES;
    pNext:        *void;
    maintenance4: Bool32;
}

PhysicalDeviceMaintenance4Properties :: struct {
    sType:         StructureType = .PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES;
    pNext:         *void;
    maxBufferSize: DeviceSize;
}

DeviceBufferMemoryRequirements :: struct {
    sType:       StructureType = .DEVICE_BUFFER_MEMORY_REQUIREMENTS;
    pNext:       *void;
    pCreateInfo: *BufferCreateInfo;
}

DeviceImageMemoryRequirements :: struct {
    sType:       StructureType = .DEVICE_IMAGE_MEMORY_REQUIREMENTS;
    pNext:       *void;
    pCreateInfo: *ImageCreateInfo;
    planeAspect: ImageAspectFlagBits;
}

PFN_vkGetPhysicalDeviceToolProperties :: #type (physicalDevice: PhysicalDevice, pToolCount: *u32, pToolProperties: *PhysicalDeviceToolProperties) -> Result #c_call;
PFN_vkCreatePrivateDataSlot :: #type (device: Device, pCreateInfo: *PrivateDataSlotCreateInfo, pAllocator: *AllocationCallbacks, pPrivateDataSlot: *PrivateDataSlot) -> Result #c_call;
PFN_vkDestroyPrivateDataSlot :: #type (device: Device, privateDataSlot: PrivateDataSlot, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkSetPrivateData :: #type (device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlot, data: u64) -> Result #c_call;
PFN_vkGetPrivateData :: #type (device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlot, pData: *u64) -> void #c_call;
PFN_vkCmdSetEvent2 :: #type (commandBuffer: CommandBuffer, event: Event, pDependencyInfo: *DependencyInfo) -> void #c_call;
PFN_vkCmdResetEvent2 :: #type (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags2) -> void #c_call;
PFN_vkCmdWaitEvents2 :: #type (commandBuffer: CommandBuffer, eventCount: u32, pEvents: *Event, pDependencyInfos: *DependencyInfo) -> void #c_call;
PFN_vkCmdPipelineBarrier2 :: #type (commandBuffer: CommandBuffer, pDependencyInfo: *DependencyInfo) -> void #c_call;
PFN_vkCmdWriteTimestamp2 :: #type (commandBuffer: CommandBuffer, stage: PipelineStageFlags2, queryPool: QueryPool, query: u32) -> void #c_call;
PFN_vkQueueSubmit2 :: #type (queue: Queue, submitCount: u32, pSubmits: *SubmitInfo2, fence: Fence) -> Result #c_call;
PFN_vkCmdCopyBuffer2 :: #type (commandBuffer: CommandBuffer, pCopyBufferInfo: *CopyBufferInfo2) -> void #c_call;
PFN_vkCmdCopyImage2 :: #type (commandBuffer: CommandBuffer, pCopyImageInfo: *CopyImageInfo2) -> void #c_call;
PFN_vkCmdCopyBufferToImage2 :: #type (commandBuffer: CommandBuffer, pCopyBufferToImageInfo: *CopyBufferToImageInfo2) -> void #c_call;
PFN_vkCmdCopyImageToBuffer2 :: #type (commandBuffer: CommandBuffer, pCopyImageToBufferInfo: *CopyImageToBufferInfo2) -> void #c_call;
PFN_vkCmdBlitImage2 :: #type (commandBuffer: CommandBuffer, pBlitImageInfo: *BlitImageInfo2) -> void #c_call;
PFN_vkCmdResolveImage2 :: #type (commandBuffer: CommandBuffer, pResolveImageInfo: *ResolveImageInfo2) -> void #c_call;
PFN_vkCmdBeginRendering :: #type (commandBuffer: CommandBuffer, pRenderingInfo: *RenderingInfo) -> void #c_call;
PFN_vkCmdEndRendering :: #type (commandBuffer: CommandBuffer) -> void #c_call;
PFN_vkCmdSetCullMode :: #type (commandBuffer: CommandBuffer, cullMode: CullModeFlags) -> void #c_call;
PFN_vkCmdSetFrontFace :: #type (commandBuffer: CommandBuffer, frontFace: FrontFace) -> void #c_call;
PFN_vkCmdSetPrimitiveTopology :: #type (commandBuffer: CommandBuffer, primitiveTopology: PrimitiveTopology) -> void #c_call;
PFN_vkCmdSetViewportWithCount :: #type (commandBuffer: CommandBuffer, viewportCount: u32, pViewports: *Viewport) -> void #c_call;
PFN_vkCmdSetScissorWithCount :: #type (commandBuffer: CommandBuffer, scissorCount: u32, pScissors: *Rect2D) -> void #c_call;
PFN_vkCmdBindVertexBuffers2 :: #type (commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *Buffer, pOffsets: *DeviceSize, pSizes: *DeviceSize, pStrides: *DeviceSize) -> void #c_call;
PFN_vkCmdSetDepthTestEnable :: #type (commandBuffer: CommandBuffer, depthTestEnable: Bool32) -> void #c_call;
PFN_vkCmdSetDepthWriteEnable :: #type (commandBuffer: CommandBuffer, depthWriteEnable: Bool32) -> void #c_call;
PFN_vkCmdSetDepthCompareOp :: #type (commandBuffer: CommandBuffer, depthCompareOp: CompareOp) -> void #c_call;
PFN_vkCmdSetDepthBoundsTestEnable :: #type (commandBuffer: CommandBuffer, depthBoundsTestEnable: Bool32) -> void #c_call;
PFN_vkCmdSetStencilTestEnable :: #type (commandBuffer: CommandBuffer, stencilTestEnable: Bool32) -> void #c_call;
PFN_vkCmdSetStencilOp :: #type (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, failOp: StencilOp, passOp: StencilOp, depthFailOp: StencilOp, compareOp: CompareOp) -> void #c_call;
PFN_vkCmdSetRasterizerDiscardEnable :: #type (commandBuffer: CommandBuffer, rasterizerDiscardEnable: Bool32) -> void #c_call;
PFN_vkCmdSetDepthBiasEnable :: #type (commandBuffer: CommandBuffer, depthBiasEnable: Bool32) -> void #c_call;
PFN_vkCmdSetPrimitiveRestartEnable :: #type (commandBuffer: CommandBuffer, primitiveRestartEnable: Bool32) -> void #c_call;
PFN_vkGetDeviceBufferMemoryRequirements :: #type (device: Device, pInfo: *DeviceBufferMemoryRequirements, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;
PFN_vkGetDeviceImageMemoryRequirements :: #type (device: Device, pInfo: *DeviceImageMemoryRequirements, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;
PFN_vkGetDeviceImageSparseMemoryRequirements :: #type (device: Device, pInfo: *DeviceImageMemoryRequirements, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *SparseImageMemoryRequirements2) -> void #c_call;

GetPhysicalDeviceToolProperties: #type (physicalDevice: PhysicalDevice, pToolCount: *u32, pToolProperties: *PhysicalDeviceToolProperties) -> Result #c_call;

CreatePrivateDataSlot: #type (device: Device, pCreateInfo: *PrivateDataSlotCreateInfo, pAllocator: *AllocationCallbacks, pPrivateDataSlot: *PrivateDataSlot) -> Result #c_call;

DestroyPrivateDataSlot: #type (device: Device, privateDataSlot: PrivateDataSlot, pAllocator: *AllocationCallbacks) -> void #c_call;

SetPrivateData: #type (device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlot, data: u64) -> Result #c_call;

GetPrivateData: #type (device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlot, pData: *u64) -> void #c_call;

CmdSetEvent2: #type (commandBuffer: CommandBuffer, event: Event, pDependencyInfo: *DependencyInfo) -> void #c_call;

CmdResetEvent2: #type (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags2) -> void #c_call;

CmdWaitEvents2: #type (commandBuffer: CommandBuffer, eventCount: u32, pEvents: *Event, pDependencyInfos: *DependencyInfo) -> void #c_call;

CmdPipelineBarrier2: #type (commandBuffer: CommandBuffer, pDependencyInfo: *DependencyInfo) -> void #c_call;

CmdWriteTimestamp2: #type (commandBuffer: CommandBuffer, stage: PipelineStageFlags2, queryPool: QueryPool, query: u32) -> void #c_call;

QueueSubmit2: #type (queue: Queue, submitCount: u32, pSubmits: *SubmitInfo2, fence: Fence) -> Result #c_call;

CmdCopyBuffer2: #type (commandBuffer: CommandBuffer, pCopyBufferInfo: *CopyBufferInfo2) -> void #c_call;

CmdCopyImage2: #type (commandBuffer: CommandBuffer, pCopyImageInfo: *CopyImageInfo2) -> void #c_call;

CmdCopyBufferToImage2: #type (commandBuffer: CommandBuffer, pCopyBufferToImageInfo: *CopyBufferToImageInfo2) -> void #c_call;

CmdCopyImageToBuffer2: #type (commandBuffer: CommandBuffer, pCopyImageToBufferInfo: *CopyImageToBufferInfo2) -> void #c_call;

CmdBlitImage2: #type (commandBuffer: CommandBuffer, pBlitImageInfo: *BlitImageInfo2) -> void #c_call;

CmdResolveImage2: #type (commandBuffer: CommandBuffer, pResolveImageInfo: *ResolveImageInfo2) -> void #c_call;

CmdBeginRendering: #type (commandBuffer: CommandBuffer, pRenderingInfo: *RenderingInfo) -> void #c_call;

CmdEndRendering: #type (commandBuffer: CommandBuffer) -> void #c_call;

CmdSetCullMode: #type (commandBuffer: CommandBuffer, cullMode: CullModeFlags) -> void #c_call;

CmdSetFrontFace: #type (commandBuffer: CommandBuffer, frontFace: FrontFace) -> void #c_call;

CmdSetPrimitiveTopology: #type (commandBuffer: CommandBuffer, primitiveTopology: PrimitiveTopology) -> void #c_call;

CmdSetViewportWithCount: #type (commandBuffer: CommandBuffer, viewportCount: u32, pViewports: *Viewport) -> void #c_call;

CmdSetScissorWithCount: #type (commandBuffer: CommandBuffer, scissorCount: u32, pScissors: *Rect2D) -> void #c_call;

CmdBindVertexBuffers2: #type (commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *Buffer, pOffsets: *DeviceSize, pSizes: *DeviceSize, pStrides: *DeviceSize) -> void #c_call;

CmdSetDepthTestEnable: #type (commandBuffer: CommandBuffer, depthTestEnable: Bool32) -> void #c_call;

CmdSetDepthWriteEnable: #type (commandBuffer: CommandBuffer, depthWriteEnable: Bool32) -> void #c_call;

CmdSetDepthCompareOp: #type (commandBuffer: CommandBuffer, depthCompareOp: CompareOp) -> void #c_call;

CmdSetDepthBoundsTestEnable: #type (commandBuffer: CommandBuffer, depthBoundsTestEnable: Bool32) -> void #c_call;

CmdSetStencilTestEnable: #type (commandBuffer: CommandBuffer, stencilTestEnable: Bool32) -> void #c_call;

CmdSetStencilOp: #type (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, failOp: StencilOp, passOp: StencilOp, depthFailOp: StencilOp, compareOp: CompareOp) -> void #c_call;

CmdSetRasterizerDiscardEnable: #type (commandBuffer: CommandBuffer, rasterizerDiscardEnable: Bool32) -> void #c_call;

CmdSetDepthBiasEnable: #type (commandBuffer: CommandBuffer, depthBiasEnable: Bool32) -> void #c_call;

CmdSetPrimitiveRestartEnable: #type (commandBuffer: CommandBuffer, primitiveRestartEnable: Bool32) -> void #c_call;

GetDeviceBufferMemoryRequirements: #type (device: Device, pInfo: *DeviceBufferMemoryRequirements, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;

GetDeviceImageMemoryRequirements: #type (device: Device, pInfo: *DeviceImageMemoryRequirements, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;

GetDeviceImageSparseMemoryRequirements: #type (device: Device, pInfo: *DeviceImageMemoryRequirements, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *SparseImageMemoryRequirements2) -> void #c_call;

SurfaceKHR_T :: struct {}
SurfaceKHR :: *SurfaceKHR_T;

PresentModeKHR :: enum u32 {
    IMMEDIATE_KHR                 :: 0;
    MAILBOX_KHR                   :: 1;
    FIFO_KHR                      :: 2;
    FIFO_RELAXED_KHR              :: 3;
    SHARED_DEMAND_REFRESH_KHR     :: 1000111000;
    SHARED_CONTINUOUS_REFRESH_KHR :: 1000111001;
    MAX_ENUM_KHR                  :: 2147483647;

    VK_PRESENT_MODE_IMMEDIATE_KHR                 :: IMMEDIATE_KHR;
    VK_PRESENT_MODE_MAILBOX_KHR                   :: MAILBOX_KHR;
    VK_PRESENT_MODE_FIFO_KHR                      :: FIFO_KHR;
    VK_PRESENT_MODE_FIFO_RELAXED_KHR              :: FIFO_RELAXED_KHR;
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR     :: SHARED_DEMAND_REFRESH_KHR;
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR :: SHARED_CONTINUOUS_REFRESH_KHR;
    VK_PRESENT_MODE_MAX_ENUM_KHR                  :: MAX_ENUM_KHR;
}

ColorSpaceKHR :: enum u32 {
    SRGB_NONLINEAR_KHR          :: 0;
    DISPLAY_P3_NONLINEAR_EXT    :: 1000104001;
    EXTENDED_SRGB_LINEAR_EXT    :: 1000104002;
    DISPLAY_P3_LINEAR_EXT       :: 1000104003;
    DCI_P3_NONLINEAR_EXT        :: 1000104004;
    BT709_LINEAR_EXT            :: 1000104005;
    BT709_NONLINEAR_EXT         :: 1000104006;
    BT2020_LINEAR_EXT           :: 1000104007;
    HDR10_ST2084_EXT            :: 1000104008;
    DOLBYVISION_EXT             :: 1000104009;
    HDR10_HLG_EXT               :: 1000104010;
    ADOBERGB_LINEAR_EXT         :: 1000104011;
    ADOBERGB_NONLINEAR_EXT      :: 1000104012;
    PASS_THROUGH_EXT            :: 1000104013;
    EXTENDED_SRGB_NONLINEAR_EXT :: 1000104014;
    DISPLAY_NATIVE_AMD          :: 1000213000;

    DCI_P3_LINEAR_EXT           :: 1000104003;
    MAX_ENUM_KHR                :: 2147483647;

    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR          :: SRGB_NONLINEAR_KHR;
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT    :: DISPLAY_P3_NONLINEAR_EXT;
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT    :: EXTENDED_SRGB_LINEAR_EXT;
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT       :: DISPLAY_P3_LINEAR_EXT;
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT        :: DCI_P3_NONLINEAR_EXT;
    VK_COLOR_SPACE_BT709_LINEAR_EXT            :: BT709_LINEAR_EXT;
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT         :: BT709_NONLINEAR_EXT;
    VK_COLOR_SPACE_BT2020_LINEAR_EXT           :: BT2020_LINEAR_EXT;
    VK_COLOR_SPACE_HDR10_ST2084_EXT            :: HDR10_ST2084_EXT;
    VK_COLOR_SPACE_DOLBYVISION_EXT             :: DOLBYVISION_EXT;
    VK_COLOR_SPACE_HDR10_HLG_EXT               :: HDR10_HLG_EXT;
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT         :: ADOBERGB_LINEAR_EXT;
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT      :: ADOBERGB_NONLINEAR_EXT;
    VK_COLOR_SPACE_PASS_THROUGH_EXT            :: PASS_THROUGH_EXT;
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT :: EXTENDED_SRGB_NONLINEAR_EXT;
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD          :: DISPLAY_NATIVE_AMD;

    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT           :: DCI_P3_LINEAR_EXT;
    VK_COLOR_SPACE_MAX_ENUM_KHR                :: MAX_ENUM_KHR;
}

SurfaceTransformFlagBitsKHR :: enum_flags u32 {
    IDENTITY_KHR                     :: 0x1;
    ROTATE_90_KHR                    :: 0x2;
    ROTATE_180_KHR                   :: 0x4;
    ROTATE_270_KHR                   :: 0x8;
    HORIZONTAL_MIRROR_KHR            :: 0x10;
    HORIZONTAL_MIRROR_ROTATE_90_KHR  :: 0x20;
    HORIZONTAL_MIRROR_ROTATE_180_KHR :: 0x40;
    HORIZONTAL_MIRROR_ROTATE_270_KHR :: 0x80;
    INHERIT_KHR                      :: 0x100;
    FLAG_BITS_MAX_ENUM_KHR           :: 0x7fffffff;

    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR                     :: IDENTITY_KHR;
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR                    :: ROTATE_90_KHR;
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR                   :: ROTATE_180_KHR;
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR                   :: ROTATE_270_KHR;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR            :: HORIZONTAL_MIRROR_KHR;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR  :: HORIZONTAL_MIRROR_ROTATE_90_KHR;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR :: HORIZONTAL_MIRROR_ROTATE_180_KHR;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR :: HORIZONTAL_MIRROR_ROTATE_270_KHR;
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR                      :: INHERIT_KHR;
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR               :: FLAG_BITS_MAX_ENUM_KHR;
}

CompositeAlphaFlagBitsKHR :: enum_flags u32 {
    OPAQUE_KHR             :: 0x1;
    PRE_MULTIPLIED_KHR     :: 0x2;
    POST_MULTIPLIED_KHR    :: 0x4;
    INHERIT_KHR            :: 0x8;
    FLAG_BITS_MAX_ENUM_KHR :: 0x7fffffff;

    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR          :: OPAQUE_KHR;
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR  :: PRE_MULTIPLIED_KHR;
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR :: POST_MULTIPLIED_KHR;
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR         :: INHERIT_KHR;
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR  :: FLAG_BITS_MAX_ENUM_KHR;
}

CompositeAlphaFlagsKHR :: CompositeAlphaFlagBitsKHR;
SurfaceTransformFlagsKHR :: SurfaceTransformFlagBitsKHR;
SurfaceCapabilitiesKHR :: struct {
    minImageCount:           u32;
    maxImageCount:           u32;
    currentExtent:           Extent2D;
    minImageExtent:          Extent2D;
    maxImageExtent:          Extent2D;
    maxImageArrayLayers:     u32;
    supportedTransforms:     SurfaceTransformFlagsKHR;
    currentTransform:        SurfaceTransformFlagBitsKHR;
    supportedCompositeAlpha: CompositeAlphaFlagsKHR;
    supportedUsageFlags:     ImageUsageFlags;
}

SurfaceFormatKHR :: struct {
    format:     Format;
    colorSpace: ColorSpaceKHR;
}

PFN_vkDestroySurfaceKHR :: #type (instance: Instance, surface: SurfaceKHR, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkGetPhysicalDeviceSurfaceSupportKHR :: #type (physicalDevice: PhysicalDevice, queueFamilyIndex: u32, surface: SurfaceKHR, pSupported: *Bool32) -> Result #c_call;
PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR :: #type (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: *SurfaceCapabilitiesKHR) -> Result #c_call;
PFN_vkGetPhysicalDeviceSurfaceFormatsKHR :: #type (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceFormatCount: *u32, pSurfaceFormats: *SurfaceFormatKHR) -> Result #c_call;
PFN_vkGetPhysicalDeviceSurfacePresentModesKHR :: #type (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pPresentModeCount: *u32, pPresentModes: *PresentModeKHR) -> Result #c_call;

DestroySurfaceKHR: #type (instance: Instance, surface: SurfaceKHR, pAllocator: *AllocationCallbacks) -> void #c_call;

GetPhysicalDeviceSurfaceSupportKHR: #type (physicalDevice: PhysicalDevice, queueFamilyIndex: u32, surface: SurfaceKHR, pSupported: *Bool32) -> Result #c_call;

GetPhysicalDeviceSurfaceCapabilitiesKHR: #type (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: *SurfaceCapabilitiesKHR) -> Result #c_call;

GetPhysicalDeviceSurfaceFormatsKHR: #type (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceFormatCount: *u32, pSurfaceFormats: *SurfaceFormatKHR) -> Result #c_call;

GetPhysicalDeviceSurfacePresentModesKHR: #type (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pPresentModeCount: *u32, pPresentModes: *PresentModeKHR) -> Result #c_call;

SwapchainKHR_T :: struct {}
SwapchainKHR :: *SwapchainKHR_T;

SwapchainCreateFlagBitsKHR :: enum_flags u32 {
    SPLIT_INSTANCE_BIND_REGIONS_KHR :: 0x1;
    PROTECTED_KHR                   :: 0x2;
    MUTABLE_FORMAT_KHR              :: 0x4;
    DEFERRED_MEMORY_ALLOCATION_EXT  :: 0x8;
    FLAG_BITS_MAX_ENUM_KHR          :: 0x7fffffff;

    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR :: SPLIT_INSTANCE_BIND_REGIONS_KHR;
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR                   :: PROTECTED_KHR;
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR              :: MUTABLE_FORMAT_KHR;
    VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT  :: DEFERRED_MEMORY_ALLOCATION_EXT;
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR              :: FLAG_BITS_MAX_ENUM_KHR;
}

SwapchainCreateFlagsKHR :: SwapchainCreateFlagBitsKHR;

DeviceGroupPresentModeFlagBitsKHR :: enum_flags u32 {
    LOCAL_KHR              :: 0x1;
    REMOTE_KHR             :: 0x2;
    SUM_KHR                :: 0x4;
    LOCAL_MULTI_DEVICE_KHR :: 0x8;
    FLAG_BITS_MAX_ENUM_KHR :: 0x7fffffff;

    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR              :: LOCAL_KHR;
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR             :: REMOTE_KHR;
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR                :: SUM_KHR;
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR :: LOCAL_MULTI_DEVICE_KHR;
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR     :: FLAG_BITS_MAX_ENUM_KHR;
}

DeviceGroupPresentModeFlagsKHR :: DeviceGroupPresentModeFlagBitsKHR;
SwapchainCreateInfoKHR :: struct {
    sType:                 StructureType = .SWAPCHAIN_CREATE_INFO_KHR;
    pNext:                 *void;
    flags:                 SwapchainCreateFlagsKHR;
    surface:               SurfaceKHR;
    minImageCount:         u32;
    imageFormat:           Format;
    imageColorSpace:       ColorSpaceKHR;
    imageExtent:           Extent2D;
    imageArrayLayers:      u32;
    imageUsage:            ImageUsageFlags;
    imageSharingMode:      SharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices:   *u32;
    preTransform:          SurfaceTransformFlagBitsKHR;
    compositeAlpha:        CompositeAlphaFlagBitsKHR;
    presentMode:           PresentModeKHR;
    clipped:               Bool32;
    oldSwapchain:          SwapchainKHR;
}

PresentInfoKHR :: struct {
    sType:              StructureType = .PRESENT_INFO_KHR;
    pNext:              *void;
    waitSemaphoreCount: u32;
    pWaitSemaphores:    *Semaphore;
    swapchainCount:     u32;
    pSwapchains:        *SwapchainKHR;
    pImageIndices:      *u32;
    pResults:           *Result;
}

ImageSwapchainCreateInfoKHR :: struct {
    sType:     StructureType = .IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
    pNext:     *void;
    swapchain: SwapchainKHR;
}

BindImageMemorySwapchainInfoKHR :: struct {
    sType:      StructureType = .BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
    pNext:      *void;
    swapchain:  SwapchainKHR;
    imageIndex: u32;
}

AcquireNextImageInfoKHR :: struct {
    sType:      StructureType = .ACQUIRE_NEXT_IMAGE_INFO_KHR;
    pNext:      *void;
    swapchain:  SwapchainKHR;
    timeout:    u64;
    semaphore:  Semaphore;
    fence:      Fence;
    deviceMask: u32;
}

DeviceGroupPresentCapabilitiesKHR :: struct {
    sType:       StructureType = .DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
    pNext:       *void;
    presentMask: [32] u32;
    modes:       DeviceGroupPresentModeFlagsKHR;
}

DeviceGroupPresentInfoKHR :: struct {
    sType:          StructureType = .DEVICE_GROUP_PRESENT_INFO_KHR;
    pNext:          *void;
    swapchainCount: u32;
    pDeviceMasks:   *u32;
    mode:           DeviceGroupPresentModeFlagBitsKHR;
}

DeviceGroupSwapchainCreateInfoKHR :: struct {
    sType: StructureType = .DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
    pNext: *void;
    modes: DeviceGroupPresentModeFlagsKHR;
}

PFN_vkCreateSwapchainKHR :: #type (device: Device, pCreateInfo: *SwapchainCreateInfoKHR, pAllocator: *AllocationCallbacks, pSwapchain: *SwapchainKHR) -> Result #c_call;
PFN_vkDestroySwapchainKHR :: #type (device: Device, swapchain: SwapchainKHR, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkGetSwapchainImagesKHR :: #type (device: Device, swapchain: SwapchainKHR, pSwapchainImageCount: *u32, pSwapchainImages: *Image) -> Result #c_call;
PFN_vkAcquireNextImageKHR :: #type (device: Device, swapchain: SwapchainKHR, timeout: u64, semaphore: Semaphore, fence: Fence, pImageIndex: *u32) -> Result #c_call;
PFN_vkQueuePresentKHR :: #type (queue: Queue, pPresentInfo: *PresentInfoKHR) -> Result #c_call;
PFN_vkGetDeviceGroupPresentCapabilitiesKHR :: #type (device: Device, pDeviceGroupPresentCapabilities: *DeviceGroupPresentCapabilitiesKHR) -> Result #c_call;
PFN_vkGetDeviceGroupSurfacePresentModesKHR :: #type (device: Device, surface: SurfaceKHR, pModes: *DeviceGroupPresentModeFlagsKHR) -> Result #c_call;
PFN_vkGetPhysicalDevicePresentRectanglesKHR :: #type (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pRectCount: *u32, pRects: *Rect2D) -> Result #c_call;
PFN_vkAcquireNextImage2KHR :: #type (device: Device, pAcquireInfo: *AcquireNextImageInfoKHR, pImageIndex: *u32) -> Result #c_call;

CreateSwapchainKHR: #type (device: Device, pCreateInfo: *SwapchainCreateInfoKHR, pAllocator: *AllocationCallbacks, pSwapchain: *SwapchainKHR) -> Result #c_call;

DestroySwapchainKHR: #type (device: Device, swapchain: SwapchainKHR, pAllocator: *AllocationCallbacks) -> void #c_call;

GetSwapchainImagesKHR: #type (device: Device, swapchain: SwapchainKHR, pSwapchainImageCount: *u32, pSwapchainImages: *Image) -> Result #c_call;

AcquireNextImageKHR: #type (device: Device, swapchain: SwapchainKHR, timeout: u64, semaphore: Semaphore, fence: Fence, pImageIndex: *u32) -> Result #c_call;

QueuePresentKHR: #type (queue: Queue, pPresentInfo: *PresentInfoKHR) -> Result #c_call;

GetDeviceGroupPresentCapabilitiesKHR: #type (device: Device, pDeviceGroupPresentCapabilities: *DeviceGroupPresentCapabilitiesKHR) -> Result #c_call;

GetDeviceGroupSurfacePresentModesKHR: #type (device: Device, surface: SurfaceKHR, pModes: *DeviceGroupPresentModeFlagsKHR) -> Result #c_call;

GetPhysicalDevicePresentRectanglesKHR: #type (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pRectCount: *u32, pRects: *Rect2D) -> Result #c_call;

AcquireNextImage2KHR: #type (device: Device, pAcquireInfo: *AcquireNextImageInfoKHR, pImageIndex: *u32) -> Result #c_call;

DisplayKHR_T :: struct {}
DisplayKHR :: *DisplayKHR_T;
DisplayModeKHR_T :: struct {}
DisplayModeKHR :: *DisplayModeKHR_T;

DisplayModeCreateFlagsKHR :: Flags;

DisplayPlaneAlphaFlagBitsKHR :: enum_flags u32 {
    OPAQUE_KHR                  :: 0x1;
    GLOBAL_KHR                  :: 0x2;
    PER_PIXEL_KHR               :: 0x4;
    PER_PIXEL_PREMULTIPLIED_KHR :: 0x8;
    FLAG_BITS_MAX_ENUM_KHR      :: 0x7fffffff;

    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR                  :: OPAQUE_KHR;
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR                  :: GLOBAL_KHR;
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR               :: PER_PIXEL_KHR;
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR :: PER_PIXEL_PREMULTIPLIED_KHR;
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR          :: FLAG_BITS_MAX_ENUM_KHR;
}

DisplayPlaneAlphaFlagsKHR :: DisplayPlaneAlphaFlagBitsKHR;
DisplaySurfaceCreateFlagsKHR :: Flags;
DisplayModeParametersKHR :: struct {
    visibleRegion: Extent2D;
    refreshRate:   u32;
}

DisplayModeCreateInfoKHR :: struct {
    sType:      StructureType = .DISPLAY_MODE_CREATE_INFO_KHR;
    pNext:      *void;
    flags:      DisplayModeCreateFlagsKHR;
    parameters: DisplayModeParametersKHR;
}

DisplayModePropertiesKHR :: struct {
    displayMode: DisplayModeKHR;
    parameters:  DisplayModeParametersKHR;
}

DisplayPlaneCapabilitiesKHR :: struct {
    supportedAlpha: DisplayPlaneAlphaFlagsKHR;
    minSrcPosition: Offset2D;
    maxSrcPosition: Offset2D;
    minSrcExtent:   Extent2D;
    maxSrcExtent:   Extent2D;
    minDstPosition: Offset2D;
    maxDstPosition: Offset2D;
    minDstExtent:   Extent2D;
    maxDstExtent:   Extent2D;
}

DisplayPlanePropertiesKHR :: struct {
    currentDisplay:    DisplayKHR;
    currentStackIndex: u32;
}

DisplayPropertiesKHR :: struct {
    display:              DisplayKHR;
    displayName:          *u8;
    physicalDimensions:   Extent2D;
    physicalResolution:   Extent2D;
    supportedTransforms:  SurfaceTransformFlagsKHR;
    planeReorderPossible: Bool32;
    persistentContent:    Bool32;
}

DisplaySurfaceCreateInfoKHR :: struct {
    sType:           StructureType = .DISPLAY_SURFACE_CREATE_INFO_KHR;
    pNext:           *void;
    flags:           DisplaySurfaceCreateFlagsKHR;
    displayMode:     DisplayModeKHR;
    planeIndex:      u32;
    planeStackIndex: u32;
    transform:       SurfaceTransformFlagBitsKHR;
    globalAlpha:     float;
    alphaMode:       DisplayPlaneAlphaFlagBitsKHR;
    imageExtent:     Extent2D;
}

PFN_vkGetPhysicalDeviceDisplayPropertiesKHR :: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *DisplayPropertiesKHR) -> Result #c_call;
PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR :: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *DisplayPlanePropertiesKHR) -> Result #c_call;
PFN_vkGetDisplayPlaneSupportedDisplaysKHR :: #type (physicalDevice: PhysicalDevice, planeIndex: u32, pDisplayCount: *u32, pDisplays: *DisplayKHR) -> Result #c_call;
PFN_vkGetDisplayModePropertiesKHR :: #type (physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: *u32, pProperties: *DisplayModePropertiesKHR) -> Result #c_call;
PFN_vkCreateDisplayModeKHR :: #type (physicalDevice: PhysicalDevice, display: DisplayKHR, pCreateInfo: *DisplayModeCreateInfoKHR, pAllocator: *AllocationCallbacks, pMode: *DisplayModeKHR) -> Result #c_call;
PFN_vkGetDisplayPlaneCapabilitiesKHR :: #type (physicalDevice: PhysicalDevice, mode: DisplayModeKHR, planeIndex: u32, pCapabilities: *DisplayPlaneCapabilitiesKHR) -> Result #c_call;
PFN_vkCreateDisplayPlaneSurfaceKHR :: #type (instance: Instance, pCreateInfo: *DisplaySurfaceCreateInfoKHR, pAllocator: *AllocationCallbacks, pSurface: *SurfaceKHR) -> Result #c_call;

GetPhysicalDeviceDisplayPropertiesKHR: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *DisplayPropertiesKHR) -> Result #c_call;

GetPhysicalDeviceDisplayPlanePropertiesKHR: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *DisplayPlanePropertiesKHR) -> Result #c_call;

GetDisplayPlaneSupportedDisplaysKHR: #type (physicalDevice: PhysicalDevice, planeIndex: u32, pDisplayCount: *u32, pDisplays: *DisplayKHR) -> Result #c_call;

GetDisplayModePropertiesKHR: #type (physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: *u32, pProperties: *DisplayModePropertiesKHR) -> Result #c_call;

CreateDisplayModeKHR: #type (physicalDevice: PhysicalDevice, display: DisplayKHR, pCreateInfo: *DisplayModeCreateInfoKHR, pAllocator: *AllocationCallbacks, pMode: *DisplayModeKHR) -> Result #c_call;

GetDisplayPlaneCapabilitiesKHR: #type (physicalDevice: PhysicalDevice, mode: DisplayModeKHR, planeIndex: u32, pCapabilities: *DisplayPlaneCapabilitiesKHR) -> Result #c_call;

CreateDisplayPlaneSurfaceKHR: #type (instance: Instance, pCreateInfo: *DisplaySurfaceCreateInfoKHR, pAllocator: *AllocationCallbacks, pSurface: *SurfaceKHR) -> Result #c_call;

DisplayPresentInfoKHR :: struct {
    sType:      StructureType = .DISPLAY_PRESENT_INFO_KHR;
    pNext:      *void;
    srcRect:    Rect2D;
    dstRect:    Rect2D;
    persistent: Bool32;
}

PFN_vkCreateSharedSwapchainsKHR :: #type (device: Device, swapchainCount: u32, pCreateInfos: *SwapchainCreateInfoKHR, pAllocator: *AllocationCallbacks, pSwapchains: *SwapchainKHR) -> Result #c_call;

CreateSharedSwapchainsKHR: #type (device: Device, swapchainCount: u32, pCreateInfos: *SwapchainCreateInfoKHR, pAllocator: *AllocationCallbacks, pSwapchains: *SwapchainKHR) -> Result #c_call;

VideoSessionKHR_T :: struct {}
VideoSessionKHR :: *VideoSessionKHR_T;
VideoSessionParametersKHR_T :: struct {}
VideoSessionParametersKHR :: *VideoSessionParametersKHR_T;

QueryResultStatusKHR :: enum u32 {
    ERROR_KHR     :: 4294967295;
    NOT_READY_KHR :: 0;
    COMPLETE_KHR  :: 1;
    MAX_ENUM_KHR  :: 2147483647;

    VK_QUERY_RESULT_STATUS_ERROR_KHR     :: ERROR_KHR;
    VK_QUERY_RESULT_STATUS_NOT_READY_KHR :: NOT_READY_KHR;
    VK_QUERY_RESULT_STATUS_COMPLETE_KHR  :: COMPLETE_KHR;
    VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR  :: MAX_ENUM_KHR;
}

VideoCodecOperationFlagBitsKHR :: enum_flags u32 {
    NONE_KHR               :: 0x0;

    DECODE_H264_KHR        :: 0x1;
    DECODE_H265_KHR        :: 0x2;
    FLAG_BITS_MAX_ENUM_KHR :: 0x7fffffff;

    VK_VIDEO_CODEC_OPERATION_NONE_KHR               :: NONE_KHR;

    VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR    :: DECODE_H264_KHR;
    VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR    :: DECODE_H265_KHR;
    VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR :: FLAG_BITS_MAX_ENUM_KHR;
}

VideoCodecOperationFlagsKHR :: VideoCodecOperationFlagBitsKHR;

VideoChromaSubsamplingFlagBitsKHR :: enum_flags u32 {
    INVALID_KHR            :: 0x0;
    MONOCHROME_KHR         :: 0x1;
    _420_KHR               :: 0x2;
    _422_KHR               :: 0x4;
    _444_KHR               :: 0x8;
    FLAG_BITS_MAX_ENUM_KHR :: 0x7fffffff;

    VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR            :: INVALID_KHR;
    VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR     :: MONOCHROME_KHR;
    VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR            :: _420_KHR;
    VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR            :: _422_KHR;
    VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR            :: _444_KHR;
    VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR :: FLAG_BITS_MAX_ENUM_KHR;
}

VideoChromaSubsamplingFlagsKHR :: VideoChromaSubsamplingFlagBitsKHR;

VideoComponentBitDepthFlagBitsKHR :: enum_flags u32 {
    INVALID_KHR            :: 0x0;
    _8_KHR                 :: 0x1;
    _10_KHR                :: 0x4;
    _12_KHR                :: 0x10;
    FLAG_BITS_MAX_ENUM_KHR :: 0x7fffffff;

    VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR            :: INVALID_KHR;
    VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR              :: _8_KHR;
    VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR             :: _10_KHR;
    VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR             :: _12_KHR;
    VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR :: FLAG_BITS_MAX_ENUM_KHR;
}

VideoComponentBitDepthFlagsKHR :: VideoComponentBitDepthFlagBitsKHR;

VideoCapabilityFlagBitsKHR :: enum_flags u32 {
    PROTECTED_CONTENT_KHR         :: 0x1;
    SEPARATE_REFERENCE_IMAGES_KHR :: 0x2;
    FLAG_BITS_MAX_ENUM_KHR        :: 0x7fffffff;

    VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR         :: PROTECTED_CONTENT_KHR;
    VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR :: SEPARATE_REFERENCE_IMAGES_KHR;
    VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR            :: FLAG_BITS_MAX_ENUM_KHR;
}

VideoCapabilityFlagsKHR :: VideoCapabilityFlagBitsKHR;

VideoSessionCreateFlagBitsKHR :: enum_flags u32 {
    PROTECTED_CONTENT_KHR  :: 0x1;
    FLAG_BITS_MAX_ENUM_KHR :: 0x7fffffff;

    VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR :: PROTECTED_CONTENT_KHR;
    VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR    :: FLAG_BITS_MAX_ENUM_KHR;
}

VideoSessionCreateFlagsKHR :: VideoSessionCreateFlagBitsKHR;
VideoSessionParametersCreateFlagsKHR :: Flags;
VideoBeginCodingFlagsKHR :: Flags;
VideoEndCodingFlagsKHR :: Flags;

VideoCodingControlFlagBitsKHR :: enum_flags u32 {
    RESET_KHR              :: 0x1;

    FLAG_BITS_MAX_ENUM_KHR :: 0x7fffffff;

    VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR          :: RESET_KHR;

    VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR :: FLAG_BITS_MAX_ENUM_KHR;
}

VideoCodingControlFlagsKHR :: VideoCodingControlFlagBitsKHR;
QueueFamilyQueryResultStatusPropertiesKHR :: struct {
    sType:                    StructureType = .QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR;
    pNext:                    *void;
    queryResultStatusSupport: Bool32;
}

QueueFamilyVideoPropertiesKHR :: struct {
    sType:                StructureType = .QUEUE_FAMILY_VIDEO_PROPERTIES_KHR;
    pNext:                *void;
    videoCodecOperations: VideoCodecOperationFlagsKHR;
}

VideoProfileInfoKHR :: struct {
    sType:               StructureType = .VIDEO_PROFILE_INFO_KHR;
    pNext:               *void;
    videoCodecOperation: VideoCodecOperationFlagBitsKHR;
    chromaSubsampling:   VideoChromaSubsamplingFlagsKHR;
    lumaBitDepth:        VideoComponentBitDepthFlagsKHR;
    chromaBitDepth:      VideoComponentBitDepthFlagsKHR;
}

VideoProfileListInfoKHR :: struct {
    sType:        StructureType = .VIDEO_PROFILE_LIST_INFO_KHR;
    pNext:        *void;
    profileCount: u32;
    pProfiles:    *VideoProfileInfoKHR;
}

VideoCapabilitiesKHR :: struct {
    sType:                             StructureType = .VIDEO_CAPABILITIES_KHR;
    pNext:                             *void;
    flags:                             VideoCapabilityFlagsKHR;
    minBitstreamBufferOffsetAlignment: DeviceSize;
    minBitstreamBufferSizeAlignment:   DeviceSize;
    pictureAccessGranularity:          Extent2D;
    minCodedExtent:                    Extent2D;
    maxCodedExtent:                    Extent2D;
    maxDpbSlots:                       u32;
    maxActiveReferencePictures:        u32;
    stdHeaderVersion:                  ExtensionProperties;
}

PhysicalDeviceVideoFormatInfoKHR :: struct {
    sType:      StructureType = .PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR;
    pNext:      *void;
    imageUsage: ImageUsageFlags;
}

VideoFormatPropertiesKHR :: struct {
    sType:            StructureType = .VIDEO_FORMAT_PROPERTIES_KHR;
    pNext:            *void;
    format:           Format;
    componentMapping: ComponentMapping;
    imageCreateFlags: ImageCreateFlags;
    imageType:        ImageType;
    imageTiling:      ImageTiling;
    imageUsageFlags:  ImageUsageFlags;
}

VideoPictureResourceInfoKHR :: struct {
    sType:            StructureType = .VIDEO_PICTURE_RESOURCE_INFO_KHR;
    pNext:            *void;
    codedOffset:      Offset2D;
    codedExtent:      Extent2D;
    baseArrayLayer:   u32;
    imageViewBinding: ImageView;
}

VideoReferenceSlotInfoKHR :: struct {
    sType:            StructureType = .VIDEO_REFERENCE_SLOT_INFO_KHR;
    pNext:            *void;
    slotIndex:        s32;
    pPictureResource: *VideoPictureResourceInfoKHR;
}

VideoSessionMemoryRequirementsKHR :: struct {
    sType:              StructureType = .VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR;
    pNext:              *void;
    memoryBindIndex:    u32;
    memoryRequirements: MemoryRequirements;
}

BindVideoSessionMemoryInfoKHR :: struct {
    sType:           StructureType = .BIND_VIDEO_SESSION_MEMORY_INFO_KHR;
    pNext:           *void;
    memoryBindIndex: u32;
    memory:          DeviceMemory;
    memoryOffset:    DeviceSize;
    memorySize:      DeviceSize;
}

VideoSessionCreateInfoKHR :: struct {
    sType:                      StructureType = .VIDEO_SESSION_CREATE_INFO_KHR;
    pNext:                      *void;
    queueFamilyIndex:           u32;
    flags:                      VideoSessionCreateFlagsKHR;
    pVideoProfile:              *VideoProfileInfoKHR;
    pictureFormat:              Format;
    maxCodedExtent:             Extent2D;
    referencePictureFormat:     Format;
    maxDpbSlots:                u32;
    maxActiveReferencePictures: u32;
    pStdHeaderVersion:          *ExtensionProperties;
}

VideoSessionParametersCreateInfoKHR :: struct {
    sType:                          StructureType = .VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR;
    pNext:                          *void;
    flags:                          VideoSessionParametersCreateFlagsKHR;
    videoSessionParametersTemplate: VideoSessionParametersKHR;
    videoSession:                   VideoSessionKHR;
}

VideoSessionParametersUpdateInfoKHR :: struct {
    sType:               StructureType = .VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR;
    pNext:               *void;
    updateSequenceCount: u32;
}

VideoBeginCodingInfoKHR :: struct {
    sType:                  StructureType = .VIDEO_BEGIN_CODING_INFO_KHR;
    pNext:                  *void;
    flags:                  VideoBeginCodingFlagsKHR;
    videoSession:           VideoSessionKHR;
    videoSessionParameters: VideoSessionParametersKHR;
    referenceSlotCount:     u32;
    pReferenceSlots:        *VideoReferenceSlotInfoKHR;
}

VideoEndCodingInfoKHR :: struct {
    sType: StructureType = .VIDEO_END_CODING_INFO_KHR;
    pNext: *void;
    flags: VideoEndCodingFlagsKHR;
}

VideoCodingControlInfoKHR :: struct {
    sType: StructureType = .VIDEO_CODING_CONTROL_INFO_KHR;
    pNext: *void;
    flags: VideoCodingControlFlagsKHR;
}

PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR :: #type (physicalDevice: PhysicalDevice, pVideoProfile: *VideoProfileInfoKHR, pCapabilities: *VideoCapabilitiesKHR) -> Result #c_call;
PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR :: #type (physicalDevice: PhysicalDevice, pVideoFormatInfo: *PhysicalDeviceVideoFormatInfoKHR, pVideoFormatPropertyCount: *u32, pVideoFormatProperties: *VideoFormatPropertiesKHR) -> Result #c_call;
PFN_vkCreateVideoSessionKHR :: #type (device: Device, pCreateInfo: *VideoSessionCreateInfoKHR, pAllocator: *AllocationCallbacks, pVideoSession: *VideoSessionKHR) -> Result #c_call;
PFN_vkDestroyVideoSessionKHR :: #type (device: Device, videoSession: VideoSessionKHR, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkGetVideoSessionMemoryRequirementsKHR :: #type (device: Device, videoSession: VideoSessionKHR, pMemoryRequirementsCount: *u32, pMemoryRequirements: *VideoSessionMemoryRequirementsKHR) -> Result #c_call;
PFN_vkBindVideoSessionMemoryKHR :: #type (device: Device, videoSession: VideoSessionKHR, bindSessionMemoryInfoCount: u32, pBindSessionMemoryInfos: *BindVideoSessionMemoryInfoKHR) -> Result #c_call;
PFN_vkCreateVideoSessionParametersKHR :: #type (device: Device, pCreateInfo: *VideoSessionParametersCreateInfoKHR, pAllocator: *AllocationCallbacks, pVideoSessionParameters: *VideoSessionParametersKHR) -> Result #c_call;
PFN_vkUpdateVideoSessionParametersKHR :: #type (device: Device, videoSessionParameters: VideoSessionParametersKHR, pUpdateInfo: *VideoSessionParametersUpdateInfoKHR) -> Result #c_call;
PFN_vkDestroyVideoSessionParametersKHR :: #type (device: Device, videoSessionParameters: VideoSessionParametersKHR, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCmdBeginVideoCodingKHR :: #type (commandBuffer: CommandBuffer, pBeginInfo: *VideoBeginCodingInfoKHR) -> void #c_call;
PFN_vkCmdEndVideoCodingKHR :: #type (commandBuffer: CommandBuffer, pEndCodingInfo: *VideoEndCodingInfoKHR) -> void #c_call;
PFN_vkCmdControlVideoCodingKHR :: #type (commandBuffer: CommandBuffer, pCodingControlInfo: *VideoCodingControlInfoKHR) -> void #c_call;

GetPhysicalDeviceVideoCapabilitiesKHR: #type (physicalDevice: PhysicalDevice, pVideoProfile: *VideoProfileInfoKHR, pCapabilities: *VideoCapabilitiesKHR) -> Result #c_call;

GetPhysicalDeviceVideoFormatPropertiesKHR: #type (physicalDevice: PhysicalDevice, pVideoFormatInfo: *PhysicalDeviceVideoFormatInfoKHR, pVideoFormatPropertyCount: *u32, pVideoFormatProperties: *VideoFormatPropertiesKHR) -> Result #c_call;

CreateVideoSessionKHR: #type (device: Device, pCreateInfo: *VideoSessionCreateInfoKHR, pAllocator: *AllocationCallbacks, pVideoSession: *VideoSessionKHR) -> Result #c_call;

DestroyVideoSessionKHR: #type (device: Device, videoSession: VideoSessionKHR, pAllocator: *AllocationCallbacks) -> void #c_call;

GetVideoSessionMemoryRequirementsKHR: #type (device: Device, videoSession: VideoSessionKHR, pMemoryRequirementsCount: *u32, pMemoryRequirements: *VideoSessionMemoryRequirementsKHR) -> Result #c_call;

BindVideoSessionMemoryKHR: #type (device: Device, videoSession: VideoSessionKHR, bindSessionMemoryInfoCount: u32, pBindSessionMemoryInfos: *BindVideoSessionMemoryInfoKHR) -> Result #c_call;

CreateVideoSessionParametersKHR: #type (device: Device, pCreateInfo: *VideoSessionParametersCreateInfoKHR, pAllocator: *AllocationCallbacks, pVideoSessionParameters: *VideoSessionParametersKHR) -> Result #c_call;

UpdateVideoSessionParametersKHR: #type (device: Device, videoSessionParameters: VideoSessionParametersKHR, pUpdateInfo: *VideoSessionParametersUpdateInfoKHR) -> Result #c_call;

DestroyVideoSessionParametersKHR: #type (device: Device, videoSessionParameters: VideoSessionParametersKHR, pAllocator: *AllocationCallbacks) -> void #c_call;

CmdBeginVideoCodingKHR: #type (commandBuffer: CommandBuffer, pBeginInfo: *VideoBeginCodingInfoKHR) -> void #c_call;

CmdEndVideoCodingKHR: #type (commandBuffer: CommandBuffer, pEndCodingInfo: *VideoEndCodingInfoKHR) -> void #c_call;

CmdControlVideoCodingKHR: #type (commandBuffer: CommandBuffer, pCodingControlInfo: *VideoCodingControlInfoKHR) -> void #c_call;

VideoDecodeCapabilityFlagBitsKHR :: enum_flags u32 {
    DPB_AND_OUTPUT_COINCIDE_KHR :: 0x1;
    DPB_AND_OUTPUT_DISTINCT_KHR :: 0x2;
    FLAG_BITS_MAX_ENUM_KHR      :: 0x7fffffff;

    VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR :: DPB_AND_OUTPUT_COINCIDE_KHR;
    VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR :: DPB_AND_OUTPUT_DISTINCT_KHR;
    VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR          :: FLAG_BITS_MAX_ENUM_KHR;
}

VideoDecodeCapabilityFlagsKHR :: VideoDecodeCapabilityFlagBitsKHR;

VideoDecodeUsageFlagBitsKHR :: enum_flags u32 {
    DEFAULT_KHR            :: 0x0;
    TRANSCODING_KHR        :: 0x1;
    OFFLINE_KHR            :: 0x2;
    STREAMING_KHR          :: 0x4;
    FLAG_BITS_MAX_ENUM_KHR :: 0x7fffffff;

    VK_VIDEO_DECODE_USAGE_DEFAULT_KHR            :: DEFAULT_KHR;
    VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR    :: TRANSCODING_KHR;
    VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR        :: OFFLINE_KHR;
    VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR      :: STREAMING_KHR;
    VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR :: FLAG_BITS_MAX_ENUM_KHR;
}

VideoDecodeUsageFlagsKHR :: VideoDecodeUsageFlagBitsKHR;
VideoDecodeFlagsKHR :: Flags;
VideoDecodeCapabilitiesKHR :: struct {
    sType: StructureType = .VIDEO_DECODE_CAPABILITIES_KHR;
    pNext: *void;
    flags: VideoDecodeCapabilityFlagsKHR;
}

VideoDecodeUsageInfoKHR :: struct {
    sType:           StructureType = .VIDEO_DECODE_USAGE_INFO_KHR;
    pNext:           *void;
    videoUsageHints: VideoDecodeUsageFlagsKHR;
}

VideoDecodeInfoKHR :: struct {
    sType:               StructureType = .VIDEO_DECODE_INFO_KHR;
    pNext:               *void;
    flags:               VideoDecodeFlagsKHR;
    srcBuffer:           Buffer;
    srcBufferOffset:     DeviceSize;
    srcBufferRange:      DeviceSize;
    dstPictureResource:  VideoPictureResourceInfoKHR;
    pSetupReferenceSlot: *VideoReferenceSlotInfoKHR;
    referenceSlotCount:  u32;
    pReferenceSlots:     *VideoReferenceSlotInfoKHR;
}

PFN_vkCmdDecodeVideoKHR :: #type (commandBuffer: CommandBuffer, pDecodeInfo: *VideoDecodeInfoKHR) -> void #c_call;

CmdDecodeVideoKHR: #type (commandBuffer: CommandBuffer, pDecodeInfo: *VideoDecodeInfoKHR) -> void #c_call;

StdVideoH264ChromaFormatIdc :: enum u32 {
    MONOCHROME :: 0;
    _420       :: 1;
    _422       :: 2;
    _444       :: 3;
    INVALID    :: 2147483647;
    MAX_ENUM   :: 2147483647;

    STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME :: MONOCHROME;
    STD_VIDEO_H264_CHROMA_FORMAT_IDC_420        :: _420;
    STD_VIDEO_H264_CHROMA_FORMAT_IDC_422        :: _422;
    STD_VIDEO_H264_CHROMA_FORMAT_IDC_444        :: _444;
    STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID    :: INVALID;
    STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM   :: MAX_ENUM;
}

StdVideoH264ProfileIdc :: enum u32 {
    BASELINE            :: 66;
    MAIN                :: 77;
    HIGH                :: 100;
    HIGH_444_PREDICTIVE :: 244;
    INVALID             :: 2147483647;
    MAX_ENUM            :: 2147483647;

    STD_VIDEO_H264_PROFILE_IDC_BASELINE            :: BASELINE;
    STD_VIDEO_H264_PROFILE_IDC_MAIN                :: MAIN;
    STD_VIDEO_H264_PROFILE_IDC_HIGH                :: HIGH;
    STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE :: HIGH_444_PREDICTIVE;
    STD_VIDEO_H264_PROFILE_IDC_INVALID             :: INVALID;
    STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM            :: MAX_ENUM;
}

StdVideoH264LevelIdc :: enum u32 {
    _1_0     :: 0;
    _1_1     :: 1;
    _1_2     :: 2;
    _1_3     :: 3;
    _2_0     :: 4;
    _2_1     :: 5;
    _2_2     :: 6;
    _3_0     :: 7;
    _3_1     :: 8;
    _3_2     :: 9;
    _4_0     :: 10;
    _4_1     :: 11;
    _4_2     :: 12;
    _5_0     :: 13;
    _5_1     :: 14;
    _5_2     :: 15;
    _6_0     :: 16;
    _6_1     :: 17;
    _6_2     :: 18;
    INVALID  :: 2147483647;
    MAX_ENUM :: 2147483647;

    STD_VIDEO_H264_LEVEL_IDC_1_0      :: _1_0;
    STD_VIDEO_H264_LEVEL_IDC_1_1      :: _1_1;
    STD_VIDEO_H264_LEVEL_IDC_1_2      :: _1_2;
    STD_VIDEO_H264_LEVEL_IDC_1_3      :: _1_3;
    STD_VIDEO_H264_LEVEL_IDC_2_0      :: _2_0;
    STD_VIDEO_H264_LEVEL_IDC_2_1      :: _2_1;
    STD_VIDEO_H264_LEVEL_IDC_2_2      :: _2_2;
    STD_VIDEO_H264_LEVEL_IDC_3_0      :: _3_0;
    STD_VIDEO_H264_LEVEL_IDC_3_1      :: _3_1;
    STD_VIDEO_H264_LEVEL_IDC_3_2      :: _3_2;
    STD_VIDEO_H264_LEVEL_IDC_4_0      :: _4_0;
    STD_VIDEO_H264_LEVEL_IDC_4_1      :: _4_1;
    STD_VIDEO_H264_LEVEL_IDC_4_2      :: _4_2;
    STD_VIDEO_H264_LEVEL_IDC_5_0      :: _5_0;
    STD_VIDEO_H264_LEVEL_IDC_5_1      :: _5_1;
    STD_VIDEO_H264_LEVEL_IDC_5_2      :: _5_2;
    STD_VIDEO_H264_LEVEL_IDC_6_0      :: _6_0;
    STD_VIDEO_H264_LEVEL_IDC_6_1      :: _6_1;
    STD_VIDEO_H264_LEVEL_IDC_6_2      :: _6_2;
    STD_VIDEO_H264_LEVEL_IDC_INVALID  :: INVALID;
    STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM :: MAX_ENUM;
}

StdVideoH264PocType :: enum u32 {
    _0       :: 0;
    _1       :: 1;
    _2       :: 2;
    INVALID  :: 2147483647;
    MAX_ENUM :: 2147483647;

    STD_VIDEO_H264_POC_TYPE_0        :: _0;
    STD_VIDEO_H264_POC_TYPE_1        :: _1;
    STD_VIDEO_H264_POC_TYPE_2        :: _2;
    STD_VIDEO_H264_POC_TYPE_INVALID  :: INVALID;
    STD_VIDEO_H264_POC_TYPE_MAX_ENUM :: MAX_ENUM;
}

StdVideoH264AspectRatioIdc :: enum u32 {
    UNSPECIFIED  :: 0;
    SQUARE       :: 1;
    _12_11       :: 2;
    _10_11       :: 3;
    _16_11       :: 4;
    _40_33       :: 5;
    _24_11       :: 6;
    _20_11       :: 7;
    _32_11       :: 8;
    _80_33       :: 9;
    _18_11       :: 10;
    _15_11       :: 11;
    _64_33       :: 12;
    _160_99      :: 13;
    _4_3         :: 14;
    _3_2         :: 15;
    _2_1         :: 16;
    EXTENDED_SAR :: 255;
    INVALID      :: 2147483647;
    MAX_ENUM     :: 2147483647;

    STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED  :: UNSPECIFIED;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE       :: SQUARE;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11        :: _12_11;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11        :: _10_11;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11        :: _16_11;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33        :: _40_33;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11        :: _24_11;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11        :: _20_11;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11        :: _32_11;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33        :: _80_33;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11        :: _18_11;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11        :: _15_11;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33        :: _64_33;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99       :: _160_99;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3          :: _4_3;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2          :: _3_2;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1          :: _2_1;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR :: EXTENDED_SAR;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID      :: INVALID;
    STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM     :: MAX_ENUM;
}

StdVideoH264WeightedBipredIdc :: enum u32 {
    DEFAULT  :: 0;
    EXPLICIT :: 1;
    IMPLICIT :: 2;
    INVALID  :: 2147483647;
    MAX_ENUM :: 2147483647;

    STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT  :: DEFAULT;
    STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT :: EXPLICIT;
    STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT :: IMPLICIT;
    STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID  :: INVALID;
    STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM :: MAX_ENUM;
}

StdVideoH264ModificationOfPicNumsIdc :: enum u32 {
    SHORT_TERM_SUBTRACT :: 0;
    SHORT_TERM_ADD      :: 1;
    LONG_TERM           :: 2;
    END                 :: 3;
    INVALID             :: 2147483647;
    MAX_ENUM            :: 2147483647;

    STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT :: SHORT_TERM_SUBTRACT;
    STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD      :: SHORT_TERM_ADD;
    STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM           :: LONG_TERM;
    STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END                 :: END;
    STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID             :: INVALID;
    STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM            :: MAX_ENUM;
}

StdVideoH264MemMgmtControlOp :: enum u32 {
    END                       :: 0;
    UNMARK_SHORT_TERM         :: 1;
    UNMARK_LONG_TERM          :: 2;
    MARK_LONG_TERM            :: 3;
    SET_MAX_LONG_TERM_INDEX   :: 4;
    UNMARK_ALL                :: 5;
    MARK_CURRENT_AS_LONG_TERM :: 6;
    INVALID                   :: 2147483647;
    MAX_ENUM                  :: 2147483647;

    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END                       :: END;
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM         :: UNMARK_SHORT_TERM;
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM          :: UNMARK_LONG_TERM;
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM            :: MARK_LONG_TERM;
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX   :: SET_MAX_LONG_TERM_INDEX;
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL                :: UNMARK_ALL;
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM :: MARK_CURRENT_AS_LONG_TERM;
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID                   :: INVALID;
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM                  :: MAX_ENUM;
}

StdVideoH264CabacInitIdc :: enum u32 {
    _0       :: 0;
    _1       :: 1;
    _2       :: 2;
    INVALID  :: 2147483647;
    MAX_ENUM :: 2147483647;

    STD_VIDEO_H264_CABAC_INIT_IDC_0        :: _0;
    STD_VIDEO_H264_CABAC_INIT_IDC_1        :: _1;
    STD_VIDEO_H264_CABAC_INIT_IDC_2        :: _2;
    STD_VIDEO_H264_CABAC_INIT_IDC_INVALID  :: INVALID;
    STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM :: MAX_ENUM;
}

StdVideoH264DisableDeblockingFilterIdc :: enum u32 {
    DISABLED :: 0;
    ENABLED  :: 1;
    PARTIAL  :: 2;
    INVALID  :: 2147483647;
    MAX_ENUM :: 2147483647;

    STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED :: DISABLED;
    STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED  :: ENABLED;
    STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL  :: PARTIAL;
    STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID  :: INVALID;
    STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM :: MAX_ENUM;
}

StdVideoH264SliceType :: enum u32 {
    P        :: 0;
    B        :: 1;
    I        :: 2;
    INVALID  :: 2147483647;
    MAX_ENUM :: 2147483647;

    STD_VIDEO_H264_SLICE_TYPE_P        :: P;
    STD_VIDEO_H264_SLICE_TYPE_B        :: B;
    STD_VIDEO_H264_SLICE_TYPE_I        :: I;
    STD_VIDEO_H264_SLICE_TYPE_INVALID  :: INVALID;
    STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM :: MAX_ENUM;
}

StdVideoH264PictureType :: enum u32 {
    P        :: 0;
    B        :: 1;
    I        :: 2;
    IDR      :: 5;
    INVALID  :: 2147483647;
    MAX_ENUM :: 2147483647;

    STD_VIDEO_H264_PICTURE_TYPE_P        :: P;
    STD_VIDEO_H264_PICTURE_TYPE_B        :: B;
    STD_VIDEO_H264_PICTURE_TYPE_I        :: I;
    STD_VIDEO_H264_PICTURE_TYPE_IDR      :: IDR;
    STD_VIDEO_H264_PICTURE_TYPE_INVALID  :: INVALID;
    STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM :: MAX_ENUM;
}

StdVideoH264NonVclNaluType :: enum u32 {
    SPS             :: 0;
    PPS             :: 1;
    AUD             :: 2;
    PREFIX          :: 3;
    END_OF_SEQUENCE :: 4;
    END_OF_STREAM   :: 5;
    PRECODED        :: 6;
    INVALID         :: 2147483647;
    MAX_ENUM        :: 2147483647;

    STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS             :: SPS;
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS             :: PPS;
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD             :: AUD;
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX          :: PREFIX;
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE :: END_OF_SEQUENCE;
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM   :: END_OF_STREAM;
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED        :: PRECODED;
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID         :: INVALID;
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM        :: MAX_ENUM;
}

StdVideoH264SpsVuiFlags :: struct {
    aspect_ratio_info_present_flag:  u32;
    #place aspect_ratio_info_present_flag; /*bitfield 1*/ overscan_info_present_flag:      u32;
    #place aspect_ratio_info_present_flag; /*bitfield 2*/ overscan_appropriate_flag:       u32;
    #place aspect_ratio_info_present_flag; /*bitfield 3*/ video_signal_type_present_flag:  u32;
    #place aspect_ratio_info_present_flag; /*bitfield 4*/ video_full_range_flag:           u32;
    #place aspect_ratio_info_present_flag; /*bitfield 5*/ color_description_present_flag:  u32;
    #place aspect_ratio_info_present_flag; /*bitfield 6*/ chroma_loc_info_present_flag:    u32;
    #place aspect_ratio_info_present_flag; /*bitfield 7*/ timing_info_present_flag:        u32;
    #place aspect_ratio_info_present_flag; /*bitfield 8*/ fixed_frame_rate_flag:           u32;
    #place aspect_ratio_info_present_flag; /*bitfield 9*/ bitstream_restriction_flag:      u32;
    #place aspect_ratio_info_present_flag; /*bitfield 10*/ nal_hrd_parameters_present_flag: u32;
    #place aspect_ratio_info_present_flag; /*bitfield 11*/ vcl_hrd_parameters_present_flag: u32;
}

StdVideoH264HrdParameters :: struct {
    cpb_cnt_minus1:                          u8;
    bit_rate_scale:                          u8;
    cpb_size_scale:                          u8;
    reserved1:                               u8;
    bit_rate_value_minus1:                   [32] u32;
    cpb_size_value_minus1:                   [32] u32;
    cbr_flag:                                [32] u8;
    initial_cpb_removal_delay_length_minus1: u32;
    cpb_removal_delay_length_minus1:         u32;
    dpb_output_delay_length_minus1:          u32;
    time_offset_length:                      u32;
}

StdVideoH264SequenceParameterSetVui :: struct {
    flags:                               StdVideoH264SpsVuiFlags;
    aspect_ratio_idc:                    StdVideoH264AspectRatioIdc;
    sar_width:                           u16;
    sar_height:                          u16;
    video_format:                        u8;
    colour_primaries:                    u8;
    transfer_characteristics:            u8;
    matrix_coefficients:                 u8;
    num_units_in_tick:                   u32;
    time_scale:                          u32;
    max_num_reorder_frames:              u8;
    max_dec_frame_buffering:             u8;
    chroma_sample_loc_type_top_field:    u8;
    chroma_sample_loc_type_bottom_field: u8;
    reserved1:                           u32;
    pHrdParameters:                      *StdVideoH264HrdParameters;
}

StdVideoH264SpsFlags :: struct {
    constraint_set0_flag:                 u32;
    #place constraint_set0_flag; /*bitfield 1*/ constraint_set1_flag:                 u32;
    #place constraint_set0_flag; /*bitfield 2*/ constraint_set2_flag:                 u32;
    #place constraint_set0_flag; /*bitfield 3*/ constraint_set3_flag:                 u32;
    #place constraint_set0_flag; /*bitfield 4*/ constraint_set4_flag:                 u32;
    #place constraint_set0_flag; /*bitfield 5*/ constraint_set5_flag:                 u32;
    #place constraint_set0_flag; /*bitfield 6*/ direct_8x8_inference_flag:            u32;
    #place constraint_set0_flag; /*bitfield 7*/ mb_adaptive_frame_field_flag:         u32;
    #place constraint_set0_flag; /*bitfield 8*/ frame_mbs_only_flag:                  u32;
    #place constraint_set0_flag; /*bitfield 9*/ delta_pic_order_always_zero_flag:     u32;
    #place constraint_set0_flag; /*bitfield 10*/ separate_colour_plane_flag:           u32;
    #place constraint_set0_flag; /*bitfield 11*/ gaps_in_frame_num_value_allowed_flag: u32;
    #place constraint_set0_flag; /*bitfield 12*/ qpprime_y_zero_transform_bypass_flag: u32;
    #place constraint_set0_flag; /*bitfield 13*/ frame_cropping_flag:                  u32;
    #place constraint_set0_flag; /*bitfield 14*/ seq_scaling_matrix_present_flag:      u32;
    #place constraint_set0_flag; /*bitfield 15*/ vui_parameters_present_flag:          u32;
}

StdVideoH264ScalingLists :: struct {
    scaling_list_present_mask:       u16;
    use_default_scaling_matrix_mask: u16;
    ScalingList4x4:                  [6] [16] u8;
    ScalingList8x8:                  [6] [64] u8;
}

StdVideoH264SequenceParameterSet :: struct {
    flags:                                 StdVideoH264SpsFlags;
    profile_idc:                           StdVideoH264ProfileIdc;
    level_idc:                             StdVideoH264LevelIdc;
    chroma_format_idc:                     StdVideoH264ChromaFormatIdc;
    seq_parameter_set_id:                  u8;
    bit_depth_luma_minus8:                 u8;
    bit_depth_chroma_minus8:               u8;
    log2_max_frame_num_minus4:             u8;
    pic_order_cnt_type:                    StdVideoH264PocType;
    offset_for_non_ref_pic:                s32;
    offset_for_top_to_bottom_field:        s32;
    log2_max_pic_order_cnt_lsb_minus4:     u8;
    num_ref_frames_in_pic_order_cnt_cycle: u8;
    max_num_ref_frames:                    u8;
    reserved1:                             u8;
    pic_width_in_mbs_minus1:               u32;
    pic_height_in_map_units_minus1:        u32;
    frame_crop_left_offset:                u32;
    frame_crop_right_offset:               u32;
    frame_crop_top_offset:                 u32;
    frame_crop_bottom_offset:              u32;
    reserved2:                             u32;
    pOffsetForRefFrame:                    *s32;
    pScalingLists:                         *StdVideoH264ScalingLists;
    pSequenceParameterSetVui:              *StdVideoH264SequenceParameterSetVui;
}

StdVideoH264PpsFlags :: struct {
    transform_8x8_mode_flag:                      u32;
    #place transform_8x8_mode_flag; /*bitfield 1*/ redundant_pic_cnt_present_flag:               u32;
    #place transform_8x8_mode_flag; /*bitfield 2*/ constrained_intra_pred_flag:                  u32;
    #place transform_8x8_mode_flag; /*bitfield 3*/ deblocking_filter_control_present_flag:       u32;
    #place transform_8x8_mode_flag; /*bitfield 4*/ weighted_pred_flag:                           u32;
    #place transform_8x8_mode_flag; /*bitfield 5*/ bottom_field_pic_order_in_frame_present_flag: u32;
    #place transform_8x8_mode_flag; /*bitfield 6*/ entropy_coding_mode_flag:                     u32;
    #place transform_8x8_mode_flag; /*bitfield 7*/ pic_scaling_matrix_present_flag:              u32;
}

StdVideoH264PictureParameterSet :: struct {
    flags:                                StdVideoH264PpsFlags;
    seq_parameter_set_id:                 u8;
    pic_parameter_set_id:                 u8;
    num_ref_idx_l0_default_active_minus1: u8;
    num_ref_idx_l1_default_active_minus1: u8;
    weighted_bipred_idc:                  StdVideoH264WeightedBipredIdc;
    pic_init_qp_minus26:                  s8;
    pic_init_qs_minus26:                  s8;
    chroma_qp_index_offset:               s8;
    second_chroma_qp_index_offset:        s8;
    pScalingLists:                        *StdVideoH264ScalingLists;
}

StdVideoDecodeH264FieldOrderCount :: enum u32 {
    TOP      :: 0;
    BOTTOM   :: 1;
    INVALID  :: 2147483647;
    MAX_ENUM :: 2147483647;

    STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP      :: TOP;
    STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM   :: BOTTOM;
    STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID  :: INVALID;
    STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM :: MAX_ENUM;
}

StdVideoDecodeH264PictureInfoFlags :: struct {
    field_pic_flag:           u32;
    #place field_pic_flag; /*bitfield 1*/ is_intra:                 u32;
    #place field_pic_flag; /*bitfield 2*/ IdrPicFlag:               u32;
    #place field_pic_flag; /*bitfield 3*/ bottom_field_flag:        u32;
    #place field_pic_flag; /*bitfield 4*/ is_reference:             u32;
    #place field_pic_flag; /*bitfield 5*/ complementary_field_pair: u32;
}

StdVideoDecodeH264PictureInfo :: struct {
    flags:                StdVideoDecodeH264PictureInfoFlags;
    seq_parameter_set_id: u8;
    pic_parameter_set_id: u8;
    reserved1:            u8;
    reserved2:            u8;
    frame_num:            u16;
    idr_pic_id:           u16;
    PicOrderCnt:          [2] s32;
}

StdVideoDecodeH264ReferenceInfoFlags :: struct {
    top_field_flag:               u32;
    #place top_field_flag; /*bitfield 1*/ bottom_field_flag:            u32;
    #place top_field_flag; /*bitfield 2*/ used_for_long_term_reference: u32;
    #place top_field_flag; /*bitfield 3*/ is_non_existing:              u32;
}

StdVideoDecodeH264ReferenceInfo :: struct {
    flags:       StdVideoDecodeH264ReferenceInfoFlags;
    FrameNum:    u16;
    reserved:    u16;
    PicOrderCnt: [2] s32;
}

VideoDecodeH264PictureLayoutFlagBitsKHR :: enum_flags u32 {
    PROGRESSIVE_KHR                  :: 0x0;
    INTERLACED_INTERLEAVED_LINES_KHR :: 0x1;
    INTERLACED_SEPARATE_PLANES_KHR   :: 0x2;
    FLAG_BITS_MAX_ENUM_KHR           :: 0x7fffffff;

    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR                      :: PROGRESSIVE_KHR;
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR :: INTERLACED_INTERLEAVED_LINES_KHR;
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR   :: INTERLACED_SEPARATE_PLANES_KHR;
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR               :: FLAG_BITS_MAX_ENUM_KHR;
}

VideoDecodeH264PictureLayoutFlagsKHR :: VideoDecodeH264PictureLayoutFlagBitsKHR;
VideoDecodeH264ProfileInfoKHR :: struct {
    sType:         StructureType = .VIDEO_DECODE_H264_PROFILE_INFO_KHR;
    pNext:         *void;
    stdProfileIdc: StdVideoH264ProfileIdc;
    pictureLayout: VideoDecodeH264PictureLayoutFlagBitsKHR;
}

VideoDecodeH264CapabilitiesKHR :: struct {
    sType:                  StructureType = .VIDEO_DECODE_H264_CAPABILITIES_KHR;
    pNext:                  *void;
    maxLevelIdc:            StdVideoH264LevelIdc;
    fieldOffsetGranularity: Offset2D;
}

VideoDecodeH264SessionParametersAddInfoKHR :: struct {
    sType:       StructureType = .VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR;
    pNext:       *void;
    stdSPSCount: u32;
    pStdSPSs:    *StdVideoH264SequenceParameterSet;
    stdPPSCount: u32;
    pStdPPSs:    *StdVideoH264PictureParameterSet;
}

VideoDecodeH264SessionParametersCreateInfoKHR :: struct {
    sType:              StructureType = .VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR;
    pNext:              *void;
    maxStdSPSCount:     u32;
    maxStdPPSCount:     u32;
    pParametersAddInfo: *VideoDecodeH264SessionParametersAddInfoKHR;
}

VideoDecodeH264PictureInfoKHR :: struct {
    sType:           StructureType = .VIDEO_DECODE_H264_PICTURE_INFO_KHR;
    pNext:           *void;
    pStdPictureInfo: *StdVideoDecodeH264PictureInfo;
    sliceCount:      u32;
    pSliceOffsets:   *u32;
}

VideoDecodeH264DpbSlotInfoKHR :: struct {
    sType:             StructureType = .VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR;
    pNext:             *void;
    pStdReferenceInfo: *StdVideoDecodeH264ReferenceInfo;
}

RenderingFlagsKHR :: RenderingFlags;

RenderingFlagBitsKHR :: RenderingFlagBits;

RenderingInfoKHR :: RenderingInfo;

RenderingAttachmentInfoKHR :: RenderingAttachmentInfo;

PipelineRenderingCreateInfoKHR :: PipelineRenderingCreateInfo;

PhysicalDeviceDynamicRenderingFeaturesKHR :: PhysicalDeviceDynamicRenderingFeatures;

CommandBufferInheritanceRenderingInfoKHR :: CommandBufferInheritanceRenderingInfo;

RenderingFragmentShadingRateAttachmentInfoKHR :: struct {
    sType:                          StructureType = .RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
    pNext:                          *void;
    imageView:                      ImageView;
    imageLayout:                    ImageLayout;
    shadingRateAttachmentTexelSize: Extent2D;
}

RenderingFragmentDensityMapAttachmentInfoEXT :: struct {
    sType:       StructureType = .RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT;
    pNext:       *void;
    imageView:   ImageView;
    imageLayout: ImageLayout;
}

AttachmentSampleCountInfoAMD :: struct {
    sType:                         StructureType = .ATTACHMENT_SAMPLE_COUNT_INFO_AMD;
    pNext:                         *void;
    colorAttachmentCount:          u32;
    pColorAttachmentSamples:       *SampleCountFlagBits;
    depthStencilAttachmentSamples: SampleCountFlagBits;
}

AttachmentSampleCountInfoNV :: AttachmentSampleCountInfoAMD;

MultiviewPerViewAttributesInfoNVX :: struct {
    sType:                          StructureType = .MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX;
    pNext:                          *void;
    perViewAttributes:              Bool32;
    perViewAttributesPositionXOnly: Bool32;
}

PFN_vkCmdBeginRenderingKHR :: #type (commandBuffer: CommandBuffer, pRenderingInfo: *RenderingInfo) -> void #c_call;
PFN_vkCmdEndRenderingKHR :: #type (commandBuffer: CommandBuffer) -> void #c_call;

CmdBeginRenderingKHR: #type (commandBuffer: CommandBuffer, pRenderingInfo: *RenderingInfo) -> void #c_call;

CmdEndRenderingKHR: #type (commandBuffer: CommandBuffer) -> void #c_call;

RenderPassMultiviewCreateInfoKHR :: RenderPassMultiviewCreateInfo;

PhysicalDeviceMultiviewFeaturesKHR :: PhysicalDeviceMultiviewFeatures;

PhysicalDeviceMultiviewPropertiesKHR :: PhysicalDeviceMultiviewProperties;

PhysicalDeviceFeatures2KHR :: PhysicalDeviceFeatures2;

PhysicalDeviceProperties2KHR :: PhysicalDeviceProperties2;

FormatProperties2KHR :: FormatProperties2;

ImageFormatProperties2KHR :: ImageFormatProperties2;

PhysicalDeviceImageFormatInfo2KHR :: PhysicalDeviceImageFormatInfo2;

QueueFamilyProperties2KHR :: QueueFamilyProperties2;

PhysicalDeviceMemoryProperties2KHR :: PhysicalDeviceMemoryProperties2;

SparseImageFormatProperties2KHR :: SparseImageFormatProperties2;

PhysicalDeviceSparseImageFormatInfo2KHR :: PhysicalDeviceSparseImageFormatInfo2;

PFN_vkGetPhysicalDeviceFeatures2KHR :: #type (physicalDevice: PhysicalDevice, pFeatures: *PhysicalDeviceFeatures2) -> void #c_call;
PFN_vkGetPhysicalDeviceProperties2KHR :: #type (physicalDevice: PhysicalDevice, pProperties: *PhysicalDeviceProperties2) -> void #c_call;
PFN_vkGetPhysicalDeviceFormatProperties2KHR :: #type (physicalDevice: PhysicalDevice, format: Format, pFormatProperties: *FormatProperties2) -> void #c_call;
PFN_vkGetPhysicalDeviceImageFormatProperties2KHR :: #type (physicalDevice: PhysicalDevice, pImageFormatInfo: *PhysicalDeviceImageFormatInfo2, pImageFormatProperties: *ImageFormatProperties2) -> Result #c_call;
PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR :: #type (physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: *u32, pQueueFamilyProperties: *QueueFamilyProperties2) -> void #c_call;
PFN_vkGetPhysicalDeviceMemoryProperties2KHR :: #type (physicalDevice: PhysicalDevice, pMemoryProperties: *PhysicalDeviceMemoryProperties2) -> void #c_call;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR :: #type (physicalDevice: PhysicalDevice, pFormatInfo: *PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *u32, pProperties: *SparseImageFormatProperties2) -> void #c_call;

GetPhysicalDeviceFeatures2KHR: #type (physicalDevice: PhysicalDevice, pFeatures: *PhysicalDeviceFeatures2) -> void #c_call;

GetPhysicalDeviceProperties2KHR: #type (physicalDevice: PhysicalDevice, pProperties: *PhysicalDeviceProperties2) -> void #c_call;

GetPhysicalDeviceFormatProperties2KHR: #type (physicalDevice: PhysicalDevice, format: Format, pFormatProperties: *FormatProperties2) -> void #c_call;

GetPhysicalDeviceImageFormatProperties2KHR: #type (physicalDevice: PhysicalDevice, pImageFormatInfo: *PhysicalDeviceImageFormatInfo2, pImageFormatProperties: *ImageFormatProperties2) -> Result #c_call;

GetPhysicalDeviceQueueFamilyProperties2KHR: #type (physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: *u32, pQueueFamilyProperties: *QueueFamilyProperties2) -> void #c_call;

GetPhysicalDeviceMemoryProperties2KHR: #type (physicalDevice: PhysicalDevice, pMemoryProperties: *PhysicalDeviceMemoryProperties2) -> void #c_call;

GetPhysicalDeviceSparseImageFormatProperties2KHR: #type (physicalDevice: PhysicalDevice, pFormatInfo: *PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *u32, pProperties: *SparseImageFormatProperties2) -> void #c_call;

PeerMemoryFeatureFlagsKHR :: PeerMemoryFeatureFlags;

PeerMemoryFeatureFlagBitsKHR :: PeerMemoryFeatureFlagBits;

MemoryAllocateFlagsKHR :: MemoryAllocateFlags;

MemoryAllocateFlagBitsKHR :: MemoryAllocateFlagBits;

MemoryAllocateFlagsInfoKHR :: MemoryAllocateFlagsInfo;

DeviceGroupRenderPassBeginInfoKHR :: DeviceGroupRenderPassBeginInfo;

DeviceGroupCommandBufferBeginInfoKHR :: DeviceGroupCommandBufferBeginInfo;

DeviceGroupSubmitInfoKHR :: DeviceGroupSubmitInfo;

DeviceGroupBindSparseInfoKHR :: DeviceGroupBindSparseInfo;

BindBufferMemoryDeviceGroupInfoKHR :: BindBufferMemoryDeviceGroupInfo;

BindImageMemoryDeviceGroupInfoKHR :: BindImageMemoryDeviceGroupInfo;

PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR :: #type (device: Device, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: *PeerMemoryFeatureFlags) -> void #c_call;
PFN_vkCmdSetDeviceMaskKHR :: #type (commandBuffer: CommandBuffer, deviceMask: u32) -> void #c_call;
PFN_vkCmdDispatchBaseKHR :: #type (commandBuffer: CommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #c_call;

GetDeviceGroupPeerMemoryFeaturesKHR: #type (device: Device, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: *PeerMemoryFeatureFlags) -> void #c_call;

CmdSetDeviceMaskKHR: #type (commandBuffer: CommandBuffer, deviceMask: u32) -> void #c_call;

CmdDispatchBaseKHR: #type (commandBuffer: CommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #c_call;

CommandPoolTrimFlagsKHR :: CommandPoolTrimFlags;

PFN_vkTrimCommandPoolKHR :: #type (device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags) -> void #c_call;

TrimCommandPoolKHR: #type (device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags) -> void #c_call;

PhysicalDeviceGroupPropertiesKHR :: PhysicalDeviceGroupProperties;

DeviceGroupDeviceCreateInfoKHR :: DeviceGroupDeviceCreateInfo;

PFN_vkEnumeratePhysicalDeviceGroupsKHR :: #type (instance: Instance, pPhysicalDeviceGroupCount: *u32, pPhysicalDeviceGroupProperties: *PhysicalDeviceGroupProperties) -> Result #c_call;

EnumeratePhysicalDeviceGroupsKHR: #type (instance: Instance, pPhysicalDeviceGroupCount: *u32, pPhysicalDeviceGroupProperties: *PhysicalDeviceGroupProperties) -> Result #c_call;

ExternalMemoryHandleTypeFlagsKHR :: ExternalMemoryHandleTypeFlags;

ExternalMemoryHandleTypeFlagBitsKHR :: ExternalMemoryHandleTypeFlagBits;

ExternalMemoryFeatureFlagsKHR :: ExternalMemoryFeatureFlags;

ExternalMemoryFeatureFlagBitsKHR :: ExternalMemoryFeatureFlagBits;

ExternalMemoryPropertiesKHR :: ExternalMemoryProperties;

PhysicalDeviceExternalImageFormatInfoKHR :: PhysicalDeviceExternalImageFormatInfo;

ExternalImageFormatPropertiesKHR :: ExternalImageFormatProperties;

PhysicalDeviceExternalBufferInfoKHR :: PhysicalDeviceExternalBufferInfo;

ExternalBufferPropertiesKHR :: ExternalBufferProperties;

PhysicalDeviceIDPropertiesKHR :: PhysicalDeviceIDProperties;

PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR :: #type (physicalDevice: PhysicalDevice, pExternalBufferInfo: *PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *ExternalBufferProperties) -> void #c_call;

GetPhysicalDeviceExternalBufferPropertiesKHR: #type (physicalDevice: PhysicalDevice, pExternalBufferInfo: *PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *ExternalBufferProperties) -> void #c_call;

ExternalMemoryImageCreateInfoKHR :: ExternalMemoryImageCreateInfo;

ExternalMemoryBufferCreateInfoKHR :: ExternalMemoryBufferCreateInfo;

ExportMemoryAllocateInfoKHR :: ExportMemoryAllocateInfo;

ImportMemoryFdInfoKHR :: struct {
    sType:      StructureType = .IMPORT_MEMORY_FD_INFO_KHR;
    pNext:      *void;
    handleType: ExternalMemoryHandleTypeFlagBits;
    fd:         s32;
}

MemoryFdPropertiesKHR :: struct {
    sType:          StructureType = .MEMORY_FD_PROPERTIES_KHR;
    pNext:          *void;
    memoryTypeBits: u32;
}

MemoryGetFdInfoKHR :: struct {
    sType:      StructureType = .MEMORY_GET_FD_INFO_KHR;
    pNext:      *void;
    memory:     DeviceMemory;
    handleType: ExternalMemoryHandleTypeFlagBits;
}

PFN_vkGetMemoryFdKHR :: #type (device: Device, pGetFdInfo: *MemoryGetFdInfoKHR, pFd: *s32) -> Result #c_call;
PFN_vkGetMemoryFdPropertiesKHR :: #type (device: Device, handleType: ExternalMemoryHandleTypeFlagBits, fd: s32, pMemoryFdProperties: *MemoryFdPropertiesKHR) -> Result #c_call;

GetMemoryFdKHR: #type (device: Device, pGetFdInfo: *MemoryGetFdInfoKHR, pFd: *s32) -> Result #c_call;

GetMemoryFdPropertiesKHR: #type (device: Device, handleType: ExternalMemoryHandleTypeFlagBits, fd: s32, pMemoryFdProperties: *MemoryFdPropertiesKHR) -> Result #c_call;

ExternalSemaphoreHandleTypeFlagsKHR :: ExternalSemaphoreHandleTypeFlags;

ExternalSemaphoreHandleTypeFlagBitsKHR :: ExternalSemaphoreHandleTypeFlagBits;

ExternalSemaphoreFeatureFlagsKHR :: ExternalSemaphoreFeatureFlags;

ExternalSemaphoreFeatureFlagBitsKHR :: ExternalSemaphoreFeatureFlagBits;

PhysicalDeviceExternalSemaphoreInfoKHR :: PhysicalDeviceExternalSemaphoreInfo;

ExternalSemaphorePropertiesKHR :: ExternalSemaphoreProperties;

PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR :: #type (physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: *PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *ExternalSemaphoreProperties) -> void #c_call;

GetPhysicalDeviceExternalSemaphorePropertiesKHR: #type (physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: *PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *ExternalSemaphoreProperties) -> void #c_call;

SemaphoreImportFlagsKHR :: SemaphoreImportFlags;

SemaphoreImportFlagBitsKHR :: SemaphoreImportFlagBits;

ExportSemaphoreCreateInfoKHR :: ExportSemaphoreCreateInfo;

ImportSemaphoreFdInfoKHR :: struct {
    sType:      StructureType = .IMPORT_SEMAPHORE_FD_INFO_KHR;
    pNext:      *void;
    semaphore:  Semaphore;
    flags:      SemaphoreImportFlags;
    handleType: ExternalSemaphoreHandleTypeFlagBits;
    fd:         s32;
}

SemaphoreGetFdInfoKHR :: struct {
    sType:      StructureType = .SEMAPHORE_GET_FD_INFO_KHR;
    pNext:      *void;
    semaphore:  Semaphore;
    handleType: ExternalSemaphoreHandleTypeFlagBits;
}

PFN_vkImportSemaphoreFdKHR :: #type (device: Device, pImportSemaphoreFdInfo: *ImportSemaphoreFdInfoKHR) -> Result #c_call;
PFN_vkGetSemaphoreFdKHR :: #type (device: Device, pGetFdInfo: *SemaphoreGetFdInfoKHR, pFd: *s32) -> Result #c_call;

ImportSemaphoreFdKHR: #type (device: Device, pImportSemaphoreFdInfo: *ImportSemaphoreFdInfoKHR) -> Result #c_call;

GetSemaphoreFdKHR: #type (device: Device, pGetFdInfo: *SemaphoreGetFdInfoKHR, pFd: *s32) -> Result #c_call;

PhysicalDevicePushDescriptorPropertiesKHR :: struct {
    sType:              StructureType = .PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
    pNext:              *void;
    maxPushDescriptors: u32;
}

PFN_vkCmdPushDescriptorSetKHR :: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: *WriteDescriptorSet) -> void #c_call;
PFN_vkCmdPushDescriptorSetWithTemplateKHR :: #type (commandBuffer: CommandBuffer, descriptorUpdateTemplate: DescriptorUpdateTemplate, layout: PipelineLayout, set: u32, pData: *void) -> void #c_call;

CmdPushDescriptorSetKHR: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: *WriteDescriptorSet) -> void #c_call;

CmdPushDescriptorSetWithTemplateKHR: #type (commandBuffer: CommandBuffer, descriptorUpdateTemplate: DescriptorUpdateTemplate, layout: PipelineLayout, set: u32, pData: *void) -> void #c_call;

PhysicalDeviceShaderFloat16Int8FeaturesKHR :: PhysicalDeviceShaderFloat16Int8Features;

PhysicalDeviceFloat16Int8FeaturesKHR :: PhysicalDeviceShaderFloat16Int8Features;

PhysicalDevice16BitStorageFeaturesKHR :: PhysicalDevice16BitStorageFeatures;

RectLayerKHR :: struct {
    offset: Offset2D;
    extent: Extent2D;
    layer:  u32;
}

PresentRegionKHR :: struct {
    rectangleCount: u32;
    pRectangles:    *RectLayerKHR;
}

PresentRegionsKHR :: struct {
    sType:          StructureType = .PRESENT_REGIONS_KHR;
    pNext:          *void;
    swapchainCount: u32;
    pRegions:       *PresentRegionKHR;
}

DescriptorUpdateTemplateKHR :: DescriptorUpdateTemplate;

DescriptorUpdateTemplateTypeKHR :: DescriptorUpdateTemplateType;

DescriptorUpdateTemplateCreateFlagsKHR :: DescriptorUpdateTemplateCreateFlags;

DescriptorUpdateTemplateEntryKHR :: DescriptorUpdateTemplateEntry;

DescriptorUpdateTemplateCreateInfoKHR :: DescriptorUpdateTemplateCreateInfo;

PFN_vkCreateDescriptorUpdateTemplateKHR :: #type (device: Device, pCreateInfo: *DescriptorUpdateTemplateCreateInfo, pAllocator: *AllocationCallbacks, pDescriptorUpdateTemplate: *DescriptorUpdateTemplate) -> Result #c_call;
PFN_vkDestroyDescriptorUpdateTemplateKHR :: #type (device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkUpdateDescriptorSetWithTemplateKHR :: #type (device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: *void) -> void #c_call;

CreateDescriptorUpdateTemplateKHR: #type (device: Device, pCreateInfo: *DescriptorUpdateTemplateCreateInfo, pAllocator: *AllocationCallbacks, pDescriptorUpdateTemplate: *DescriptorUpdateTemplate) -> Result #c_call;

DestroyDescriptorUpdateTemplateKHR: #type (device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: *AllocationCallbacks) -> void #c_call;

UpdateDescriptorSetWithTemplateKHR: #type (device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: *void) -> void #c_call;

PhysicalDeviceImagelessFramebufferFeaturesKHR :: PhysicalDeviceImagelessFramebufferFeatures;

FramebufferAttachmentsCreateInfoKHR :: FramebufferAttachmentsCreateInfo;

FramebufferAttachmentImageInfoKHR :: FramebufferAttachmentImageInfo;

RenderPassAttachmentBeginInfoKHR :: RenderPassAttachmentBeginInfo;

RenderPassCreateInfo2KHR :: RenderPassCreateInfo2;

AttachmentDescription2KHR :: AttachmentDescription2;

AttachmentReference2KHR :: AttachmentReference2;

SubpassDescription2KHR :: SubpassDescription2;

SubpassDependency2KHR :: SubpassDependency2;

SubpassBeginInfoKHR :: SubpassBeginInfo;

SubpassEndInfoKHR :: SubpassEndInfo;

PFN_vkCreateRenderPass2KHR :: #type (device: Device, pCreateInfo: *RenderPassCreateInfo2, pAllocator: *AllocationCallbacks, pRenderPass: *RenderPass) -> Result #c_call;
PFN_vkCmdBeginRenderPass2KHR :: #type (commandBuffer: CommandBuffer, pRenderPassBegin: *RenderPassBeginInfo, pSubpassBeginInfo: *SubpassBeginInfo) -> void #c_call;
PFN_vkCmdNextSubpass2KHR :: #type (commandBuffer: CommandBuffer, pSubpassBeginInfo: *SubpassBeginInfo, pSubpassEndInfo: *SubpassEndInfo) -> void #c_call;
PFN_vkCmdEndRenderPass2KHR :: #type (commandBuffer: CommandBuffer, pSubpassEndInfo: *SubpassEndInfo) -> void #c_call;

CreateRenderPass2KHR: #type (device: Device, pCreateInfo: *RenderPassCreateInfo2, pAllocator: *AllocationCallbacks, pRenderPass: *RenderPass) -> Result #c_call;

CmdBeginRenderPass2KHR: #type (commandBuffer: CommandBuffer, pRenderPassBegin: *RenderPassBeginInfo, pSubpassBeginInfo: *SubpassBeginInfo) -> void #c_call;

CmdNextSubpass2KHR: #type (commandBuffer: CommandBuffer, pSubpassBeginInfo: *SubpassBeginInfo, pSubpassEndInfo: *SubpassEndInfo) -> void #c_call;

CmdEndRenderPass2KHR: #type (commandBuffer: CommandBuffer, pSubpassEndInfo: *SubpassEndInfo) -> void #c_call;

SharedPresentSurfaceCapabilitiesKHR :: struct {
    sType:                            StructureType = .SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
    pNext:                            *void;
    sharedPresentSupportedUsageFlags: ImageUsageFlags;
}

PFN_vkGetSwapchainStatusKHR :: #type (device: Device, swapchain: SwapchainKHR) -> Result #c_call;

GetSwapchainStatusKHR: #type (device: Device, swapchain: SwapchainKHR) -> Result #c_call;

ExternalFenceHandleTypeFlagsKHR :: ExternalFenceHandleTypeFlags;

ExternalFenceHandleTypeFlagBitsKHR :: ExternalFenceHandleTypeFlagBits;

ExternalFenceFeatureFlagsKHR :: ExternalFenceFeatureFlags;

ExternalFenceFeatureFlagBitsKHR :: ExternalFenceFeatureFlagBits;

PhysicalDeviceExternalFenceInfoKHR :: PhysicalDeviceExternalFenceInfo;

ExternalFencePropertiesKHR :: ExternalFenceProperties;

PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR :: #type (physicalDevice: PhysicalDevice, pExternalFenceInfo: *PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *ExternalFenceProperties) -> void #c_call;

GetPhysicalDeviceExternalFencePropertiesKHR: #type (physicalDevice: PhysicalDevice, pExternalFenceInfo: *PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *ExternalFenceProperties) -> void #c_call;

FenceImportFlagsKHR :: FenceImportFlags;

FenceImportFlagBitsKHR :: FenceImportFlagBits;

ExportFenceCreateInfoKHR :: ExportFenceCreateInfo;

ImportFenceFdInfoKHR :: struct {
    sType:      StructureType = .IMPORT_FENCE_FD_INFO_KHR;
    pNext:      *void;
    fence:      Fence;
    flags:      FenceImportFlags;
    handleType: ExternalFenceHandleTypeFlagBits;
    fd:         s32;
}

FenceGetFdInfoKHR :: struct {
    sType:      StructureType = .FENCE_GET_FD_INFO_KHR;
    pNext:      *void;
    fence:      Fence;
    handleType: ExternalFenceHandleTypeFlagBits;
}

PFN_vkImportFenceFdKHR :: #type (device: Device, pImportFenceFdInfo: *ImportFenceFdInfoKHR) -> Result #c_call;
PFN_vkGetFenceFdKHR :: #type (device: Device, pGetFdInfo: *FenceGetFdInfoKHR, pFd: *s32) -> Result #c_call;

ImportFenceFdKHR: #type (device: Device, pImportFenceFdInfo: *ImportFenceFdInfoKHR) -> Result #c_call;

GetFenceFdKHR: #type (device: Device, pGetFdInfo: *FenceGetFdInfoKHR, pFd: *s32) -> Result #c_call;

PerformanceCounterUnitKHR :: enum u32 {
    GENERIC_KHR          :: 0;
    PERCENTAGE_KHR       :: 1;
    NANOSECONDS_KHR      :: 2;
    BYTES_KHR            :: 3;
    BYTES_PER_SECOND_KHR :: 4;
    KELVIN_KHR           :: 5;
    WATTS_KHR            :: 6;
    VOLTS_KHR            :: 7;
    AMPS_KHR             :: 8;
    HERTZ_KHR            :: 9;
    CYCLES_KHR           :: 10;
    MAX_ENUM_KHR         :: 2147483647;

    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR          :: GENERIC_KHR;
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR       :: PERCENTAGE_KHR;
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR      :: NANOSECONDS_KHR;
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR            :: BYTES_KHR;
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR :: BYTES_PER_SECOND_KHR;
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR           :: KELVIN_KHR;
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR            :: WATTS_KHR;
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR            :: VOLTS_KHR;
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR             :: AMPS_KHR;
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR            :: HERTZ_KHR;
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR           :: CYCLES_KHR;
    VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR         :: MAX_ENUM_KHR;
}

PerformanceCounterScopeKHR :: enum u32 {
    PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR :: 0;
    PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR    :: 1;
    PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR        :: 2;
    QUERY_SCOPE_COMMAND_BUFFER_KHR               :: 0;
    QUERY_SCOPE_RENDER_PASS_KHR                  :: 1;
    QUERY_SCOPE_COMMAND_KHR                      :: 2;
    PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR       :: 2147483647;

    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR :: PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR;
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR    :: PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR;
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR        :: PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR;
    VK_QUERY_SCOPE_COMMAND_BUFFER_KHR               :: QUERY_SCOPE_COMMAND_BUFFER_KHR;
    VK_QUERY_SCOPE_RENDER_PASS_KHR                  :: QUERY_SCOPE_RENDER_PASS_KHR;
    VK_QUERY_SCOPE_COMMAND_KHR                      :: QUERY_SCOPE_COMMAND_KHR;
    VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR       :: PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR;
}

PerformanceCounterStorageKHR :: enum u32 {
    INT32_KHR    :: 0;
    INT64_KHR    :: 1;
    UINT32_KHR   :: 2;
    UINT64_KHR   :: 3;
    FLOAT32_KHR  :: 4;
    FLOAT64_KHR  :: 5;
    MAX_ENUM_KHR :: 2147483647;

    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR    :: INT32_KHR;
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR    :: INT64_KHR;
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR   :: UINT32_KHR;
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR   :: UINT64_KHR;
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR  :: FLOAT32_KHR;
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR  :: FLOAT64_KHR;
    VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR :: MAX_ENUM_KHR;
}

PerformanceCounterDescriptionFlagBitsKHR :: enum_flags u32 {
    PERFORMANCE_IMPACTING_KHR :: 0x1;
    CONCURRENTLY_IMPACTED_KHR :: 0x2;

    FLAG_BITS_MAX_ENUM_KHR    :: 0x7fffffff;

    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR :: PERFORMANCE_IMPACTING_KHR;
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR :: CONCURRENTLY_IMPACTED_KHR;

    VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR        :: FLAG_BITS_MAX_ENUM_KHR;
}

PerformanceCounterDescriptionFlagsKHR :: PerformanceCounterDescriptionFlagBitsKHR;

AcquireProfilingLockFlagBitsKHR :: enum_flags u32 {
    ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR :: 0x7fffffff;
    VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR :: ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR;
}

AcquireProfilingLockFlagsKHR :: AcquireProfilingLockFlagBitsKHR;
PhysicalDevicePerformanceQueryFeaturesKHR :: struct {
    sType:                                StructureType = .PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
    pNext:                                *void;
    performanceCounterQueryPools:         Bool32;
    performanceCounterMultipleQueryPools: Bool32;
}

PhysicalDevicePerformanceQueryPropertiesKHR :: struct {
    sType:                         StructureType = .PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR;
    pNext:                         *void;
    allowCommandBufferQueryCopies: Bool32;
}

PerformanceCounterKHR :: struct {
    sType:   StructureType = .PERFORMANCE_COUNTER_KHR;
    pNext:   *void;
    unit:    PerformanceCounterUnitKHR;
    scope:   PerformanceCounterScopeKHR;
    storage: PerformanceCounterStorageKHR;
    uuid:    [16] u8;
}

PerformanceCounterDescriptionKHR :: struct {
    sType:       StructureType = .PERFORMANCE_COUNTER_DESCRIPTION_KHR;
    pNext:       *void;
    flags:       PerformanceCounterDescriptionFlagsKHR;
    name:        [256] u8;
    category:    [256] u8;
    description: [256] u8;
}

QueryPoolPerformanceCreateInfoKHR :: struct {
    sType:             StructureType = .QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;
    pNext:             *void;
    queueFamilyIndex:  u32;
    counterIndexCount: u32;
    pCounterIndices:   *u32;
}

PerformanceCounterResultKHR :: union {
    int32:    s32;
    int64:    s64;
    uint32:   u32;
    uint64:   u64;
    _float32: float;
    _float64: float64;
}

AcquireProfilingLockInfoKHR :: struct {
    sType:   StructureType = .ACQUIRE_PROFILING_LOCK_INFO_KHR;
    pNext:   *void;
    flags:   AcquireProfilingLockFlagsKHR;
    timeout: u64;
}

PerformanceQuerySubmitInfoKHR :: struct {
    sType:            StructureType = .PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
    pNext:            *void;
    counterPassIndex: u32;
}

PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR :: #type (physicalDevice: PhysicalDevice, queueFamilyIndex: u32, pCounterCount: *u32, pCounters: *PerformanceCounterKHR, pCounterDescriptions: *PerformanceCounterDescriptionKHR) -> Result #c_call;
PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR :: #type (physicalDevice: PhysicalDevice, pPerformanceQueryCreateInfo: *QueryPoolPerformanceCreateInfoKHR, pNumPasses: *u32) -> void #c_call;
PFN_vkAcquireProfilingLockKHR :: #type (device: Device, pInfo: *AcquireProfilingLockInfoKHR) -> Result #c_call;
PFN_vkReleaseProfilingLockKHR :: #type (device: Device) -> void #c_call;

EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR: #type (physicalDevice: PhysicalDevice, queueFamilyIndex: u32, pCounterCount: *u32, pCounters: *PerformanceCounterKHR, pCounterDescriptions: *PerformanceCounterDescriptionKHR) -> Result #c_call;

GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR: #type (physicalDevice: PhysicalDevice, pPerformanceQueryCreateInfo: *QueryPoolPerformanceCreateInfoKHR, pNumPasses: *u32) -> void #c_call;

AcquireProfilingLockKHR: #type (device: Device, pInfo: *AcquireProfilingLockInfoKHR) -> Result #c_call;

ReleaseProfilingLockKHR: #type (device: Device) -> void #c_call;

PointClippingBehaviorKHR :: PointClippingBehavior;

TessellationDomainOriginKHR :: TessellationDomainOrigin;

PhysicalDevicePointClippingPropertiesKHR :: PhysicalDevicePointClippingProperties;

RenderPassInputAttachmentAspectCreateInfoKHR :: RenderPassInputAttachmentAspectCreateInfo;

InputAttachmentAspectReferenceKHR :: InputAttachmentAspectReference;

ImageViewUsageCreateInfoKHR :: ImageViewUsageCreateInfo;

PipelineTessellationDomainOriginStateCreateInfoKHR :: PipelineTessellationDomainOriginStateCreateInfo;

PhysicalDeviceSurfaceInfo2KHR :: struct {
    sType:   StructureType = .PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
    pNext:   *void;
    surface: SurfaceKHR;
}

SurfaceCapabilities2KHR :: struct {
    sType:               StructureType = .SURFACE_CAPABILITIES_2_KHR;
    pNext:               *void;
    surfaceCapabilities: SurfaceCapabilitiesKHR;
}

SurfaceFormat2KHR :: struct {
    sType:         StructureType = .SURFACE_FORMAT_2_KHR;
    pNext:         *void;
    surfaceFormat: SurfaceFormatKHR;
}

PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR :: #type (physicalDevice: PhysicalDevice, pSurfaceInfo: *PhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: *SurfaceCapabilities2KHR) -> Result #c_call;
PFN_vkGetPhysicalDeviceSurfaceFormats2KHR :: #type (physicalDevice: PhysicalDevice, pSurfaceInfo: *PhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: *u32, pSurfaceFormats: *SurfaceFormat2KHR) -> Result #c_call;

GetPhysicalDeviceSurfaceCapabilities2KHR: #type (physicalDevice: PhysicalDevice, pSurfaceInfo: *PhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: *SurfaceCapabilities2KHR) -> Result #c_call;

GetPhysicalDeviceSurfaceFormats2KHR: #type (physicalDevice: PhysicalDevice, pSurfaceInfo: *PhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: *u32, pSurfaceFormats: *SurfaceFormat2KHR) -> Result #c_call;

PhysicalDeviceVariablePointerFeaturesKHR :: PhysicalDeviceVariablePointersFeatures;

PhysicalDeviceVariablePointersFeaturesKHR :: PhysicalDeviceVariablePointersFeatures;

DisplayProperties2KHR :: struct {
    sType:             StructureType = .DISPLAY_PROPERTIES_2_KHR;
    pNext:             *void;
    displayProperties: DisplayPropertiesKHR;
}

DisplayPlaneProperties2KHR :: struct {
    sType:                  StructureType = .DISPLAY_PLANE_PROPERTIES_2_KHR;
    pNext:                  *void;
    displayPlaneProperties: DisplayPlanePropertiesKHR;
}

DisplayModeProperties2KHR :: struct {
    sType:                 StructureType = .DISPLAY_MODE_PROPERTIES_2_KHR;
    pNext:                 *void;
    displayModeProperties: DisplayModePropertiesKHR;
}

DisplayPlaneInfo2KHR :: struct {
    sType:      StructureType = .DISPLAY_PLANE_INFO_2_KHR;
    pNext:      *void;
    mode:       DisplayModeKHR;
    planeIndex: u32;
}

DisplayPlaneCapabilities2KHR :: struct {
    sType:        StructureType = .DISPLAY_PLANE_CAPABILITIES_2_KHR;
    pNext:        *void;
    capabilities: DisplayPlaneCapabilitiesKHR;
}

PFN_vkGetPhysicalDeviceDisplayProperties2KHR :: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *DisplayProperties2KHR) -> Result #c_call;
PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR :: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *DisplayPlaneProperties2KHR) -> Result #c_call;
PFN_vkGetDisplayModeProperties2KHR :: #type (physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: *u32, pProperties: *DisplayModeProperties2KHR) -> Result #c_call;
PFN_vkGetDisplayPlaneCapabilities2KHR :: #type (physicalDevice: PhysicalDevice, pDisplayPlaneInfo: *DisplayPlaneInfo2KHR, pCapabilities: *DisplayPlaneCapabilities2KHR) -> Result #c_call;

GetPhysicalDeviceDisplayProperties2KHR: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *DisplayProperties2KHR) -> Result #c_call;

GetPhysicalDeviceDisplayPlaneProperties2KHR: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *DisplayPlaneProperties2KHR) -> Result #c_call;

GetDisplayModeProperties2KHR: #type (physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: *u32, pProperties: *DisplayModeProperties2KHR) -> Result #c_call;

GetDisplayPlaneCapabilities2KHR: #type (physicalDevice: PhysicalDevice, pDisplayPlaneInfo: *DisplayPlaneInfo2KHR, pCapabilities: *DisplayPlaneCapabilities2KHR) -> Result #c_call;

MemoryDedicatedRequirementsKHR :: MemoryDedicatedRequirements;

MemoryDedicatedAllocateInfoKHR :: MemoryDedicatedAllocateInfo;

BufferMemoryRequirementsInfo2KHR :: BufferMemoryRequirementsInfo2;

ImageMemoryRequirementsInfo2KHR :: ImageMemoryRequirementsInfo2;

ImageSparseMemoryRequirementsInfo2KHR :: ImageSparseMemoryRequirementsInfo2;

MemoryRequirements2KHR :: MemoryRequirements2;

SparseImageMemoryRequirements2KHR :: SparseImageMemoryRequirements2;

PFN_vkGetImageMemoryRequirements2KHR :: #type (device: Device, pInfo: *ImageMemoryRequirementsInfo2, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;
PFN_vkGetBufferMemoryRequirements2KHR :: #type (device: Device, pInfo: *BufferMemoryRequirementsInfo2, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;
PFN_vkGetImageSparseMemoryRequirements2KHR :: #type (device: Device, pInfo: *ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *SparseImageMemoryRequirements2) -> void #c_call;

GetImageMemoryRequirements2KHR: #type (device: Device, pInfo: *ImageMemoryRequirementsInfo2, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;

GetBufferMemoryRequirements2KHR: #type (device: Device, pInfo: *BufferMemoryRequirementsInfo2, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;

GetImageSparseMemoryRequirements2KHR: #type (device: Device, pInfo: *ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *SparseImageMemoryRequirements2) -> void #c_call;

ImageFormatListCreateInfoKHR :: ImageFormatListCreateInfo;

SamplerYcbcrConversionKHR :: SamplerYcbcrConversion;

SamplerYcbcrModelConversionKHR :: SamplerYcbcrModelConversion;

SamplerYcbcrRangeKHR :: SamplerYcbcrRange;

ChromaLocationKHR :: ChromaLocation;

SamplerYcbcrConversionCreateInfoKHR :: SamplerYcbcrConversionCreateInfo;

SamplerYcbcrConversionInfoKHR :: SamplerYcbcrConversionInfo;

BindImagePlaneMemoryInfoKHR :: BindImagePlaneMemoryInfo;

ImagePlaneMemoryRequirementsInfoKHR :: ImagePlaneMemoryRequirementsInfo;

PhysicalDeviceSamplerYcbcrConversionFeaturesKHR :: PhysicalDeviceSamplerYcbcrConversionFeatures;

SamplerYcbcrConversionImageFormatPropertiesKHR :: SamplerYcbcrConversionImageFormatProperties;

PFN_vkCreateSamplerYcbcrConversionKHR :: #type (device: Device, pCreateInfo: *SamplerYcbcrConversionCreateInfo, pAllocator: *AllocationCallbacks, pYcbcrConversion: *SamplerYcbcrConversion) -> Result #c_call;
PFN_vkDestroySamplerYcbcrConversionKHR :: #type (device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: *AllocationCallbacks) -> void #c_call;

CreateSamplerYcbcrConversionKHR: #type (device: Device, pCreateInfo: *SamplerYcbcrConversionCreateInfo, pAllocator: *AllocationCallbacks, pYcbcrConversion: *SamplerYcbcrConversion) -> Result #c_call;

DestroySamplerYcbcrConversionKHR: #type (device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: *AllocationCallbacks) -> void #c_call;

BindBufferMemoryInfoKHR :: BindBufferMemoryInfo;

BindImageMemoryInfoKHR :: BindImageMemoryInfo;

PFN_vkBindBufferMemory2KHR :: #type (device: Device, bindInfoCount: u32, pBindInfos: *BindBufferMemoryInfo) -> Result #c_call;
PFN_vkBindImageMemory2KHR :: #type (device: Device, bindInfoCount: u32, pBindInfos: *BindImageMemoryInfo) -> Result #c_call;

BindBufferMemory2KHR: #type (device: Device, bindInfoCount: u32, pBindInfos: *BindBufferMemoryInfo) -> Result #c_call;

BindImageMemory2KHR: #type (device: Device, bindInfoCount: u32, pBindInfos: *BindImageMemoryInfo) -> Result #c_call;

PhysicalDeviceMaintenance3PropertiesKHR :: PhysicalDeviceMaintenance3Properties;

DescriptorSetLayoutSupportKHR :: DescriptorSetLayoutSupport;

PFN_vkGetDescriptorSetLayoutSupportKHR :: #type (device: Device, pCreateInfo: *DescriptorSetLayoutCreateInfo, pSupport: *DescriptorSetLayoutSupport) -> void #c_call;

GetDescriptorSetLayoutSupportKHR: #type (device: Device, pCreateInfo: *DescriptorSetLayoutCreateInfo, pSupport: *DescriptorSetLayoutSupport) -> void #c_call;

PFN_vkCmdDrawIndirectCountKHR :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;
PFN_vkCmdDrawIndexedIndirectCountKHR :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

CmdDrawIndirectCountKHR: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

CmdDrawIndexedIndirectCountKHR: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR :: PhysicalDeviceShaderSubgroupExtendedTypesFeatures;

PhysicalDevice8BitStorageFeaturesKHR :: PhysicalDevice8BitStorageFeatures;

PhysicalDeviceShaderAtomicInt64FeaturesKHR :: PhysicalDeviceShaderAtomicInt64Features;

PhysicalDeviceShaderClockFeaturesKHR :: struct {
    sType:               StructureType = .PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
    pNext:               *void;
    shaderSubgroupClock: Bool32;
    shaderDeviceClock:   Bool32;
}

StdVideoH265ChromaFormatIdc :: enum u32 {
    MONOCHROME :: 0;
    _420       :: 1;
    _422       :: 2;
    _444       :: 3;
    INVALID    :: 2147483647;
    MAX_ENUM   :: 2147483647;

    STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME :: MONOCHROME;
    STD_VIDEO_H265_CHROMA_FORMAT_IDC_420        :: _420;
    STD_VIDEO_H265_CHROMA_FORMAT_IDC_422        :: _422;
    STD_VIDEO_H265_CHROMA_FORMAT_IDC_444        :: _444;
    STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID    :: INVALID;
    STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM   :: MAX_ENUM;
}

StdVideoH265ProfileIdc :: enum u32 {
    MAIN                    :: 1;
    MAIN_10                 :: 2;
    MAIN_STILL_PICTURE      :: 3;
    FORMAT_RANGE_EXTENSIONS :: 4;
    SCC_EXTENSIONS          :: 9;
    INVALID                 :: 2147483647;
    MAX_ENUM                :: 2147483647;

    STD_VIDEO_H265_PROFILE_IDC_MAIN                    :: MAIN;
    STD_VIDEO_H265_PROFILE_IDC_MAIN_10                 :: MAIN_10;
    STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE      :: MAIN_STILL_PICTURE;
    STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS :: FORMAT_RANGE_EXTENSIONS;
    STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS          :: SCC_EXTENSIONS;
    STD_VIDEO_H265_PROFILE_IDC_INVALID                 :: INVALID;
    STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM                :: MAX_ENUM;
}

StdVideoH265LevelIdc :: enum u32 {
    _1_0     :: 0;
    _2_0     :: 1;
    _2_1     :: 2;
    _3_0     :: 3;
    _3_1     :: 4;
    _4_0     :: 5;
    _4_1     :: 6;
    _5_0     :: 7;
    _5_1     :: 8;
    _5_2     :: 9;
    _6_0     :: 10;
    _6_1     :: 11;
    _6_2     :: 12;
    INVALID  :: 2147483647;
    MAX_ENUM :: 2147483647;

    STD_VIDEO_H265_LEVEL_IDC_1_0      :: _1_0;
    STD_VIDEO_H265_LEVEL_IDC_2_0      :: _2_0;
    STD_VIDEO_H265_LEVEL_IDC_2_1      :: _2_1;
    STD_VIDEO_H265_LEVEL_IDC_3_0      :: _3_0;
    STD_VIDEO_H265_LEVEL_IDC_3_1      :: _3_1;
    STD_VIDEO_H265_LEVEL_IDC_4_0      :: _4_0;
    STD_VIDEO_H265_LEVEL_IDC_4_1      :: _4_1;
    STD_VIDEO_H265_LEVEL_IDC_5_0      :: _5_0;
    STD_VIDEO_H265_LEVEL_IDC_5_1      :: _5_1;
    STD_VIDEO_H265_LEVEL_IDC_5_2      :: _5_2;
    STD_VIDEO_H265_LEVEL_IDC_6_0      :: _6_0;
    STD_VIDEO_H265_LEVEL_IDC_6_1      :: _6_1;
    STD_VIDEO_H265_LEVEL_IDC_6_2      :: _6_2;
    STD_VIDEO_H265_LEVEL_IDC_INVALID  :: INVALID;
    STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM :: MAX_ENUM;
}

StdVideoH265SliceType :: enum u32 {
    B        :: 0;
    P        :: 1;
    I        :: 2;
    INVALID  :: 2147483647;
    MAX_ENUM :: 2147483647;

    STD_VIDEO_H265_SLICE_TYPE_B        :: B;
    STD_VIDEO_H265_SLICE_TYPE_P        :: P;
    STD_VIDEO_H265_SLICE_TYPE_I        :: I;
    STD_VIDEO_H265_SLICE_TYPE_INVALID  :: INVALID;
    STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM :: MAX_ENUM;
}

StdVideoH265PictureType :: enum u32 {
    P        :: 0;
    B        :: 1;
    I        :: 2;
    IDR      :: 3;
    INVALID  :: 2147483647;
    MAX_ENUM :: 2147483647;

    STD_VIDEO_H265_PICTURE_TYPE_P        :: P;
    STD_VIDEO_H265_PICTURE_TYPE_B        :: B;
    STD_VIDEO_H265_PICTURE_TYPE_I        :: I;
    STD_VIDEO_H265_PICTURE_TYPE_IDR      :: IDR;
    STD_VIDEO_H265_PICTURE_TYPE_INVALID  :: INVALID;
    STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM :: MAX_ENUM;
}

StdVideoH265AspectRatioIdc :: enum u32 {
    UNSPECIFIED  :: 0;
    SQUARE       :: 1;
    _12_11       :: 2;
    _10_11       :: 3;
    _16_11       :: 4;
    _40_33       :: 5;
    _24_11       :: 6;
    _20_11       :: 7;
    _32_11       :: 8;
    _80_33       :: 9;
    _18_11       :: 10;
    _15_11       :: 11;
    _64_33       :: 12;
    _160_99      :: 13;
    _4_3         :: 14;
    _3_2         :: 15;
    _2_1         :: 16;
    EXTENDED_SAR :: 255;
    INVALID      :: 2147483647;
    MAX_ENUM     :: 2147483647;

    STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED  :: UNSPECIFIED;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE       :: SQUARE;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11        :: _12_11;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11        :: _10_11;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11        :: _16_11;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33        :: _40_33;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11        :: _24_11;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11        :: _20_11;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11        :: _32_11;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33        :: _80_33;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11        :: _18_11;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11        :: _15_11;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33        :: _64_33;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99       :: _160_99;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3          :: _4_3;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2          :: _3_2;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1          :: _2_1;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR :: EXTENDED_SAR;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID      :: INVALID;
    STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM     :: MAX_ENUM;
}

StdVideoH265DecPicBufMgr :: struct {
    max_latency_increase_plus1:   [7] u32;
    max_dec_pic_buffering_minus1: [7] u8;
    max_num_reorder_pics:         [7] u8;
}

StdVideoH265SubLayerHrdParameters :: struct {
    bit_rate_value_minus1:    [32] u32;
    cpb_size_value_minus1:    [32] u32;
    cpb_size_du_value_minus1: [32] u32;
    bit_rate_du_value_minus1: [32] u32;
    cbr_flag:                 u32;
}

StdVideoH265HrdFlags :: struct {
    nal_hrd_parameters_present_flag:           u32;
    #place nal_hrd_parameters_present_flag; /*bitfield 1*/ vcl_hrd_parameters_present_flag:           u32;
    #place nal_hrd_parameters_present_flag; /*bitfield 2*/ sub_pic_hrd_params_present_flag:           u32;
    #place nal_hrd_parameters_present_flag; /*bitfield 3*/ sub_pic_cpb_params_in_pic_timing_sei_flag: u32;
    #place nal_hrd_parameters_present_flag; /*bitfield 4*/ fixed_pic_rate_general_flag:               u32;
    #place nal_hrd_parameters_present_flag; /*bitfield 12*/ fixed_pic_rate_within_cvs_flag:            u32;
    #place nal_hrd_parameters_present_flag; /*bitfield 20*/ low_delay_hrd_flag:                        u32;
}

StdVideoH265HrdParameters :: struct {
    flags:                                        StdVideoH265HrdFlags;
    tick_divisor_minus2:                          u8;
    du_cpb_removal_delay_increment_length_minus1: u8;
    dpb_output_delay_du_length_minus1:            u8;
    bit_rate_scale:                               u8;
    cpb_size_scale:                               u8;
    cpb_size_du_scale:                            u8;
    initial_cpb_removal_delay_length_minus1:      u8;
    au_cpb_removal_delay_length_minus1:           u8;
    dpb_output_delay_length_minus1:               u8;
    cpb_cnt_minus1:                               [7] u8;
    elemental_duration_in_tc_minus1:              [7] u16;
    reserved:                                     [3] u16;
    pSubLayerHrdParametersNal:                    *StdVideoH265SubLayerHrdParameters;
    pSubLayerHrdParametersVcl:                    *StdVideoH265SubLayerHrdParameters;
}

StdVideoH265VpsFlags :: struct {
    vps_temporal_id_nesting_flag:             u32;
    #place vps_temporal_id_nesting_flag; /*bitfield 1*/ vps_sub_layer_ordering_info_present_flag: u32;
    #place vps_temporal_id_nesting_flag; /*bitfield 2*/ vps_timing_info_present_flag:             u32;
    #place vps_temporal_id_nesting_flag; /*bitfield 3*/ vps_poc_proportional_to_timing_flag:      u32;
}

StdVideoH265ProfileTierLevelFlags :: struct {
    general_tier_flag:                  u32;
    #place general_tier_flag; /*bitfield 1*/ general_progressive_source_flag:    u32;
    #place general_tier_flag; /*bitfield 2*/ general_interlaced_source_flag:     u32;
    #place general_tier_flag; /*bitfield 3*/ general_non_packed_constraint_flag: u32;
    #place general_tier_flag; /*bitfield 4*/ general_frame_only_constraint_flag: u32;
}

StdVideoH265ProfileTierLevel :: struct {
    flags:               StdVideoH265ProfileTierLevelFlags;
    general_profile_idc: StdVideoH265ProfileIdc;
    general_level_idc:   StdVideoH265LevelIdc;
}

StdVideoH265VideoParameterSet :: struct {
    flags:                             StdVideoH265VpsFlags;
    vps_video_parameter_set_id:        u8;
    vps_max_sub_layers_minus1:         u8;
    reserved1:                         u8;
    reserved2:                         u8;
    vps_num_units_in_tick:             u32;
    vps_time_scale:                    u32;
    vps_num_ticks_poc_diff_one_minus1: u32;
    reserved3:                         u32;
    pDecPicBufMgr:                     *StdVideoH265DecPicBufMgr;
    pHrdParameters:                    *StdVideoH265HrdParameters;
    pProfileTierLevel:                 *StdVideoH265ProfileTierLevel;
}

StdVideoH265ScalingLists :: struct {
    ScalingList4x4:         [6] [16] u8;
    ScalingList8x8:         [6] [64] u8;
    ScalingList16x16:       [6] [64] u8;
    ScalingList32x32:       [2] [64] u8;
    ScalingListDCCoef16x16: [6] u8;
    ScalingListDCCoef32x32: [2] u8;
}

StdVideoH265SpsVuiFlags :: struct {
    aspect_ratio_info_present_flag:          u32;
    #place aspect_ratio_info_present_flag; /*bitfield 1*/ overscan_info_present_flag:              u32;
    #place aspect_ratio_info_present_flag; /*bitfield 2*/ overscan_appropriate_flag:               u32;
    #place aspect_ratio_info_present_flag; /*bitfield 3*/ video_signal_type_present_flag:          u32;
    #place aspect_ratio_info_present_flag; /*bitfield 4*/ video_full_range_flag:                   u32;
    #place aspect_ratio_info_present_flag; /*bitfield 5*/ colour_description_present_flag:         u32;
    #place aspect_ratio_info_present_flag; /*bitfield 6*/ chroma_loc_info_present_flag:            u32;
    #place aspect_ratio_info_present_flag; /*bitfield 7*/ neutral_chroma_indication_flag:          u32;
    #place aspect_ratio_info_present_flag; /*bitfield 8*/ field_seq_flag:                          u32;
    #place aspect_ratio_info_present_flag; /*bitfield 9*/ frame_field_info_present_flag:           u32;
    #place aspect_ratio_info_present_flag; /*bitfield 10*/ default_display_window_flag:             u32;
    #place aspect_ratio_info_present_flag; /*bitfield 11*/ vui_timing_info_present_flag:            u32;
    #place aspect_ratio_info_present_flag; /*bitfield 12*/ vui_poc_proportional_to_timing_flag:     u32;
    #place aspect_ratio_info_present_flag; /*bitfield 13*/ vui_hrd_parameters_present_flag:         u32;
    #place aspect_ratio_info_present_flag; /*bitfield 14*/ bitstream_restriction_flag:              u32;
    #place aspect_ratio_info_present_flag; /*bitfield 15*/ tiles_fixed_structure_flag:              u32;
    #place aspect_ratio_info_present_flag; /*bitfield 16*/ motion_vectors_over_pic_boundaries_flag: u32;
    #place aspect_ratio_info_present_flag; /*bitfield 17*/ restricted_ref_pic_lists_flag:           u32;
}

StdVideoH265SequenceParameterSetVui :: struct {
    flags:                               StdVideoH265SpsVuiFlags;
    aspect_ratio_idc:                    StdVideoH265AspectRatioIdc;
    sar_width:                           u16;
    sar_height:                          u16;
    video_format:                        u8;
    colour_primaries:                    u8;
    transfer_characteristics:            u8;
    matrix_coeffs:                       u8;
    chroma_sample_loc_type_top_field:    u8;
    chroma_sample_loc_type_bottom_field: u8;
    reserved1:                           u8;
    reserved2:                           u8;
    def_disp_win_left_offset:            u16;
    def_disp_win_right_offset:           u16;
    def_disp_win_top_offset:             u16;
    def_disp_win_bottom_offset:          u16;
    vui_num_units_in_tick:               u32;
    vui_time_scale:                      u32;
    vui_num_ticks_poc_diff_one_minus1:   u32;
    min_spatial_segmentation_idc:        u16;
    reserved3:                           u16;
    max_bytes_per_pic_denom:             u8;
    max_bits_per_min_cu_denom:           u8;
    log2_max_mv_length_horizontal:       u8;
    log2_max_mv_length_vertical:         u8;
    pHrdParameters:                      *StdVideoH265HrdParameters;
}

StdVideoH265PredictorPaletteEntries :: struct {
    PredictorPaletteEntries: [3] [128] u16;
}

StdVideoH265SpsFlags :: struct {
    sps_temporal_id_nesting_flag:                    u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 1*/ separate_colour_plane_flag:                      u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 2*/ conformance_window_flag:                         u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 3*/ sps_sub_layer_ordering_info_present_flag:        u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 4*/ scaling_list_enabled_flag:                       u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 5*/ sps_scaling_list_data_present_flag:              u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 6*/ amp_enabled_flag:                                u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 7*/ sample_adaptive_offset_enabled_flag:             u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 8*/ pcm_enabled_flag:                                u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 9*/ pcm_loop_filter_disabled_flag:                   u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 10*/ long_term_ref_pics_present_flag:                 u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 11*/ sps_temporal_mvp_enabled_flag:                   u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 12*/ strong_intra_smoothing_enabled_flag:             u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 13*/ vui_parameters_present_flag:                     u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 14*/ sps_extension_present_flag:                      u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 15*/ sps_range_extension_flag:                        u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 16*/ transform_skip_rotation_enabled_flag:            u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 17*/ transform_skip_context_enabled_flag:             u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 18*/ implicit_rdpcm_enabled_flag:                     u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 19*/ explicit_rdpcm_enabled_flag:                     u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 20*/ extended_precision_processing_flag:              u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 21*/ intra_smoothing_disabled_flag:                   u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 22*/ high_precision_offsets_enabled_flag:             u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 23*/ persistent_rice_adaptation_enabled_flag:         u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 24*/ cabac_bypass_alignment_enabled_flag:             u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 25*/ sps_scc_extension_flag:                          u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 26*/ sps_curr_pic_ref_enabled_flag:                   u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 27*/ palette_mode_enabled_flag:                       u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 28*/ sps_palette_predictor_initializers_present_flag: u32;
    #place sps_temporal_id_nesting_flag; /*bitfield 29*/ intra_boundary_filtering_disabled_flag:          u32;
}

StdVideoH265ShortTermRefPicSetFlags :: struct {
    inter_ref_pic_set_prediction_flag: u32;
    #place inter_ref_pic_set_prediction_flag; /*bitfield 1*/ delta_rps_sign:                    u32;
}

StdVideoH265ShortTermRefPicSet :: struct {
    flags:                    StdVideoH265ShortTermRefPicSetFlags;
    delta_idx_minus1:         u32;
    use_delta_flag:           u16;
    abs_delta_rps_minus1:     u16;
    used_by_curr_pic_flag:    u16;
    used_by_curr_pic_s0_flag: u16;
    used_by_curr_pic_s1_flag: u16;
    reserved1:                u16;
    reserved2:                u8;
    reserved3:                u8;
    num_negative_pics:        u8;
    num_positive_pics:        u8;
    delta_poc_s0_minus1:      [16] u16;
    delta_poc_s1_minus1:      [16] u16;
}

StdVideoH265LongTermRefPicsSps :: struct {
    used_by_curr_pic_lt_sps_flag: u32;
    lt_ref_pic_poc_lsb_sps:       [32] u32;
}

StdVideoH265SequenceParameterSet :: struct {
    flags:                                         StdVideoH265SpsFlags;
    chroma_format_idc:                             StdVideoH265ChromaFormatIdc;
    pic_width_in_luma_samples:                     u32;
    pic_height_in_luma_samples:                    u32;
    sps_video_parameter_set_id:                    u8;
    sps_max_sub_layers_minus1:                     u8;
    sps_seq_parameter_set_id:                      u8;
    bit_depth_luma_minus8:                         u8;
    bit_depth_chroma_minus8:                       u8;
    log2_max_pic_order_cnt_lsb_minus4:             u8;
    log2_min_luma_coding_block_size_minus3:        u8;
    log2_diff_max_min_luma_coding_block_size:      u8;
    log2_min_luma_transform_block_size_minus2:     u8;
    log2_diff_max_min_luma_transform_block_size:   u8;
    max_transform_hierarchy_depth_inter:           u8;
    max_transform_hierarchy_depth_intra:           u8;
    num_short_term_ref_pic_sets:                   u8;
    num_long_term_ref_pics_sps:                    u8;
    pcm_sample_bit_depth_luma_minus1:              u8;
    pcm_sample_bit_depth_chroma_minus1:            u8;
    log2_min_pcm_luma_coding_block_size_minus3:    u8;
    log2_diff_max_min_pcm_luma_coding_block_size:  u8;
    reserved1:                                     u8;
    reserved2:                                     u8;
    palette_max_size:                              u8;
    delta_palette_max_predictor_size:              u8;
    motion_vector_resolution_control_idc:          u8;
    sps_num_palette_predictor_initializers_minus1: u8;
    conf_win_left_offset:                          u32;
    conf_win_right_offset:                         u32;
    conf_win_top_offset:                           u32;
    conf_win_bottom_offset:                        u32;
    pProfileTierLevel:                             *StdVideoH265ProfileTierLevel;
    pDecPicBufMgr:                                 *StdVideoH265DecPicBufMgr;
    pScalingLists:                                 *StdVideoH265ScalingLists;
    pShortTermRefPicSet:                           *StdVideoH265ShortTermRefPicSet;
    pLongTermRefPicsSps:                           *StdVideoH265LongTermRefPicsSps;
    pSequenceParameterSetVui:                      *StdVideoH265SequenceParameterSetVui;
    pPredictorPaletteEntries:                      *StdVideoH265PredictorPaletteEntries;
}

StdVideoH265PpsFlags :: struct {
    dependent_slice_segments_enabled_flag:           u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 1*/ output_flag_present_flag:                        u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 2*/ sign_data_hiding_enabled_flag:                   u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 3*/ cabac_init_present_flag:                         u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 4*/ constrained_intra_pred_flag:                     u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 5*/ transform_skip_enabled_flag:                     u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 6*/ cu_qp_delta_enabled_flag:                        u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 7*/ pps_slice_chroma_qp_offsets_present_flag:        u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 8*/ weighted_pred_flag:                              u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 9*/ weighted_bipred_flag:                            u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 10*/ transquant_bypass_enabled_flag:                  u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 11*/ tiles_enabled_flag:                              u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 12*/ entropy_coding_sync_enabled_flag:                u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 13*/ uniform_spacing_flag:                            u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 14*/ loop_filter_across_tiles_enabled_flag:           u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 15*/ pps_loop_filter_across_slices_enabled_flag:      u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 16*/ deblocking_filter_control_present_flag:          u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 17*/ deblocking_filter_override_enabled_flag:         u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 18*/ pps_deblocking_filter_disabled_flag:             u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 19*/ pps_scaling_list_data_present_flag:              u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 20*/ lists_modification_present_flag:                 u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 21*/ slice_segment_header_extension_present_flag:     u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 22*/ pps_extension_present_flag:                      u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 23*/ cross_component_prediction_enabled_flag:         u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 24*/ chroma_qp_offset_list_enabled_flag:              u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 25*/ pps_curr_pic_ref_enabled_flag:                   u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 26*/ residual_adaptive_colour_transform_enabled_flag: u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 27*/ pps_slice_act_qp_offsets_present_flag:           u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 28*/ pps_palette_predictor_initializers_present_flag: u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 29*/ monochrome_palette_flag:                         u32;
    #place dependent_slice_segments_enabled_flag; /*bitfield 30*/ pps_range_extension_flag:                        u32;
}

StdVideoH265PictureParameterSet :: struct {
    flags:                                     StdVideoH265PpsFlags;
    pps_pic_parameter_set_id:                  u8;
    pps_seq_parameter_set_id:                  u8;
    sps_video_parameter_set_id:                u8;
    num_extra_slice_header_bits:               u8;
    num_ref_idx_l0_default_active_minus1:      u8;
    num_ref_idx_l1_default_active_minus1:      u8;
    init_qp_minus26:                           s8;
    diff_cu_qp_delta_depth:                    u8;
    pps_cb_qp_offset:                          s8;
    pps_cr_qp_offset:                          s8;
    pps_beta_offset_div2:                      s8;
    pps_tc_offset_div2:                        s8;
    log2_parallel_merge_level_minus2:          u8;
    log2_max_transform_skip_block_size_minus2: u8;
    diff_cu_chroma_qp_offset_depth:            u8;
    chroma_qp_offset_list_len_minus1:          u8;
    cb_qp_offset_list:                         [6] s8;
    cr_qp_offset_list:                         [6] s8;
    log2_sao_offset_scale_luma:                u8;
    log2_sao_offset_scale_chroma:              u8;
    pps_act_y_qp_offset_plus5:                 s8;
    pps_act_cb_qp_offset_plus5:                s8;
    pps_act_cr_qp_offset_plus3:                s8;
    pps_num_palette_predictor_initializers:    u8;
    luma_bit_depth_entry_minus8:               u8;
    chroma_bit_depth_entry_minus8:             u8;
    num_tile_columns_minus1:                   u8;
    num_tile_rows_minus1:                      u8;
    reserved1:                                 u8;
    reserved2:                                 u8;
    column_width_minus1:                       [19] u16;
    row_height_minus1:                         [21] u16;
    reserved3:                                 u32;
    pScalingLists:                             *StdVideoH265ScalingLists;
    pPredictorPaletteEntries:                  *StdVideoH265PredictorPaletteEntries;
}

StdVideoDecodeH265PictureInfoFlags :: struct {
    IrapPicFlag:                     u32;
    #place IrapPicFlag; /*bitfield 1*/ IdrPicFlag:                      u32;
    #place IrapPicFlag; /*bitfield 2*/ IsReference:                     u32;
    #place IrapPicFlag; /*bitfield 3*/ short_term_ref_pic_set_sps_flag: u32;
}

StdVideoDecodeH265PictureInfo :: struct {
    flags:                        StdVideoDecodeH265PictureInfoFlags;
    sps_video_parameter_set_id:   u8;
    pps_seq_parameter_set_id:     u8;
    pps_pic_parameter_set_id:     u8;
    NumDeltaPocsOfRefRpsIdx:      u8;
    PicOrderCntVal:               s32;
    NumBitsForSTRefPicSetInSlice: u16;
    reserved:                     u16;
    RefPicSetStCurrBefore:        [8] u8;
    RefPicSetStCurrAfter:         [8] u8;
    RefPicSetLtCurr:              [8] u8;
}

StdVideoDecodeH265ReferenceInfoFlags :: struct {
    used_for_long_term_reference: u32;
    #place used_for_long_term_reference; /*bitfield 1*/ unused_for_reference:         u32;
}

StdVideoDecodeH265ReferenceInfo :: struct {
    flags:          StdVideoDecodeH265ReferenceInfoFlags;
    PicOrderCntVal: s32;
}

VideoDecodeH265ProfileInfoKHR :: struct {
    sType:         StructureType = .VIDEO_DECODE_H265_PROFILE_INFO_KHR;
    pNext:         *void;
    stdProfileIdc: StdVideoH265ProfileIdc;
}

VideoDecodeH265CapabilitiesKHR :: struct {
    sType:       StructureType = .VIDEO_DECODE_H265_CAPABILITIES_KHR;
    pNext:       *void;
    maxLevelIdc: StdVideoH265LevelIdc;
}

VideoDecodeH265SessionParametersAddInfoKHR :: struct {
    sType:       StructureType = .VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR;
    pNext:       *void;
    stdVPSCount: u32;
    pStdVPSs:    *StdVideoH265VideoParameterSet;
    stdSPSCount: u32;
    pStdSPSs:    *StdVideoH265SequenceParameterSet;
    stdPPSCount: u32;
    pStdPPSs:    *StdVideoH265PictureParameterSet;
}

VideoDecodeH265SessionParametersCreateInfoKHR :: struct {
    sType:              StructureType = .VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR;
    pNext:              *void;
    maxStdVPSCount:     u32;
    maxStdSPSCount:     u32;
    maxStdPPSCount:     u32;
    pParametersAddInfo: *VideoDecodeH265SessionParametersAddInfoKHR;
}

VideoDecodeH265PictureInfoKHR :: struct {
    sType:                StructureType = .VIDEO_DECODE_H265_PICTURE_INFO_KHR;
    pNext:                *void;
    pStdPictureInfo:      *StdVideoDecodeH265PictureInfo;
    sliceSegmentCount:    u32;
    pSliceSegmentOffsets: *u32;
}

VideoDecodeH265DpbSlotInfoKHR :: struct {
    sType:             StructureType = .VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR;
    pNext:             *void;
    pStdReferenceInfo: *StdVideoDecodeH265ReferenceInfo;
}

QueueGlobalPriorityKHR :: enum u32 {
    LOW_KHR      :: 128;
    MEDIUM_KHR   :: 256;
    HIGH_KHR     :: 512;
    REALTIME_KHR :: 1024;
    LOW_EXT      :: 128;
    MEDIUM_EXT   :: 256;
    HIGH_EXT     :: 512;
    REALTIME_EXT :: 1024;
    MAX_ENUM_KHR :: 2147483647;

    VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR      :: LOW_KHR;
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR   :: MEDIUM_KHR;
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR     :: HIGH_KHR;
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR :: REALTIME_KHR;
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT      :: LOW_EXT;
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT   :: MEDIUM_EXT;
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT     :: HIGH_EXT;
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT :: REALTIME_EXT;
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR :: MAX_ENUM_KHR;
}

DeviceQueueGlobalPriorityCreateInfoKHR :: struct {
    sType:          StructureType = .DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR;
    pNext:          *void;
    globalPriority: QueueGlobalPriorityKHR;
}

PhysicalDeviceGlobalPriorityQueryFeaturesKHR :: struct {
    sType:               StructureType = .PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR;
    pNext:               *void;
    globalPriorityQuery: Bool32;
}

QueueFamilyGlobalPriorityPropertiesKHR :: struct {
    sType:         StructureType = .QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR;
    pNext:         *void;
    priorityCount: u32;
    priorities:    [16] QueueGlobalPriorityKHR;
}

DriverIdKHR :: DriverId;

ConformanceVersionKHR :: ConformanceVersion;

PhysicalDeviceDriverPropertiesKHR :: PhysicalDeviceDriverProperties;

ShaderFloatControlsIndependenceKHR :: ShaderFloatControlsIndependence;

PhysicalDeviceFloatControlsPropertiesKHR :: PhysicalDeviceFloatControlsProperties;

ResolveModeFlagBitsKHR :: ResolveModeFlagBits;

ResolveModeFlagsKHR :: ResolveModeFlags;

SubpassDescriptionDepthStencilResolveKHR :: SubpassDescriptionDepthStencilResolve;

PhysicalDeviceDepthStencilResolvePropertiesKHR :: PhysicalDeviceDepthStencilResolveProperties;

SemaphoreTypeKHR :: SemaphoreType;

SemaphoreWaitFlagBitsKHR :: SemaphoreWaitFlagBits;

SemaphoreWaitFlagsKHR :: SemaphoreWaitFlags;

PhysicalDeviceTimelineSemaphoreFeaturesKHR :: PhysicalDeviceTimelineSemaphoreFeatures;

PhysicalDeviceTimelineSemaphorePropertiesKHR :: PhysicalDeviceTimelineSemaphoreProperties;

SemaphoreTypeCreateInfoKHR :: SemaphoreTypeCreateInfo;

TimelineSemaphoreSubmitInfoKHR :: TimelineSemaphoreSubmitInfo;

SemaphoreWaitInfoKHR :: SemaphoreWaitInfo;

SemaphoreSignalInfoKHR :: SemaphoreSignalInfo;

PFN_vkGetSemaphoreCounterValueKHR :: #type (device: Device, semaphore: Semaphore, pValue: *u64) -> Result #c_call;
PFN_vkWaitSemaphoresKHR :: #type (device: Device, pWaitInfo: *SemaphoreWaitInfo, timeout: u64) -> Result #c_call;
PFN_vkSignalSemaphoreKHR :: #type (device: Device, pSignalInfo: *SemaphoreSignalInfo) -> Result #c_call;

GetSemaphoreCounterValueKHR: #type (device: Device, semaphore: Semaphore, pValue: *u64) -> Result #c_call;

WaitSemaphoresKHR: #type (device: Device, pWaitInfo: *SemaphoreWaitInfo, timeout: u64) -> Result #c_call;

SignalSemaphoreKHR: #type (device: Device, pSignalInfo: *SemaphoreSignalInfo) -> Result #c_call;

PhysicalDeviceVulkanMemoryModelFeaturesKHR :: PhysicalDeviceVulkanMemoryModelFeatures;

PhysicalDeviceShaderTerminateInvocationFeaturesKHR :: PhysicalDeviceShaderTerminateInvocationFeatures;

FragmentShadingRateCombinerOpKHR :: enum u32 {
    KEEP_KHR     :: 0;
    REPLACE_KHR  :: 1;
    MIN_KHR      :: 2;
    MAX_KHR      :: 3;
    MUL_KHR      :: 4;
    MAX_ENUM_KHR :: 2147483647;

    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR     :: KEEP_KHR;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR  :: REPLACE_KHR;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR      :: MIN_KHR;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR      :: MAX_KHR;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR      :: MUL_KHR;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR :: MAX_ENUM_KHR;
}

FragmentShadingRateAttachmentInfoKHR :: struct {
    sType:                          StructureType = .FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
    pNext:                          *void;
    pFragmentShadingRateAttachment: *AttachmentReference2;
    shadingRateAttachmentTexelSize: Extent2D;
}

PipelineFragmentShadingRateStateCreateInfoKHR :: struct {
    sType:        StructureType = .PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
    pNext:        *void;
    fragmentSize: Extent2D;
    combinerOps:  [2] FragmentShadingRateCombinerOpKHR;
}

PhysicalDeviceFragmentShadingRateFeaturesKHR :: struct {
    sType:                         StructureType = .PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
    pNext:                         *void;
    pipelineFragmentShadingRate:   Bool32;
    primitiveFragmentShadingRate:  Bool32;
    attachmentFragmentShadingRate: Bool32;
}

PhysicalDeviceFragmentShadingRatePropertiesKHR :: struct {
    sType:                                                StructureType = .PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR;
    pNext:                                                *void;
    minFragmentShadingRateAttachmentTexelSize:            Extent2D;
    maxFragmentShadingRateAttachmentTexelSize:            Extent2D;
    maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32;
    primitiveFragmentShadingRateWithMultipleViewports:    Bool32;
    layeredShadingRateAttachments:                        Bool32;
    fragmentShadingRateNonTrivialCombinerOps:             Bool32;
    maxFragmentSize:                                      Extent2D;
    maxFragmentSizeAspectRatio:                           u32;
    maxFragmentShadingRateCoverageSamples:                u32;
    maxFragmentShadingRateRasterizationSamples:           SampleCountFlagBits;
    fragmentShadingRateWithShaderDepthStencilWrites:      Bool32;
    fragmentShadingRateWithSampleMask:                    Bool32;
    fragmentShadingRateWithShaderSampleMask:              Bool32;
    fragmentShadingRateWithConservativeRasterization:     Bool32;
    fragmentShadingRateWithFragmentShaderInterlock:       Bool32;
    fragmentShadingRateWithCustomSampleLocations:         Bool32;
    fragmentShadingRateStrictMultiplyCombiner:            Bool32;
}

PhysicalDeviceFragmentShadingRateKHR :: struct {
    sType:        StructureType = .PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR;
    pNext:        *void;
    sampleCounts: SampleCountFlags;
    fragmentSize: Extent2D;
}

PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR :: #type (physicalDevice: PhysicalDevice, pFragmentShadingRateCount: *u32, pFragmentShadingRates: *PhysicalDeviceFragmentShadingRateKHR) -> Result #c_call;
PFN_vkCmdSetFragmentShadingRateKHR :: #type (commandBuffer: CommandBuffer, pFragmentSize: *Extent2D, combinerOps: *[2] FragmentShadingRateCombinerOpKHR) -> void #c_call;

GetPhysicalDeviceFragmentShadingRatesKHR: #type (physicalDevice: PhysicalDevice, pFragmentShadingRateCount: *u32, pFragmentShadingRates: *PhysicalDeviceFragmentShadingRateKHR) -> Result #c_call;

CmdSetFragmentShadingRateKHR: #type (commandBuffer: CommandBuffer, pFragmentSize: *Extent2D, combinerOps: *[2] FragmentShadingRateCombinerOpKHR) -> void #c_call;

SurfaceProtectedCapabilitiesKHR :: struct {
    sType:             StructureType = .SURFACE_PROTECTED_CAPABILITIES_KHR;
    pNext:             *void;
    supportsProtected: Bool32;
}

PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR :: PhysicalDeviceSeparateDepthStencilLayoutsFeatures;

AttachmentReferenceStencilLayoutKHR :: AttachmentReferenceStencilLayout;

AttachmentDescriptionStencilLayoutKHR :: AttachmentDescriptionStencilLayout;

PhysicalDevicePresentWaitFeaturesKHR :: struct {
    sType:       StructureType = .PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR;
    pNext:       *void;
    presentWait: Bool32;
}

PFN_vkWaitForPresentKHR :: #type (device: Device, swapchain: SwapchainKHR, presentId: u64, timeout: u64) -> Result #c_call;

WaitForPresentKHR: #type (device: Device, swapchain: SwapchainKHR, presentId: u64, timeout: u64) -> Result #c_call;

PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR :: PhysicalDeviceUniformBufferStandardLayoutFeatures;

PhysicalDeviceBufferDeviceAddressFeaturesKHR :: PhysicalDeviceBufferDeviceAddressFeatures;

BufferDeviceAddressInfoKHR :: BufferDeviceAddressInfo;

BufferOpaqueCaptureAddressCreateInfoKHR :: BufferOpaqueCaptureAddressCreateInfo;

MemoryOpaqueCaptureAddressAllocateInfoKHR :: MemoryOpaqueCaptureAddressAllocateInfo;

DeviceMemoryOpaqueCaptureAddressInfoKHR :: DeviceMemoryOpaqueCaptureAddressInfo;

PFN_vkGetBufferDeviceAddressKHR :: #type (device: Device, pInfo: *BufferDeviceAddressInfo) -> DeviceAddress #c_call;
PFN_vkGetBufferOpaqueCaptureAddressKHR :: #type (device: Device, pInfo: *BufferDeviceAddressInfo) -> u64 #c_call;
PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR :: #type (device: Device, pInfo: *DeviceMemoryOpaqueCaptureAddressInfo) -> u64 #c_call;

GetBufferDeviceAddressKHR: #type (device: Device, pInfo: *BufferDeviceAddressInfo) -> DeviceAddress #c_call;

GetBufferOpaqueCaptureAddressKHR: #type (device: Device, pInfo: *BufferDeviceAddressInfo) -> u64 #c_call;

GetDeviceMemoryOpaqueCaptureAddressKHR: #type (device: Device, pInfo: *DeviceMemoryOpaqueCaptureAddressInfo) -> u64 #c_call;

DeferredOperationKHR_T :: struct {}
DeferredOperationKHR :: *DeferredOperationKHR_T;

PFN_vkCreateDeferredOperationKHR :: #type (device: Device, pAllocator: *AllocationCallbacks, pDeferredOperation: *DeferredOperationKHR) -> Result #c_call;
PFN_vkDestroyDeferredOperationKHR :: #type (device: Device, operation: DeferredOperationKHR, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkGetDeferredOperationMaxConcurrencyKHR :: #type (device: Device, operation: DeferredOperationKHR) -> u32 #c_call;
PFN_vkGetDeferredOperationResultKHR :: #type (device: Device, operation: DeferredOperationKHR) -> Result #c_call;
PFN_vkDeferredOperationJoinKHR :: #type (device: Device, operation: DeferredOperationKHR) -> Result #c_call;

CreateDeferredOperationKHR: #type (device: Device, pAllocator: *AllocationCallbacks, pDeferredOperation: *DeferredOperationKHR) -> Result #c_call;

DestroyDeferredOperationKHR: #type (device: Device, operation: DeferredOperationKHR, pAllocator: *AllocationCallbacks) -> void #c_call;

GetDeferredOperationMaxConcurrencyKHR: #type (device: Device, operation: DeferredOperationKHR) -> u32 #c_call;

GetDeferredOperationResultKHR: #type (device: Device, operation: DeferredOperationKHR) -> Result #c_call;

DeferredOperationJoinKHR: #type (device: Device, operation: DeferredOperationKHR) -> Result #c_call;

PipelineExecutableStatisticFormatKHR :: enum u32 {
    BOOL32_KHR   :: 0;
    INT64_KHR    :: 1;
    UINT64_KHR   :: 2;
    FLOAT64_KHR  :: 3;
    MAX_ENUM_KHR :: 2147483647;

    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR   :: BOOL32_KHR;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR    :: INT64_KHR;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR   :: UINT64_KHR;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR  :: FLOAT64_KHR;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR :: MAX_ENUM_KHR;
}

PhysicalDevicePipelineExecutablePropertiesFeaturesKHR :: struct {
    sType:                  StructureType = .PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
    pNext:                  *void;
    pipelineExecutableInfo: Bool32;
}

PipelineInfoKHR :: struct {
    sType:    StructureType = .PIPELINE_INFO_KHR;
    pNext:    *void;
    pipeline: Pipeline;
}

PipelineExecutablePropertiesKHR :: struct {
    sType:        StructureType = .PIPELINE_EXECUTABLE_PROPERTIES_KHR;
    pNext:        *void;
    stages:       ShaderStageFlags;
    name:         [256] u8;
    description:  [256] u8;
    subgroupSize: u32;
}

PipelineExecutableInfoKHR :: struct {
    sType:           StructureType = .PIPELINE_EXECUTABLE_INFO_KHR;
    pNext:           *void;
    pipeline:        Pipeline;
    executableIndex: u32;
}

PipelineExecutableStatisticValueKHR :: union {
    b32:  Bool32;
    i64:  s64;
    _u64: u64;
    f64:  float64;
}

PipelineExecutableStatisticKHR :: struct {
    sType:       StructureType = .PIPELINE_EXECUTABLE_STATISTIC_KHR;
    pNext:       *void;
    name:        [256] u8;
    description: [256] u8;
    format:      PipelineExecutableStatisticFormatKHR;
    value:       PipelineExecutableStatisticValueKHR;
}

PipelineExecutableInternalRepresentationKHR :: struct {
    sType:       StructureType = .PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR;
    pNext:       *void;
    name:        [256] u8;
    description: [256] u8;
    isText:      Bool32;
    dataSize:    u64;
    pData:       *void;
}

PFN_vkGetPipelineExecutablePropertiesKHR :: #type (device: Device, pPipelineInfo: *PipelineInfoKHR, pExecutableCount: *u32, pProperties: *PipelineExecutablePropertiesKHR) -> Result #c_call;
PFN_vkGetPipelineExecutableStatisticsKHR :: #type (device: Device, pExecutableInfo: *PipelineExecutableInfoKHR, pStatisticCount: *u32, pStatistics: *PipelineExecutableStatisticKHR) -> Result #c_call;
PFN_vkGetPipelineExecutableInternalRepresentationsKHR :: #type (device: Device, pExecutableInfo: *PipelineExecutableInfoKHR, pInternalRepresentationCount: *u32, pInternalRepresentations: *PipelineExecutableInternalRepresentationKHR) -> Result #c_call;

GetPipelineExecutablePropertiesKHR: #type (device: Device, pPipelineInfo: *PipelineInfoKHR, pExecutableCount: *u32, pProperties: *PipelineExecutablePropertiesKHR) -> Result #c_call;

GetPipelineExecutableStatisticsKHR: #type (device: Device, pExecutableInfo: *PipelineExecutableInfoKHR, pStatisticCount: *u32, pStatistics: *PipelineExecutableStatisticKHR) -> Result #c_call;

GetPipelineExecutableInternalRepresentationsKHR: #type (device: Device, pExecutableInfo: *PipelineExecutableInfoKHR, pInternalRepresentationCount: *u32, pInternalRepresentations: *PipelineExecutableInternalRepresentationKHR) -> Result #c_call;

MemoryUnmapFlagsKHR :: Flags;
MemoryMapInfoKHR :: struct {
    sType:  StructureType = .MEMORY_MAP_INFO_KHR;
    pNext:  *void;
    flags:  MemoryMapFlags;
    memory: DeviceMemory;
    offset: DeviceSize;
    size:   DeviceSize;
}

MemoryUnmapInfoKHR :: struct {
    sType:  StructureType = .MEMORY_UNMAP_INFO_KHR;
    pNext:  *void;
    flags:  MemoryUnmapFlagsKHR;
    memory: DeviceMemory;
}

PFN_vkMapMemory2KHR :: #type (device: Device, pMemoryMapInfo: *MemoryMapInfoKHR, ppData: **void) -> Result #c_call;
PFN_vkUnmapMemory2KHR :: #type (device: Device, pMemoryUnmapInfo: *MemoryUnmapInfoKHR) -> Result #c_call;

MapMemory2KHR: #type (device: Device, pMemoryMapInfo: *MemoryMapInfoKHR, ppData: **void) -> Result #c_call;

UnmapMemory2KHR: #type (device: Device, pMemoryUnmapInfo: *MemoryUnmapInfoKHR) -> Result #c_call;

PhysicalDeviceShaderIntegerDotProductFeaturesKHR :: PhysicalDeviceShaderIntegerDotProductFeatures;

PhysicalDeviceShaderIntegerDotProductPropertiesKHR :: PhysicalDeviceShaderIntegerDotProductProperties;

PipelineLibraryCreateInfoKHR :: struct {
    sType:        StructureType = .PIPELINE_LIBRARY_CREATE_INFO_KHR;
    pNext:        *void;
    libraryCount: u32;
    pLibraries:   *Pipeline;
}

PresentIdKHR :: struct {
    sType:          StructureType = .PRESENT_ID_KHR;
    pNext:          *void;
    swapchainCount: u32;
    pPresentIds:    *u64;
}

PhysicalDevicePresentIdFeaturesKHR :: struct {
    sType:     StructureType = .PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR;
    pNext:     *void;
    presentId: Bool32;
}

PipelineStageFlags2KHR :: PipelineStageFlags2;

PipelineStageFlagBits2KHR :: PipelineStageFlagBits2;

AccessFlags2KHR :: AccessFlags2;

AccessFlagBits2KHR :: AccessFlagBits2;

SubmitFlagBitsKHR :: SubmitFlagBits;

SubmitFlagsKHR :: SubmitFlags;

MemoryBarrier2KHR :: MemoryBarrier2;

BufferMemoryBarrier2KHR :: BufferMemoryBarrier2;

ImageMemoryBarrier2KHR :: ImageMemoryBarrier2;

DependencyInfoKHR :: DependencyInfo;

SubmitInfo2KHR :: SubmitInfo2;

SemaphoreSubmitInfoKHR :: SemaphoreSubmitInfo;

CommandBufferSubmitInfoKHR :: CommandBufferSubmitInfo;

PhysicalDeviceSynchronization2FeaturesKHR :: PhysicalDeviceSynchronization2Features;

QueueFamilyCheckpointProperties2NV :: struct {
    sType:                        StructureType = .QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV;
    pNext:                        *void;
    checkpointExecutionStageMask: PipelineStageFlags2;
}

CheckpointData2NV :: struct {
    sType:             StructureType = .CHECKPOINT_DATA_2_NV;
    pNext:             *void;
    stage:             PipelineStageFlags2;
    pCheckpointMarker: *void;
}

PFN_vkCmdSetEvent2KHR :: #type (commandBuffer: CommandBuffer, event: Event, pDependencyInfo: *DependencyInfo) -> void #c_call;
PFN_vkCmdResetEvent2KHR :: #type (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags2) -> void #c_call;
PFN_vkCmdWaitEvents2KHR :: #type (commandBuffer: CommandBuffer, eventCount: u32, pEvents: *Event, pDependencyInfos: *DependencyInfo) -> void #c_call;
PFN_vkCmdPipelineBarrier2KHR :: #type (commandBuffer: CommandBuffer, pDependencyInfo: *DependencyInfo) -> void #c_call;
PFN_vkCmdWriteTimestamp2KHR :: #type (commandBuffer: CommandBuffer, stage: PipelineStageFlags2, queryPool: QueryPool, query: u32) -> void #c_call;
PFN_vkQueueSubmit2KHR :: #type (queue: Queue, submitCount: u32, pSubmits: *SubmitInfo2, fence: Fence) -> Result #c_call;
PFN_vkCmdWriteBufferMarker2AMD :: #type (commandBuffer: CommandBuffer, stage: PipelineStageFlags2, dstBuffer: Buffer, dstOffset: DeviceSize, marker: u32) -> void #c_call;
PFN_vkGetQueueCheckpointData2NV :: #type (queue: Queue, pCheckpointDataCount: *u32, pCheckpointData: *CheckpointData2NV) -> void #c_call;

CmdSetEvent2KHR: #type (commandBuffer: CommandBuffer, event: Event, pDependencyInfo: *DependencyInfo) -> void #c_call;

CmdResetEvent2KHR: #type (commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags2) -> void #c_call;

CmdWaitEvents2KHR: #type (commandBuffer: CommandBuffer, eventCount: u32, pEvents: *Event, pDependencyInfos: *DependencyInfo) -> void #c_call;

CmdPipelineBarrier2KHR: #type (commandBuffer: CommandBuffer, pDependencyInfo: *DependencyInfo) -> void #c_call;

CmdWriteTimestamp2KHR: #type (commandBuffer: CommandBuffer, stage: PipelineStageFlags2, queryPool: QueryPool, query: u32) -> void #c_call;

QueueSubmit2KHR: #type (queue: Queue, submitCount: u32, pSubmits: *SubmitInfo2, fence: Fence) -> Result #c_call;

CmdWriteBufferMarker2AMD: #type (commandBuffer: CommandBuffer, stage: PipelineStageFlags2, dstBuffer: Buffer, dstOffset: DeviceSize, marker: u32) -> void #c_call;

GetQueueCheckpointData2NV: #type (queue: Queue, pCheckpointDataCount: *u32, pCheckpointData: *CheckpointData2NV) -> void #c_call;

PhysicalDeviceFragmentShaderBarycentricFeaturesKHR :: struct {
    sType:                     StructureType = .PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR;
    pNext:                     *void;
    fragmentShaderBarycentric: Bool32;
}

PhysicalDeviceFragmentShaderBarycentricPropertiesKHR :: struct {
    sType:                                           StructureType = .PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR;
    pNext:                                           *void;
    triStripVertexOrderIndependentOfProvokingVertex: Bool32;
}

PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR :: struct {
    sType:                            StructureType = .PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR;
    pNext:                            *void;
    shaderSubgroupUniformControlFlow: Bool32;
}

PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR :: PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;

PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR :: struct {
    sType:                                          StructureType = .PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR;
    pNext:                                          *void;
    workgroupMemoryExplicitLayout:                  Bool32;
    workgroupMemoryExplicitLayoutScalarBlockLayout: Bool32;
    workgroupMemoryExplicitLayout8BitAccess:        Bool32;
    workgroupMemoryExplicitLayout16BitAccess:       Bool32;
}

CopyBufferInfo2KHR :: CopyBufferInfo2;

CopyImageInfo2KHR :: CopyImageInfo2;

CopyBufferToImageInfo2KHR :: CopyBufferToImageInfo2;

CopyImageToBufferInfo2KHR :: CopyImageToBufferInfo2;

BlitImageInfo2KHR :: BlitImageInfo2;

ResolveImageInfo2KHR :: ResolveImageInfo2;

BufferCopy2KHR :: BufferCopy2;

ImageCopy2KHR :: ImageCopy2;

ImageBlit2KHR :: ImageBlit2;

BufferImageCopy2KHR :: BufferImageCopy2;

ImageResolve2KHR :: ImageResolve2;

PFN_vkCmdCopyBuffer2KHR :: #type (commandBuffer: CommandBuffer, pCopyBufferInfo: *CopyBufferInfo2) -> void #c_call;
PFN_vkCmdCopyImage2KHR :: #type (commandBuffer: CommandBuffer, pCopyImageInfo: *CopyImageInfo2) -> void #c_call;
PFN_vkCmdCopyBufferToImage2KHR :: #type (commandBuffer: CommandBuffer, pCopyBufferToImageInfo: *CopyBufferToImageInfo2) -> void #c_call;
PFN_vkCmdCopyImageToBuffer2KHR :: #type (commandBuffer: CommandBuffer, pCopyImageToBufferInfo: *CopyImageToBufferInfo2) -> void #c_call;
PFN_vkCmdBlitImage2KHR :: #type (commandBuffer: CommandBuffer, pBlitImageInfo: *BlitImageInfo2) -> void #c_call;
PFN_vkCmdResolveImage2KHR :: #type (commandBuffer: CommandBuffer, pResolveImageInfo: *ResolveImageInfo2) -> void #c_call;

CmdCopyBuffer2KHR: #type (commandBuffer: CommandBuffer, pCopyBufferInfo: *CopyBufferInfo2) -> void #c_call;

CmdCopyImage2KHR: #type (commandBuffer: CommandBuffer, pCopyImageInfo: *CopyImageInfo2) -> void #c_call;

CmdCopyBufferToImage2KHR: #type (commandBuffer: CommandBuffer, pCopyBufferToImageInfo: *CopyBufferToImageInfo2) -> void #c_call;

CmdCopyImageToBuffer2KHR: #type (commandBuffer: CommandBuffer, pCopyImageToBufferInfo: *CopyImageToBufferInfo2) -> void #c_call;

CmdBlitImage2KHR: #type (commandBuffer: CommandBuffer, pBlitImageInfo: *BlitImageInfo2) -> void #c_call;

CmdResolveImage2KHR: #type (commandBuffer: CommandBuffer, pResolveImageInfo: *ResolveImageInfo2) -> void #c_call;

FormatFeatureFlags2KHR :: FormatFeatureFlags2;

FormatFeatureFlagBits2KHR :: FormatFeatureFlagBits2;

FormatProperties3KHR :: FormatProperties3;

PhysicalDeviceRayTracingMaintenance1FeaturesKHR :: struct {
    sType:                                StructureType = .PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR;
    pNext:                                *void;
    rayTracingMaintenance1:               Bool32;
    rayTracingPipelineTraceRaysIndirect2: Bool32;
}

TraceRaysIndirectCommand2KHR :: struct {
    raygenShaderRecordAddress:         DeviceAddress;
    raygenShaderRecordSize:            DeviceSize;
    missShaderBindingTableAddress:     DeviceAddress;
    missShaderBindingTableSize:        DeviceSize;
    missShaderBindingTableStride:      DeviceSize;
    hitShaderBindingTableAddress:      DeviceAddress;
    hitShaderBindingTableSize:         DeviceSize;
    hitShaderBindingTableStride:       DeviceSize;
    callableShaderBindingTableAddress: DeviceAddress;
    callableShaderBindingTableSize:    DeviceSize;
    callableShaderBindingTableStride:  DeviceSize;
    width:                             u32;
    height:                            u32;
    depth:                             u32;
}

PFN_vkCmdTraceRaysIndirect2KHR :: #type (commandBuffer: CommandBuffer, indirectDeviceAddress: DeviceAddress) -> void #c_call;

CmdTraceRaysIndirect2KHR: #type (commandBuffer: CommandBuffer, indirectDeviceAddress: DeviceAddress) -> void #c_call;

PhysicalDeviceMaintenance4FeaturesKHR :: PhysicalDeviceMaintenance4Features;

PhysicalDeviceMaintenance4PropertiesKHR :: PhysicalDeviceMaintenance4Properties;

DeviceBufferMemoryRequirementsKHR :: DeviceBufferMemoryRequirements;

DeviceImageMemoryRequirementsKHR :: DeviceImageMemoryRequirements;

PFN_vkGetDeviceBufferMemoryRequirementsKHR :: #type (device: Device, pInfo: *DeviceBufferMemoryRequirements, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;
PFN_vkGetDeviceImageMemoryRequirementsKHR :: #type (device: Device, pInfo: *DeviceImageMemoryRequirements, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;
PFN_vkGetDeviceImageSparseMemoryRequirementsKHR :: #type (device: Device, pInfo: *DeviceImageMemoryRequirements, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *SparseImageMemoryRequirements2) -> void #c_call;

GetDeviceBufferMemoryRequirementsKHR: #type (device: Device, pInfo: *DeviceBufferMemoryRequirements, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;

GetDeviceImageMemoryRequirementsKHR: #type (device: Device, pInfo: *DeviceImageMemoryRequirements, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;

GetDeviceImageSparseMemoryRequirementsKHR: #type (device: Device, pInfo: *DeviceImageMemoryRequirements, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *SparseImageMemoryRequirements2) -> void #c_call;

PhysicalDeviceRayTracingPositionFetchFeaturesKHR :: struct {
    sType:                   StructureType = .PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR;
    pNext:                   *void;
    rayTracingPositionFetch: Bool32;
}

DebugReportCallbackEXT_T :: struct {}
DebugReportCallbackEXT :: *DebugReportCallbackEXT_T;

DebugReportObjectTypeEXT :: enum u32 {
    UNKNOWN_EXT                        :: 0;
    INSTANCE_EXT                       :: 1;
    PHYSICAL_DEVICE_EXT                :: 2;
    DEVICE_EXT                         :: 3;
    QUEUE_EXT                          :: 4;
    SEMAPHORE_EXT                      :: 5;
    COMMAND_BUFFER_EXT                 :: 6;
    FENCE_EXT                          :: 7;
    DEVICE_MEMORY_EXT                  :: 8;
    BUFFER_EXT                         :: 9;
    IMAGE_EXT                          :: 10;
    EVENT_EXT                          :: 11;
    QUERY_POOL_EXT                     :: 12;
    BUFFER_VIEW_EXT                    :: 13;
    IMAGE_VIEW_EXT                     :: 14;
    SHADER_MODULE_EXT                  :: 15;
    PIPELINE_CACHE_EXT                 :: 16;
    PIPELINE_LAYOUT_EXT                :: 17;
    RENDER_PASS_EXT                    :: 18;
    PIPELINE_EXT                       :: 19;
    DESCRIPTOR_SET_LAYOUT_EXT          :: 20;
    SAMPLER_EXT                        :: 21;
    DESCRIPTOR_POOL_EXT                :: 22;
    DESCRIPTOR_SET_EXT                 :: 23;
    FRAMEBUFFER_EXT                    :: 24;
    COMMAND_POOL_EXT                   :: 25;
    SURFACE_KHR_EXT                    :: 26;
    SWAPCHAIN_KHR_EXT                  :: 27;
    DEBUG_REPORT_CALLBACK_EXT_EXT      :: 28;
    DISPLAY_KHR_EXT                    :: 29;
    DISPLAY_MODE_KHR_EXT               :: 30;
    VALIDATION_CACHE_EXT_EXT           :: 33;
    SAMPLER_YCBCR_CONVERSION_EXT       :: 1000156000;
    DESCRIPTOR_UPDATE_TEMPLATE_EXT     :: 1000085000;
    CU_MODULE_NVX_EXT                  :: 1000029000;
    CU_FUNCTION_NVX_EXT                :: 1000029001;
    ACCELERATION_STRUCTURE_KHR_EXT     :: 1000150000;
    ACCELERATION_STRUCTURE_NV_EXT      :: 1000165000;
    BUFFER_COLLECTION_FUCHSIA_EXT      :: 1000366000;
    DEBUG_REPORT_EXT                   :: 28;
    VALIDATION_CACHE_EXT               :: 33;
    DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT :: 1000085000;
    SAMPLER_YCBCR_CONVERSION_KHR_EXT   :: 1000156000;
    MAX_ENUM_EXT                       :: 2147483647;

    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT                        :: UNKNOWN_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT                       :: INSTANCE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT                :: PHYSICAL_DEVICE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT                         :: DEVICE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT                          :: QUEUE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT                      :: SEMAPHORE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT                 :: COMMAND_BUFFER_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT                          :: FENCE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT                  :: DEVICE_MEMORY_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT                         :: BUFFER_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT                          :: IMAGE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT                          :: EVENT_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT                     :: QUERY_POOL_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT                    :: BUFFER_VIEW_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT                     :: IMAGE_VIEW_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT                  :: SHADER_MODULE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT                 :: PIPELINE_CACHE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT                :: PIPELINE_LAYOUT_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT                    :: RENDER_PASS_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT                       :: PIPELINE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT          :: DESCRIPTOR_SET_LAYOUT_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT                        :: SAMPLER_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT                :: DESCRIPTOR_POOL_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT                 :: DESCRIPTOR_SET_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT                    :: FRAMEBUFFER_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT                   :: COMMAND_POOL_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT                    :: SURFACE_KHR_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT                  :: SWAPCHAIN_KHR_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT      :: DEBUG_REPORT_CALLBACK_EXT_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT                    :: DISPLAY_KHR_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT               :: DISPLAY_MODE_KHR_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT           :: VALIDATION_CACHE_EXT_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT       :: SAMPLER_YCBCR_CONVERSION_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT     :: DESCRIPTOR_UPDATE_TEMPLATE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT                  :: CU_MODULE_NVX_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT                :: CU_FUNCTION_NVX_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT     :: ACCELERATION_STRUCTURE_KHR_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT      :: ACCELERATION_STRUCTURE_NV_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT      :: BUFFER_COLLECTION_FUCHSIA_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT                   :: DEBUG_REPORT_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT               :: VALIDATION_CACHE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT :: DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT   :: SAMPLER_YCBCR_CONVERSION_KHR_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT                       :: MAX_ENUM_EXT;
}

DebugReportFlagBitsEXT :: enum_flags u32 {
    INFORMATION_EXT         :: 0x1;
    WARNING_EXT             :: 0x2;
    PERFORMANCE_WARNING_EXT :: 0x4;
    ERROR_EXT               :: 0x8;
    DEBUG_EXT               :: 0x10;
    FLAG_BITS_MAX_ENUM_EXT  :: 0x7fffffff;

    VK_DEBUG_REPORT_INFORMATION_BIT_EXT         :: INFORMATION_EXT;
    VK_DEBUG_REPORT_WARNING_BIT_EXT             :: WARNING_EXT;
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT :: PERFORMANCE_WARNING_EXT;
    VK_DEBUG_REPORT_ERROR_BIT_EXT               :: ERROR_EXT;
    VK_DEBUG_REPORT_DEBUG_BIT_EXT               :: DEBUG_EXT;
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT      :: FLAG_BITS_MAX_ENUM_EXT;
}

DebugReportFlagsEXT :: DebugReportFlagBitsEXT;
PFN_vkDebugReportCallbackEXT :: #type (flags: DebugReportFlagsEXT, objectType: DebugReportObjectTypeEXT, object: u64, location: u64, messageCode: s32, pLayerPrefix: *u8, pMessage: *u8, pUserData: *void) -> Bool32 #c_call;

DebugReportCallbackCreateInfoEXT :: struct {
    sType:       StructureType = .DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
    pNext:       *void;
    flags:       DebugReportFlagsEXT;
    pfnCallback: PFN_vkDebugReportCallbackEXT;
    pUserData:   *void;
}

PFN_vkCreateDebugReportCallbackEXT :: #type (instance: Instance, pCreateInfo: *DebugReportCallbackCreateInfoEXT, pAllocator: *AllocationCallbacks, pCallback: *DebugReportCallbackEXT) -> Result #c_call;
PFN_vkDestroyDebugReportCallbackEXT :: #type (instance: Instance, callback: DebugReportCallbackEXT, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkDebugReportMessageEXT :: #type (instance: Instance, flags: DebugReportFlagsEXT, objectType: DebugReportObjectTypeEXT, object: u64, location: u64, messageCode: s32, pLayerPrefix: *u8, pMessage: *u8) -> void #c_call;

CreateDebugReportCallbackEXT: #type (instance: Instance, pCreateInfo: *DebugReportCallbackCreateInfoEXT, pAllocator: *AllocationCallbacks, pCallback: *DebugReportCallbackEXT) -> Result #c_call;

DestroyDebugReportCallbackEXT: #type (instance: Instance, callback: DebugReportCallbackEXT, pAllocator: *AllocationCallbacks) -> void #c_call;

DebugReportMessageEXT: #type (instance: Instance, flags: DebugReportFlagsEXT, objectType: DebugReportObjectTypeEXT, object: u64, location: u64, messageCode: s32, pLayerPrefix: *u8, pMessage: *u8) -> void #c_call;

RasterizationOrderAMD :: enum u32 {
    STRICT_AMD   :: 0;
    RELAXED_AMD  :: 1;
    MAX_ENUM_AMD :: 2147483647;

    VK_RASTERIZATION_ORDER_STRICT_AMD   :: STRICT_AMD;
    VK_RASTERIZATION_ORDER_RELAXED_AMD  :: RELAXED_AMD;
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD :: MAX_ENUM_AMD;
}

PipelineRasterizationStateRasterizationOrderAMD :: struct {
    sType:              StructureType = .PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
    pNext:              *void;
    rasterizationOrder: RasterizationOrderAMD;
}

DebugMarkerObjectNameInfoEXT :: struct {
    sType:       StructureType = .DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
    pNext:       *void;
    objectType:  DebugReportObjectTypeEXT;
    object:      u64;
    pObjectName: *u8;
}

DebugMarkerObjectTagInfoEXT :: struct {
    sType:      StructureType = .DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
    pNext:      *void;
    objectType: DebugReportObjectTypeEXT;
    object:     u64;
    tagName:    u64;
    tagSize:    u64;
    pTag:       *void;
}

DebugMarkerMarkerInfoEXT :: struct {
    sType:       StructureType = .DEBUG_MARKER_MARKER_INFO_EXT;
    pNext:       *void;
    pMarkerName: *u8;
    color:       [4] float;
}

PFN_vkDebugMarkerSetObjectTagEXT :: #type (device: Device, pTagInfo: *DebugMarkerObjectTagInfoEXT) -> Result #c_call;
PFN_vkDebugMarkerSetObjectNameEXT :: #type (device: Device, pNameInfo: *DebugMarkerObjectNameInfoEXT) -> Result #c_call;
PFN_vkCmdDebugMarkerBeginEXT :: #type (commandBuffer: CommandBuffer, pMarkerInfo: *DebugMarkerMarkerInfoEXT) -> void #c_call;
PFN_vkCmdDebugMarkerEndEXT :: #type (commandBuffer: CommandBuffer) -> void #c_call;
PFN_vkCmdDebugMarkerInsertEXT :: #type (commandBuffer: CommandBuffer, pMarkerInfo: *DebugMarkerMarkerInfoEXT) -> void #c_call;

DebugMarkerSetObjectTagEXT: #type (device: Device, pTagInfo: *DebugMarkerObjectTagInfoEXT) -> Result #c_call;

DebugMarkerSetObjectNameEXT: #type (device: Device, pNameInfo: *DebugMarkerObjectNameInfoEXT) -> Result #c_call;

CmdDebugMarkerBeginEXT: #type (commandBuffer: CommandBuffer, pMarkerInfo: *DebugMarkerMarkerInfoEXT) -> void #c_call;

CmdDebugMarkerEndEXT: #type (commandBuffer: CommandBuffer) -> void #c_call;

CmdDebugMarkerInsertEXT: #type (commandBuffer: CommandBuffer, pMarkerInfo: *DebugMarkerMarkerInfoEXT) -> void #c_call;

DedicatedAllocationImageCreateInfoNV :: struct {
    sType:               StructureType = .DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
    pNext:               *void;
    dedicatedAllocation: Bool32;
}

DedicatedAllocationBufferCreateInfoNV :: struct {
    sType:               StructureType = .DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
    pNext:               *void;
    dedicatedAllocation: Bool32;
}

DedicatedAllocationMemoryAllocateInfoNV :: struct {
    sType:  StructureType = .DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
    pNext:  *void;
    image:  Image;
    buffer: Buffer;
}

PipelineRasterizationStateStreamCreateFlagsEXT :: Flags;
PhysicalDeviceTransformFeedbackFeaturesEXT :: struct {
    sType:             StructureType = .PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
    pNext:             *void;
    transformFeedback: Bool32;
    geometryStreams:   Bool32;
}

PhysicalDeviceTransformFeedbackPropertiesEXT :: struct {
    sType:                                      StructureType = .PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;
    pNext:                                      *void;
    maxTransformFeedbackStreams:                u32;
    maxTransformFeedbackBuffers:                u32;
    maxTransformFeedbackBufferSize:             DeviceSize;
    maxTransformFeedbackStreamDataSize:         u32;
    maxTransformFeedbackBufferDataSize:         u32;
    maxTransformFeedbackBufferDataStride:       u32;
    transformFeedbackQueries:                   Bool32;
    transformFeedbackStreamsLinesTriangles:     Bool32;
    transformFeedbackRasterizationStreamSelect: Bool32;
    transformFeedbackDraw:                      Bool32;
}

PipelineRasterizationStateStreamCreateInfoEXT :: struct {
    sType:               StructureType = .PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
    pNext:               *void;
    flags:               PipelineRasterizationStateStreamCreateFlagsEXT;
    rasterizationStream: u32;
}

PFN_vkCmdBindTransformFeedbackBuffersEXT :: #type (commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *Buffer, pOffsets: *DeviceSize, pSizes: *DeviceSize) -> void #c_call;
PFN_vkCmdBeginTransformFeedbackEXT :: #type (commandBuffer: CommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: *Buffer, pCounterBufferOffsets: *DeviceSize) -> void #c_call;
PFN_vkCmdEndTransformFeedbackEXT :: #type (commandBuffer: CommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: *Buffer, pCounterBufferOffsets: *DeviceSize) -> void #c_call;
PFN_vkCmdBeginQueryIndexedEXT :: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, flags: QueryControlFlags, index: u32) -> void #c_call;
PFN_vkCmdEndQueryIndexedEXT :: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, index: u32) -> void #c_call;
PFN_vkCmdDrawIndirectByteCountEXT :: #type (commandBuffer: CommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: Buffer, counterBufferOffset: DeviceSize, counterOffset: u32, vertexStride: u32) -> void #c_call;

CmdBindTransformFeedbackBuffersEXT: #type (commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *Buffer, pOffsets: *DeviceSize, pSizes: *DeviceSize) -> void #c_call;

CmdBeginTransformFeedbackEXT: #type (commandBuffer: CommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: *Buffer, pCounterBufferOffsets: *DeviceSize) -> void #c_call;

CmdEndTransformFeedbackEXT: #type (commandBuffer: CommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: *Buffer, pCounterBufferOffsets: *DeviceSize) -> void #c_call;

CmdBeginQueryIndexedEXT: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, flags: QueryControlFlags, index: u32) -> void #c_call;

CmdEndQueryIndexedEXT: #type (commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, index: u32) -> void #c_call;

CmdDrawIndirectByteCountEXT: #type (commandBuffer: CommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: Buffer, counterBufferOffset: DeviceSize, counterOffset: u32, vertexStride: u32) -> void #c_call;

CuModuleNVX_T :: struct {}
CuModuleNVX :: *CuModuleNVX_T;
CuFunctionNVX_T :: struct {}
CuFunctionNVX :: *CuFunctionNVX_T;

CuModuleCreateInfoNVX :: struct {
    sType:    StructureType = .CU_MODULE_CREATE_INFO_NVX;
    pNext:    *void;
    dataSize: u64;
    pData:    *void;
}

CuFunctionCreateInfoNVX :: struct {
    sType:  StructureType = .CU_FUNCTION_CREATE_INFO_NVX;
    pNext:  *void;
    module: CuModuleNVX;
    pName:  *u8;
}

CuLaunchInfoNVX :: struct {
    sType:          StructureType = .CU_LAUNCH_INFO_NVX;
    pNext:          *void;
    function:       CuFunctionNVX;
    gridDimX:       u32;
    gridDimY:       u32;
    gridDimZ:       u32;
    blockDimX:      u32;
    blockDimY:      u32;
    blockDimZ:      u32;
    sharedMemBytes: u32;
    paramCount:     u64;
    pParams:        **void;
    extraCount:     u64;
    pExtras:        **void;
}

PFN_vkCreateCuModuleNVX :: #type (device: Device, pCreateInfo: *CuModuleCreateInfoNVX, pAllocator: *AllocationCallbacks, pModule: *CuModuleNVX) -> Result #c_call;
PFN_vkCreateCuFunctionNVX :: #type (device: Device, pCreateInfo: *CuFunctionCreateInfoNVX, pAllocator: *AllocationCallbacks, pFunction: *CuFunctionNVX) -> Result #c_call;
PFN_vkDestroyCuModuleNVX :: #type (device: Device, module: CuModuleNVX, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkDestroyCuFunctionNVX :: #type (device: Device, function: CuFunctionNVX, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCmdCuLaunchKernelNVX :: #type (commandBuffer: CommandBuffer, pLaunchInfo: *CuLaunchInfoNVX) -> void #c_call;

CreateCuModuleNVX: #type (device: Device, pCreateInfo: *CuModuleCreateInfoNVX, pAllocator: *AllocationCallbacks, pModule: *CuModuleNVX) -> Result #c_call;

CreateCuFunctionNVX: #type (device: Device, pCreateInfo: *CuFunctionCreateInfoNVX, pAllocator: *AllocationCallbacks, pFunction: *CuFunctionNVX) -> Result #c_call;

DestroyCuModuleNVX: #type (device: Device, module: CuModuleNVX, pAllocator: *AllocationCallbacks) -> void #c_call;

DestroyCuFunctionNVX: #type (device: Device, function: CuFunctionNVX, pAllocator: *AllocationCallbacks) -> void #c_call;

CmdCuLaunchKernelNVX: #type (commandBuffer: CommandBuffer, pLaunchInfo: *CuLaunchInfoNVX) -> void #c_call;

ImageViewHandleInfoNVX :: struct {
    sType:          StructureType = .IMAGE_VIEW_HANDLE_INFO_NVX;
    pNext:          *void;
    imageView:      ImageView;
    descriptorType: DescriptorType;
    sampler:        Sampler;
}

ImageViewAddressPropertiesNVX :: struct {
    sType:         StructureType = .IMAGE_VIEW_ADDRESS_PROPERTIES_NVX;
    pNext:         *void;
    deviceAddress: DeviceAddress;
    size:          DeviceSize;
}

PFN_vkGetImageViewHandleNVX :: #type (device: Device, pInfo: *ImageViewHandleInfoNVX) -> u32 #c_call;
PFN_vkGetImageViewAddressNVX :: #type (device: Device, imageView: ImageView, pProperties: *ImageViewAddressPropertiesNVX) -> Result #c_call;

GetImageViewHandleNVX: #type (device: Device, pInfo: *ImageViewHandleInfoNVX) -> u32 #c_call;

GetImageViewAddressNVX: #type (device: Device, imageView: ImageView, pProperties: *ImageViewAddressPropertiesNVX) -> Result #c_call;

PFN_vkCmdDrawIndirectCountAMD :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;
PFN_vkCmdDrawIndexedIndirectCountAMD :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

CmdDrawIndirectCountAMD: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

CmdDrawIndexedIndirectCountAMD: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

TextureLODGatherFormatPropertiesAMD :: struct {
    sType:                           StructureType = .TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
    pNext:                           *void;
    supportsTextureGatherLODBiasAMD: Bool32;
}

ShaderInfoTypeAMD :: enum u32 {
    STATISTICS_AMD  :: 0;
    BINARY_AMD      :: 1;
    DISASSEMBLY_AMD :: 2;
    MAX_ENUM_AMD    :: 2147483647;

    VK_SHADER_INFO_TYPE_STATISTICS_AMD  :: STATISTICS_AMD;
    VK_SHADER_INFO_TYPE_BINARY_AMD      :: BINARY_AMD;
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD :: DISASSEMBLY_AMD;
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD    :: MAX_ENUM_AMD;
}

ShaderResourceUsageAMD :: struct {
    numUsedVgprs:             u32;
    numUsedSgprs:             u32;
    ldsSizePerLocalWorkGroup: u32;
    ldsUsageSizeInBytes:      u64;
    scratchMemUsageInBytes:   u64;
}

ShaderStatisticsInfoAMD :: struct {
    shaderStageMask:      ShaderStageFlags;
    resourceUsage:        ShaderResourceUsageAMD;
    numPhysicalVgprs:     u32;
    numPhysicalSgprs:     u32;
    numAvailableVgprs:    u32;
    numAvailableSgprs:    u32;
    computeWorkGroupSize: [3] u32;
}

PFN_vkGetShaderInfoAMD :: #type (device: Device, pipeline: Pipeline, shaderStage: ShaderStageFlagBits, infoType: ShaderInfoTypeAMD, pInfoSize: *u64, pInfo: *void) -> Result #c_call;

GetShaderInfoAMD: #type (device: Device, pipeline: Pipeline, shaderStage: ShaderStageFlagBits, infoType: ShaderInfoTypeAMD, pInfoSize: *u64, pInfo: *void) -> Result #c_call;

PhysicalDeviceCornerSampledImageFeaturesNV :: struct {
    sType:              StructureType = .PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
    pNext:              *void;
    cornerSampledImage: Bool32;
}

ExternalMemoryHandleTypeFlagBitsNV :: enum_flags u32 {
    OPAQUE_WIN32_NV       :: 0x1;
    OPAQUE_WIN32_KMT_NV   :: 0x2;
    D3D11_IMAGE_NV        :: 0x4;
    D3D11_IMAGE_KMT_NV    :: 0x8;
    FLAG_BITS_MAX_ENUM_NV :: 0x7fffffff;

    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV     :: OPAQUE_WIN32_NV;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV :: OPAQUE_WIN32_KMT_NV;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV      :: D3D11_IMAGE_NV;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV  :: D3D11_IMAGE_KMT_NV;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV   :: FLAG_BITS_MAX_ENUM_NV;
}

ExternalMemoryHandleTypeFlagsNV :: ExternalMemoryHandleTypeFlagBitsNV;

ExternalMemoryFeatureFlagBitsNV :: enum_flags u32 {
    DEDICATED_ONLY_NV     :: 0x1;
    EXPORTABLE_NV         :: 0x2;
    IMPORTABLE_NV         :: 0x4;
    FLAG_BITS_MAX_ENUM_NV :: 0x7fffffff;

    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV :: DEDICATED_ONLY_NV;
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV     :: EXPORTABLE_NV;
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV     :: IMPORTABLE_NV;
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV :: FLAG_BITS_MAX_ENUM_NV;
}

ExternalMemoryFeatureFlagsNV :: ExternalMemoryFeatureFlagBitsNV;
ExternalImageFormatPropertiesNV :: struct {
    imageFormatProperties:         ImageFormatProperties;
    externalMemoryFeatures:        ExternalMemoryFeatureFlagsNV;
    exportFromImportedHandleTypes: ExternalMemoryHandleTypeFlagsNV;
    compatibleHandleTypes:         ExternalMemoryHandleTypeFlagsNV;
}

PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV :: #type (physicalDevice: PhysicalDevice, format: Format, type: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, externalHandleType: ExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: *ExternalImageFormatPropertiesNV) -> Result #c_call;

GetPhysicalDeviceExternalImageFormatPropertiesNV: #type (physicalDevice: PhysicalDevice, format: Format, type: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, externalHandleType: ExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: *ExternalImageFormatPropertiesNV) -> Result #c_call;

ExternalMemoryImageCreateInfoNV :: struct {
    sType:       StructureType = .EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
    pNext:       *void;
    handleTypes: ExternalMemoryHandleTypeFlagsNV;
}

ExportMemoryAllocateInfoNV :: struct {
    sType:       StructureType = .EXPORT_MEMORY_ALLOCATE_INFO_NV;
    pNext:       *void;
    handleTypes: ExternalMemoryHandleTypeFlagsNV;
}

ValidationCheckEXT :: enum u32 {
    ALL_EXT      :: 0;
    SHADERS_EXT  :: 1;
    MAX_ENUM_EXT :: 2147483647;

    VK_VALIDATION_CHECK_ALL_EXT      :: ALL_EXT;
    VK_VALIDATION_CHECK_SHADERS_EXT  :: SHADERS_EXT;
    VK_VALIDATION_CHECK_MAX_ENUM_EXT :: MAX_ENUM_EXT;
}

ValidationFlagsEXT :: struct {
    sType:                        StructureType = .VALIDATION_FLAGS_EXT;
    pNext:                        *void;
    disabledValidationCheckCount: u32;
    pDisabledValidationChecks:    *ValidationCheckEXT;
}

PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT :: PhysicalDeviceTextureCompressionASTCHDRFeatures;

ImageViewASTCDecodeModeEXT :: struct {
    sType:      StructureType = .IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
    pNext:      *void;
    decodeMode: Format;
}

PhysicalDeviceASTCDecodeFeaturesEXT :: struct {
    sType:                    StructureType = .PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
    pNext:                    *void;
    decodeModeSharedExponent: Bool32;
}

PipelineRobustnessBufferBehaviorEXT :: enum u32 {
    DEVICE_DEFAULT_EXT         :: 0;
    DISABLED_EXT               :: 1;
    ROBUST_BUFFER_ACCESS_EXT   :: 2;
    ROBUST_BUFFER_ACCESS_2_EXT :: 3;
    MAX_ENUM_EXT               :: 2147483647;

    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT         :: DEVICE_DEFAULT_EXT;
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT               :: DISABLED_EXT;
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT   :: ROBUST_BUFFER_ACCESS_EXT;
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT :: ROBUST_BUFFER_ACCESS_2_EXT;
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT               :: MAX_ENUM_EXT;
}

PipelineRobustnessImageBehaviorEXT :: enum u32 {
    DEVICE_DEFAULT_EXT        :: 0;
    DISABLED_EXT              :: 1;
    ROBUST_IMAGE_ACCESS_EXT   :: 2;
    ROBUST_IMAGE_ACCESS_2_EXT :: 3;
    MAX_ENUM_EXT              :: 2147483647;

    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT        :: DEVICE_DEFAULT_EXT;
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT              :: DISABLED_EXT;
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT   :: ROBUST_IMAGE_ACCESS_EXT;
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT :: ROBUST_IMAGE_ACCESS_2_EXT;
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT              :: MAX_ENUM_EXT;
}

PhysicalDevicePipelineRobustnessFeaturesEXT :: struct {
    sType:              StructureType = .PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT;
    pNext:              *void;
    pipelineRobustness: Bool32;
}

PhysicalDevicePipelineRobustnessPropertiesEXT :: struct {
    sType:                           StructureType = .PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT;
    pNext:                           *void;
    defaultRobustnessStorageBuffers: PipelineRobustnessBufferBehaviorEXT;
    defaultRobustnessUniformBuffers: PipelineRobustnessBufferBehaviorEXT;
    defaultRobustnessVertexInputs:   PipelineRobustnessBufferBehaviorEXT;
    defaultRobustnessImages:         PipelineRobustnessImageBehaviorEXT;
}

PipelineRobustnessCreateInfoEXT :: struct {
    sType:          StructureType = .PIPELINE_ROBUSTNESS_CREATE_INFO_EXT;
    pNext:          *void;
    storageBuffers: PipelineRobustnessBufferBehaviorEXT;
    uniformBuffers: PipelineRobustnessBufferBehaviorEXT;
    vertexInputs:   PipelineRobustnessBufferBehaviorEXT;
    images:         PipelineRobustnessImageBehaviorEXT;
}

ConditionalRenderingFlagBitsEXT :: enum_flags u32 {
    INVERTED_EXT           :: 0x1;
    FLAG_BITS_MAX_ENUM_EXT :: 0x7fffffff;

    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT       :: INVERTED_EXT;
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT :: FLAG_BITS_MAX_ENUM_EXT;
}

ConditionalRenderingFlagsEXT :: ConditionalRenderingFlagBitsEXT;
ConditionalRenderingBeginInfoEXT :: struct {
    sType:  StructureType = .CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
    pNext:  *void;
    buffer: Buffer;
    offset: DeviceSize;
    flags:  ConditionalRenderingFlagsEXT;
}

PhysicalDeviceConditionalRenderingFeaturesEXT :: struct {
    sType:                         StructureType = .PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
    pNext:                         *void;
    conditionalRendering:          Bool32;
    inheritedConditionalRendering: Bool32;
}

CommandBufferInheritanceConditionalRenderingInfoEXT :: struct {
    sType:                      StructureType = .COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
    pNext:                      *void;
    conditionalRenderingEnable: Bool32;
}

PFN_vkCmdBeginConditionalRenderingEXT :: #type (commandBuffer: CommandBuffer, pConditionalRenderingBegin: *ConditionalRenderingBeginInfoEXT) -> void #c_call;
PFN_vkCmdEndConditionalRenderingEXT :: #type (commandBuffer: CommandBuffer) -> void #c_call;

CmdBeginConditionalRenderingEXT: #type (commandBuffer: CommandBuffer, pConditionalRenderingBegin: *ConditionalRenderingBeginInfoEXT) -> void #c_call;

CmdEndConditionalRenderingEXT: #type (commandBuffer: CommandBuffer) -> void #c_call;

ViewportWScalingNV :: struct {
    xcoeff: float;
    ycoeff: float;
}

PipelineViewportWScalingStateCreateInfoNV :: struct {
    sType:                  StructureType = .PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
    pNext:                  *void;
    viewportWScalingEnable: Bool32;
    viewportCount:          u32;
    pViewportWScalings:     *ViewportWScalingNV;
}

PFN_vkCmdSetViewportWScalingNV :: #type (commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: *ViewportWScalingNV) -> void #c_call;

CmdSetViewportWScalingNV: #type (commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: *ViewportWScalingNV) -> void #c_call;

PFN_vkReleaseDisplayEXT :: #type (physicalDevice: PhysicalDevice, display: DisplayKHR) -> Result #c_call;

ReleaseDisplayEXT: #type (physicalDevice: PhysicalDevice, display: DisplayKHR) -> Result #c_call;

SurfaceCounterFlagBitsEXT :: enum_flags u32 {
    VBLANK_EXT             :: 0x1;

    FLAG_BITS_MAX_ENUM_EXT :: 0x7fffffff;

    VK_SURFACE_COUNTER_VBLANK_BIT_EXT         :: VBLANK_EXT;

    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT :: FLAG_BITS_MAX_ENUM_EXT;
}

SurfaceCounterFlagsEXT :: SurfaceCounterFlagBitsEXT;
SurfaceCapabilities2EXT :: struct {
    sType:                    StructureType = .SURFACE_CAPABILITIES_2_EXT;
    pNext:                    *void;
    minImageCount:            u32;
    maxImageCount:            u32;
    currentExtent:            Extent2D;
    minImageExtent:           Extent2D;
    maxImageExtent:           Extent2D;
    maxImageArrayLayers:      u32;
    supportedTransforms:      SurfaceTransformFlagsKHR;
    currentTransform:         SurfaceTransformFlagBitsKHR;
    supportedCompositeAlpha:  CompositeAlphaFlagsKHR;
    supportedUsageFlags:      ImageUsageFlags;
    supportedSurfaceCounters: SurfaceCounterFlagsEXT;
}

PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT :: #type (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: *SurfaceCapabilities2EXT) -> Result #c_call;

GetPhysicalDeviceSurfaceCapabilities2EXT: #type (physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: *SurfaceCapabilities2EXT) -> Result #c_call;

DisplayPowerStateEXT :: enum u32 {
    OFF_EXT      :: 0;
    SUSPEND_EXT  :: 1;
    ON_EXT       :: 2;
    MAX_ENUM_EXT :: 2147483647;

    VK_DISPLAY_POWER_STATE_OFF_EXT      :: OFF_EXT;
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT  :: SUSPEND_EXT;
    VK_DISPLAY_POWER_STATE_ON_EXT       :: ON_EXT;
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT :: MAX_ENUM_EXT;
}

DeviceEventTypeEXT :: enum u32 {
    DISPLAY_HOTPLUG_EXT :: 0;
    MAX_ENUM_EXT        :: 2147483647;

    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT :: DISPLAY_HOTPLUG_EXT;
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT        :: MAX_ENUM_EXT;
}

DisplayEventTypeEXT :: enum u32 {
    FIRST_PIXEL_OUT_EXT :: 0;
    MAX_ENUM_EXT        :: 2147483647;

    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT :: FIRST_PIXEL_OUT_EXT;
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT        :: MAX_ENUM_EXT;
}

DisplayPowerInfoEXT :: struct {
    sType:      StructureType = .DISPLAY_POWER_INFO_EXT;
    pNext:      *void;
    powerState: DisplayPowerStateEXT;
}

DeviceEventInfoEXT :: struct {
    sType:       StructureType = .DEVICE_EVENT_INFO_EXT;
    pNext:       *void;
    deviceEvent: DeviceEventTypeEXT;
}

DisplayEventInfoEXT :: struct {
    sType:        StructureType = .DISPLAY_EVENT_INFO_EXT;
    pNext:        *void;
    displayEvent: DisplayEventTypeEXT;
}

SwapchainCounterCreateInfoEXT :: struct {
    sType:           StructureType = .SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
    pNext:           *void;
    surfaceCounters: SurfaceCounterFlagsEXT;
}

PFN_vkDisplayPowerControlEXT :: #type (device: Device, display: DisplayKHR, pDisplayPowerInfo: *DisplayPowerInfoEXT) -> Result #c_call;
PFN_vkRegisterDeviceEventEXT :: #type (device: Device, pDeviceEventInfo: *DeviceEventInfoEXT, pAllocator: *AllocationCallbacks, pFence: *Fence) -> Result #c_call;
PFN_vkRegisterDisplayEventEXT :: #type (device: Device, display: DisplayKHR, pDisplayEventInfo: *DisplayEventInfoEXT, pAllocator: *AllocationCallbacks, pFence: *Fence) -> Result #c_call;
PFN_vkGetSwapchainCounterEXT :: #type (device: Device, swapchain: SwapchainKHR, counter: SurfaceCounterFlagBitsEXT, pCounterValue: *u64) -> Result #c_call;

DisplayPowerControlEXT: #type (device: Device, display: DisplayKHR, pDisplayPowerInfo: *DisplayPowerInfoEXT) -> Result #c_call;

RegisterDeviceEventEXT: #type (device: Device, pDeviceEventInfo: *DeviceEventInfoEXT, pAllocator: *AllocationCallbacks, pFence: *Fence) -> Result #c_call;

RegisterDisplayEventEXT: #type (device: Device, display: DisplayKHR, pDisplayEventInfo: *DisplayEventInfoEXT, pAllocator: *AllocationCallbacks, pFence: *Fence) -> Result #c_call;

GetSwapchainCounterEXT: #type (device: Device, swapchain: SwapchainKHR, counter: SurfaceCounterFlagBitsEXT, pCounterValue: *u64) -> Result #c_call;

RefreshCycleDurationGOOGLE :: struct {
    refreshDuration: u64;
}

PastPresentationTimingGOOGLE :: struct {
    presentID:           u32;
    desiredPresentTime:  u64;
    actualPresentTime:   u64;
    earliestPresentTime: u64;
    presentMargin:       u64;
}

PresentTimeGOOGLE :: struct {
    presentID:          u32;
    desiredPresentTime: u64;
}

PresentTimesInfoGOOGLE :: struct {
    sType:          StructureType = .PRESENT_TIMES_INFO_GOOGLE;
    pNext:          *void;
    swapchainCount: u32;
    pTimes:         *PresentTimeGOOGLE;
}

PFN_vkGetRefreshCycleDurationGOOGLE :: #type (device: Device, swapchain: SwapchainKHR, pDisplayTimingProperties: *RefreshCycleDurationGOOGLE) -> Result #c_call;
PFN_vkGetPastPresentationTimingGOOGLE :: #type (device: Device, swapchain: SwapchainKHR, pPresentationTimingCount: *u32, pPresentationTimings: *PastPresentationTimingGOOGLE) -> Result #c_call;

GetRefreshCycleDurationGOOGLE: #type (device: Device, swapchain: SwapchainKHR, pDisplayTimingProperties: *RefreshCycleDurationGOOGLE) -> Result #c_call;

GetPastPresentationTimingGOOGLE: #type (device: Device, swapchain: SwapchainKHR, pPresentationTimingCount: *u32, pPresentationTimings: *PastPresentationTimingGOOGLE) -> Result #c_call;

PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX :: struct {
    sType:                        StructureType = .PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
    pNext:                        *void;
    perViewPositionAllComponents: Bool32;
}

ViewportCoordinateSwizzleNV :: enum u32 {
    POSITIVE_X_NV :: 0;
    NEGATIVE_X_NV :: 1;
    POSITIVE_Y_NV :: 2;
    NEGATIVE_Y_NV :: 3;
    POSITIVE_Z_NV :: 4;
    NEGATIVE_Z_NV :: 5;
    POSITIVE_W_NV :: 6;
    NEGATIVE_W_NV :: 7;
    MAX_ENUM_NV   :: 2147483647;

    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV :: POSITIVE_X_NV;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV :: NEGATIVE_X_NV;
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV :: POSITIVE_Y_NV;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV :: NEGATIVE_Y_NV;
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV :: POSITIVE_Z_NV;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV :: NEGATIVE_Z_NV;
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV :: POSITIVE_W_NV;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV :: NEGATIVE_W_NV;
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV   :: MAX_ENUM_NV;
}

PipelineViewportSwizzleStateCreateFlagsNV :: Flags;
ViewportSwizzleNV :: struct {
    x: ViewportCoordinateSwizzleNV;
    y: ViewportCoordinateSwizzleNV;
    z: ViewportCoordinateSwizzleNV;
    w: ViewportCoordinateSwizzleNV;
}

PipelineViewportSwizzleStateCreateInfoNV :: struct {
    sType:             StructureType = .PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
    pNext:             *void;
    flags:             PipelineViewportSwizzleStateCreateFlagsNV;
    viewportCount:     u32;
    pViewportSwizzles: *ViewportSwizzleNV;
}

DiscardRectangleModeEXT :: enum u32 {
    INCLUSIVE_EXT :: 0;
    EXCLUSIVE_EXT :: 1;
    MAX_ENUM_EXT  :: 2147483647;

    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT :: INCLUSIVE_EXT;
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT :: EXCLUSIVE_EXT;
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT  :: MAX_ENUM_EXT;
}

PipelineDiscardRectangleStateCreateFlagsEXT :: Flags;
PhysicalDeviceDiscardRectanglePropertiesEXT :: struct {
    sType:                StructureType = .PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
    pNext:                *void;
    maxDiscardRectangles: u32;
}

PipelineDiscardRectangleStateCreateInfoEXT :: struct {
    sType:                 StructureType = .PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
    pNext:                 *void;
    flags:                 PipelineDiscardRectangleStateCreateFlagsEXT;
    discardRectangleMode:  DiscardRectangleModeEXT;
    discardRectangleCount: u32;
    pDiscardRectangles:    *Rect2D;
}

PFN_vkCmdSetDiscardRectangleEXT :: #type (commandBuffer: CommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: *Rect2D) -> void #c_call;
PFN_vkCmdSetDiscardRectangleEnableEXT :: #type (commandBuffer: CommandBuffer, discardRectangleEnable: Bool32) -> void #c_call;
PFN_vkCmdSetDiscardRectangleModeEXT :: #type (commandBuffer: CommandBuffer, discardRectangleMode: DiscardRectangleModeEXT) -> void #c_call;

CmdSetDiscardRectangleEXT: #type (commandBuffer: CommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: *Rect2D) -> void #c_call;

CmdSetDiscardRectangleEnableEXT: #type (commandBuffer: CommandBuffer, discardRectangleEnable: Bool32) -> void #c_call;

CmdSetDiscardRectangleModeEXT: #type (commandBuffer: CommandBuffer, discardRectangleMode: DiscardRectangleModeEXT) -> void #c_call;

ConservativeRasterizationModeEXT :: enum u32 {
    DISABLED_EXT      :: 0;
    OVERESTIMATE_EXT  :: 1;
    UNDERESTIMATE_EXT :: 2;
    MAX_ENUM_EXT      :: 2147483647;

    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT      :: DISABLED_EXT;
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT  :: OVERESTIMATE_EXT;
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT :: UNDERESTIMATE_EXT;
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT      :: MAX_ENUM_EXT;
}

PipelineRasterizationConservativeStateCreateFlagsEXT :: Flags;
PhysicalDeviceConservativeRasterizationPropertiesEXT :: struct {
    sType:                                       StructureType = .PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
    pNext:                                       *void;
    primitiveOverestimationSize:                 float;
    maxExtraPrimitiveOverestimationSize:         float;
    extraPrimitiveOverestimationSizeGranularity: float;
    primitiveUnderestimation:                    Bool32;
    conservativePointAndLineRasterization:       Bool32;
    degenerateTrianglesRasterized:               Bool32;
    degenerateLinesRasterized:                   Bool32;
    fullyCoveredFragmentShaderInputVariable:     Bool32;
    conservativeRasterizationPostDepthCoverage:  Bool32;
}

PipelineRasterizationConservativeStateCreateInfoEXT :: struct {
    sType:                            StructureType = .PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
    pNext:                            *void;
    flags:                            PipelineRasterizationConservativeStateCreateFlagsEXT;
    conservativeRasterizationMode:    ConservativeRasterizationModeEXT;
    extraPrimitiveOverestimationSize: float;
}

PipelineRasterizationDepthClipStateCreateFlagsEXT :: Flags;
PhysicalDeviceDepthClipEnableFeaturesEXT :: struct {
    sType:           StructureType = .PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
    pNext:           *void;
    depthClipEnable: Bool32;
}

PipelineRasterizationDepthClipStateCreateInfoEXT :: struct {
    sType:           StructureType = .PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
    pNext:           *void;
    flags:           PipelineRasterizationDepthClipStateCreateFlagsEXT;
    depthClipEnable: Bool32;
}

XYColorEXT :: struct {
    x: float;
    y: float;
}

HdrMetadataEXT :: struct {
    sType:                     StructureType = .HDR_METADATA_EXT;
    pNext:                     *void;
    displayPrimaryRed:         XYColorEXT;
    displayPrimaryGreen:       XYColorEXT;
    displayPrimaryBlue:        XYColorEXT;
    whitePoint:                XYColorEXT;
    maxLuminance:              float;
    minLuminance:              float;
    maxContentLightLevel:      float;
    maxFrameAverageLightLevel: float;
}

PFN_vkSetHdrMetadataEXT :: #type (device: Device, swapchainCount: u32, pSwapchains: *SwapchainKHR, pMetadata: *HdrMetadataEXT) -> void #c_call;

SetHdrMetadataEXT: #type (device: Device, swapchainCount: u32, pSwapchains: *SwapchainKHR, pMetadata: *HdrMetadataEXT) -> void #c_call;

DebugUtilsMessengerEXT_T :: struct {}
DebugUtilsMessengerEXT :: *DebugUtilsMessengerEXT_T;

DebugUtilsMessengerCallbackDataFlagsEXT :: Flags;

DebugUtilsMessageSeverityFlagBitsEXT :: enum_flags u32 {
    VERBOSE_EXT            :: 0x1;
    INFO_EXT               :: 0x10;
    WARNING_EXT            :: 0x100;
    ERROR_EXT              :: 0x1000;
    FLAG_BITS_MAX_ENUM_EXT :: 0x7fffffff;

    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT        :: VERBOSE_EXT;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT           :: INFO_EXT;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT        :: WARNING_EXT;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT          :: ERROR_EXT;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT :: FLAG_BITS_MAX_ENUM_EXT;
}

DebugUtilsMessageTypeFlagBitsEXT :: enum_flags u32 {
    GENERAL_EXT                :: 0x1;
    VALIDATION_EXT             :: 0x2;
    PERFORMANCE_EXT            :: 0x4;
    DEVICE_ADDRESS_BINDING_EXT :: 0x8;
    FLAG_BITS_MAX_ENUM_EXT     :: 0x7fffffff;

    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT                :: GENERAL_EXT;
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT             :: VALIDATION_EXT;
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT            :: PERFORMANCE_EXT;
    VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT :: DEVICE_ADDRESS_BINDING_EXT;
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT         :: FLAG_BITS_MAX_ENUM_EXT;
}

DebugUtilsMessageTypeFlagsEXT :: DebugUtilsMessageTypeFlagBitsEXT;
DebugUtilsMessageSeverityFlagsEXT :: DebugUtilsMessageSeverityFlagBitsEXT;
DebugUtilsMessengerCreateFlagsEXT :: Flags;
DebugUtilsLabelEXT :: struct {
    sType:      StructureType = .DEBUG_UTILS_LABEL_EXT;
    pNext:      *void;
    pLabelName: *u8;
    color:      [4] float;
}

DebugUtilsObjectNameInfoEXT :: struct {
    sType:        StructureType = .DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
    pNext:        *void;
    objectType:   ObjectType;
    objectHandle: u64;
    pObjectName:  *u8;
}

DebugUtilsMessengerCallbackDataEXT :: struct {
    sType:            StructureType = .DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
    pNext:            *void;
    flags:            DebugUtilsMessengerCallbackDataFlagsEXT;
    pMessageIdName:   *u8;
    messageIdNumber:  s32;
    pMessage:         *u8;
    queueLabelCount:  u32;
    pQueueLabels:     *DebugUtilsLabelEXT;
    cmdBufLabelCount: u32;
    pCmdBufLabels:    *DebugUtilsLabelEXT;
    objectCount:      u32;
    pObjects:         *DebugUtilsObjectNameInfoEXT;
}

PFN_vkDebugUtilsMessengerCallbackEXT :: #type (messageSeverity: DebugUtilsMessageSeverityFlagBitsEXT, messageTypes: DebugUtilsMessageTypeFlagsEXT, pCallbackData: *DebugUtilsMessengerCallbackDataEXT, pUserData: *void) -> Bool32 #c_call;

DebugUtilsMessengerCreateInfoEXT :: struct {
    sType:           StructureType = .DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    pNext:           *void;
    flags:           DebugUtilsMessengerCreateFlagsEXT;
    messageSeverity: DebugUtilsMessageSeverityFlagsEXT;
    messageType:     DebugUtilsMessageTypeFlagsEXT;
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT;
    pUserData:       *void;
}

DebugUtilsObjectTagInfoEXT :: struct {
    sType:        StructureType = .DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
    pNext:        *void;
    objectType:   ObjectType;
    objectHandle: u64;
    tagName:      u64;
    tagSize:      u64;
    pTag:         *void;
}

PFN_vkSetDebugUtilsObjectNameEXT :: #type (device: Device, pNameInfo: *DebugUtilsObjectNameInfoEXT) -> Result #c_call;
PFN_vkSetDebugUtilsObjectTagEXT :: #type (device: Device, pTagInfo: *DebugUtilsObjectTagInfoEXT) -> Result #c_call;
PFN_vkQueueBeginDebugUtilsLabelEXT :: #type (queue: Queue, pLabelInfo: *DebugUtilsLabelEXT) -> void #c_call;
PFN_vkQueueEndDebugUtilsLabelEXT :: #type (queue: Queue) -> void #c_call;
PFN_vkQueueInsertDebugUtilsLabelEXT :: #type (queue: Queue, pLabelInfo: *DebugUtilsLabelEXT) -> void #c_call;
PFN_vkCmdBeginDebugUtilsLabelEXT :: #type (commandBuffer: CommandBuffer, pLabelInfo: *DebugUtilsLabelEXT) -> void #c_call;
PFN_vkCmdEndDebugUtilsLabelEXT :: #type (commandBuffer: CommandBuffer) -> void #c_call;
PFN_vkCmdInsertDebugUtilsLabelEXT :: #type (commandBuffer: CommandBuffer, pLabelInfo: *DebugUtilsLabelEXT) -> void #c_call;
PFN_vkCreateDebugUtilsMessengerEXT :: #type (instance: Instance, pCreateInfo: *DebugUtilsMessengerCreateInfoEXT, pAllocator: *AllocationCallbacks, pMessenger: *DebugUtilsMessengerEXT) -> Result #c_call;
PFN_vkDestroyDebugUtilsMessengerEXT :: #type (instance: Instance, messenger: DebugUtilsMessengerEXT, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkSubmitDebugUtilsMessageEXT :: #type (instance: Instance, messageSeverity: DebugUtilsMessageSeverityFlagBitsEXT, messageTypes: DebugUtilsMessageTypeFlagsEXT, pCallbackData: *DebugUtilsMessengerCallbackDataEXT) -> void #c_call;

SetDebugUtilsObjectNameEXT: #type (device: Device, pNameInfo: *DebugUtilsObjectNameInfoEXT) -> Result #c_call;

SetDebugUtilsObjectTagEXT: #type (device: Device, pTagInfo: *DebugUtilsObjectTagInfoEXT) -> Result #c_call;

QueueBeginDebugUtilsLabelEXT: #type (queue: Queue, pLabelInfo: *DebugUtilsLabelEXT) -> void #c_call;

QueueEndDebugUtilsLabelEXT: #type (queue: Queue) -> void #c_call;

QueueInsertDebugUtilsLabelEXT: #type (queue: Queue, pLabelInfo: *DebugUtilsLabelEXT) -> void #c_call;

CmdBeginDebugUtilsLabelEXT: #type (commandBuffer: CommandBuffer, pLabelInfo: *DebugUtilsLabelEXT) -> void #c_call;

CmdEndDebugUtilsLabelEXT: #type (commandBuffer: CommandBuffer) -> void #c_call;

CmdInsertDebugUtilsLabelEXT: #type (commandBuffer: CommandBuffer, pLabelInfo: *DebugUtilsLabelEXT) -> void #c_call;

CreateDebugUtilsMessengerEXT: #type (instance: Instance, pCreateInfo: *DebugUtilsMessengerCreateInfoEXT, pAllocator: *AllocationCallbacks, pMessenger: *DebugUtilsMessengerEXT) -> Result #c_call;

DestroyDebugUtilsMessengerEXT: #type (instance: Instance, messenger: DebugUtilsMessengerEXT, pAllocator: *AllocationCallbacks) -> void #c_call;

SubmitDebugUtilsMessageEXT: #type (instance: Instance, messageSeverity: DebugUtilsMessageSeverityFlagBitsEXT, messageTypes: DebugUtilsMessageTypeFlagsEXT, pCallbackData: *DebugUtilsMessengerCallbackDataEXT) -> void #c_call;

SamplerReductionModeEXT :: SamplerReductionMode;

SamplerReductionModeCreateInfoEXT :: SamplerReductionModeCreateInfo;

PhysicalDeviceSamplerFilterMinmaxPropertiesEXT :: PhysicalDeviceSamplerFilterMinmaxProperties;

PhysicalDeviceInlineUniformBlockFeaturesEXT :: PhysicalDeviceInlineUniformBlockFeatures;

PhysicalDeviceInlineUniformBlockPropertiesEXT :: PhysicalDeviceInlineUniformBlockProperties;

WriteDescriptorSetInlineUniformBlockEXT :: WriteDescriptorSetInlineUniformBlock;

DescriptorPoolInlineUniformBlockCreateInfoEXT :: DescriptorPoolInlineUniformBlockCreateInfo;

SampleLocationEXT :: struct {
    x: float;
    y: float;
}

SampleLocationsInfoEXT :: struct {
    sType:                   StructureType = .SAMPLE_LOCATIONS_INFO_EXT;
    pNext:                   *void;
    sampleLocationsPerPixel: SampleCountFlagBits;
    sampleLocationGridSize:  Extent2D;
    sampleLocationsCount:    u32;
    pSampleLocations:        *SampleLocationEXT;
}

AttachmentSampleLocationsEXT :: struct {
    attachmentIndex:     u32;
    sampleLocationsInfo: SampleLocationsInfoEXT;
}

SubpassSampleLocationsEXT :: struct {
    subpassIndex:        u32;
    sampleLocationsInfo: SampleLocationsInfoEXT;
}

RenderPassSampleLocationsBeginInfoEXT :: struct {
    sType:                                 StructureType = .RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
    pNext:                                 *void;
    attachmentInitialSampleLocationsCount: u32;
    pAttachmentInitialSampleLocations:     *AttachmentSampleLocationsEXT;
    postSubpassSampleLocationsCount:       u32;
    pPostSubpassSampleLocations:           *SubpassSampleLocationsEXT;
}

PipelineSampleLocationsStateCreateInfoEXT :: struct {
    sType:                 StructureType = .PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
    pNext:                 *void;
    sampleLocationsEnable: Bool32;
    sampleLocationsInfo:   SampleLocationsInfoEXT;
}

PhysicalDeviceSampleLocationsPropertiesEXT :: struct {
    sType:                         StructureType = .PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
    pNext:                         *void;
    sampleLocationSampleCounts:    SampleCountFlags;
    maxSampleLocationGridSize:     Extent2D;
    sampleLocationCoordinateRange: [2] float;
    sampleLocationSubPixelBits:    u32;
    variableSampleLocations:       Bool32;
}

MultisamplePropertiesEXT :: struct {
    sType:                     StructureType = .MULTISAMPLE_PROPERTIES_EXT;
    pNext:                     *void;
    maxSampleLocationGridSize: Extent2D;
}

PFN_vkCmdSetSampleLocationsEXT :: #type (commandBuffer: CommandBuffer, pSampleLocationsInfo: *SampleLocationsInfoEXT) -> void #c_call;
PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT :: #type (physicalDevice: PhysicalDevice, samples: SampleCountFlagBits, pMultisampleProperties: *MultisamplePropertiesEXT) -> void #c_call;

CmdSetSampleLocationsEXT: #type (commandBuffer: CommandBuffer, pSampleLocationsInfo: *SampleLocationsInfoEXT) -> void #c_call;

GetPhysicalDeviceMultisamplePropertiesEXT: #type (physicalDevice: PhysicalDevice, samples: SampleCountFlagBits, pMultisampleProperties: *MultisamplePropertiesEXT) -> void #c_call;

BlendOverlapEXT :: enum u32 {
    UNCORRELATED_EXT :: 0;
    DISJOINT_EXT     :: 1;
    CONJOINT_EXT     :: 2;
    MAX_ENUM_EXT     :: 2147483647;

    VK_BLEND_OVERLAP_UNCORRELATED_EXT :: UNCORRELATED_EXT;
    VK_BLEND_OVERLAP_DISJOINT_EXT     :: DISJOINT_EXT;
    VK_BLEND_OVERLAP_CONJOINT_EXT     :: CONJOINT_EXT;
    VK_BLEND_OVERLAP_MAX_ENUM_EXT     :: MAX_ENUM_EXT;
}

PhysicalDeviceBlendOperationAdvancedFeaturesEXT :: struct {
    sType:                           StructureType = .PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
    pNext:                           *void;
    advancedBlendCoherentOperations: Bool32;
}

PhysicalDeviceBlendOperationAdvancedPropertiesEXT :: struct {
    sType:                                 StructureType = .PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
    pNext:                                 *void;
    advancedBlendMaxColorAttachments:      u32;
    advancedBlendIndependentBlend:         Bool32;
    advancedBlendNonPremultipliedSrcColor: Bool32;
    advancedBlendNonPremultipliedDstColor: Bool32;
    advancedBlendCorrelatedOverlap:        Bool32;
    advancedBlendAllOperations:            Bool32;
}

PipelineColorBlendAdvancedStateCreateInfoEXT :: struct {
    sType:            StructureType = .PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
    pNext:            *void;
    srcPremultiplied: Bool32;
    dstPremultiplied: Bool32;
    blendOverlap:     BlendOverlapEXT;
}

PipelineCoverageToColorStateCreateFlagsNV :: Flags;
PipelineCoverageToColorStateCreateInfoNV :: struct {
    sType:                   StructureType = .PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
    pNext:                   *void;
    flags:                   PipelineCoverageToColorStateCreateFlagsNV;
    coverageToColorEnable:   Bool32;
    coverageToColorLocation: u32;
}

CoverageModulationModeNV :: enum u32 {
    NONE_NV     :: 0;
    RGB_NV      :: 1;
    ALPHA_NV    :: 2;
    RGBA_NV     :: 3;
    MAX_ENUM_NV :: 2147483647;

    VK_COVERAGE_MODULATION_MODE_NONE_NV     :: NONE_NV;
    VK_COVERAGE_MODULATION_MODE_RGB_NV      :: RGB_NV;
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV    :: ALPHA_NV;
    VK_COVERAGE_MODULATION_MODE_RGBA_NV     :: RGBA_NV;
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV :: MAX_ENUM_NV;
}

PipelineCoverageModulationStateCreateFlagsNV :: Flags;
PipelineCoverageModulationStateCreateInfoNV :: struct {
    sType:                         StructureType = .PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
    pNext:                         *void;
    flags:                         PipelineCoverageModulationStateCreateFlagsNV;
    coverageModulationMode:        CoverageModulationModeNV;
    coverageModulationTableEnable: Bool32;
    coverageModulationTableCount:  u32;
    pCoverageModulationTable:      *float;
}

PhysicalDeviceShaderSMBuiltinsPropertiesNV :: struct {
    sType:            StructureType = .PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV;
    pNext:            *void;
    shaderSMCount:    u32;
    shaderWarpsPerSM: u32;
}

PhysicalDeviceShaderSMBuiltinsFeaturesNV :: struct {
    sType:            StructureType = .PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;
    pNext:            *void;
    shaderSMBuiltins: Bool32;
}

DrmFormatModifierPropertiesEXT :: struct {
    drmFormatModifier:               u64;
    drmFormatModifierPlaneCount:     u32;
    drmFormatModifierTilingFeatures: FormatFeatureFlags;
}

DrmFormatModifierPropertiesListEXT :: struct {
    sType:                        StructureType = .DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
    pNext:                        *void;
    drmFormatModifierCount:       u32;
    pDrmFormatModifierProperties: *DrmFormatModifierPropertiesEXT;
}

PhysicalDeviceImageDrmFormatModifierInfoEXT :: struct {
    sType:                 StructureType = .PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
    pNext:                 *void;
    drmFormatModifier:     u64;
    sharingMode:           SharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices:   *u32;
}

ImageDrmFormatModifierListCreateInfoEXT :: struct {
    sType:                  StructureType = .IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
    pNext:                  *void;
    drmFormatModifierCount: u32;
    pDrmFormatModifiers:    *u64;
}

ImageDrmFormatModifierExplicitCreateInfoEXT :: struct {
    sType:                       StructureType = .IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
    pNext:                       *void;
    drmFormatModifier:           u64;
    drmFormatModifierPlaneCount: u32;
    pPlaneLayouts:               *SubresourceLayout;
}

ImageDrmFormatModifierPropertiesEXT :: struct {
    sType:             StructureType = .IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;
    pNext:             *void;
    drmFormatModifier: u64;
}

DrmFormatModifierProperties2EXT :: struct {
    drmFormatModifier:               u64;
    drmFormatModifierPlaneCount:     u32;
    drmFormatModifierTilingFeatures: FormatFeatureFlags2;
}

DrmFormatModifierPropertiesList2EXT :: struct {
    sType:                        StructureType = .DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT;
    pNext:                        *void;
    drmFormatModifierCount:       u32;
    pDrmFormatModifierProperties: *DrmFormatModifierProperties2EXT;
}

PFN_vkGetImageDrmFormatModifierPropertiesEXT :: #type (device: Device, image: Image, pProperties: *ImageDrmFormatModifierPropertiesEXT) -> Result #c_call;

GetImageDrmFormatModifierPropertiesEXT: #type (device: Device, image: Image, pProperties: *ImageDrmFormatModifierPropertiesEXT) -> Result #c_call;

ValidationCacheEXT_T :: struct {}
ValidationCacheEXT :: *ValidationCacheEXT_T;

ValidationCacheHeaderVersionEXT :: enum u32 {
    ONE_EXT      :: 1;
    MAX_ENUM_EXT :: 2147483647;

    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT      :: ONE_EXT;
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT :: MAX_ENUM_EXT;
}

ValidationCacheCreateFlagsEXT :: Flags;
ValidationCacheCreateInfoEXT :: struct {
    sType:           StructureType = .VALIDATION_CACHE_CREATE_INFO_EXT;
    pNext:           *void;
    flags:           ValidationCacheCreateFlagsEXT;
    initialDataSize: u64;
    pInitialData:    *void;
}

ShaderModuleValidationCacheCreateInfoEXT :: struct {
    sType:           StructureType = .SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
    pNext:           *void;
    validationCache: ValidationCacheEXT;
}

PFN_vkCreateValidationCacheEXT :: #type (device: Device, pCreateInfo: *ValidationCacheCreateInfoEXT, pAllocator: *AllocationCallbacks, pValidationCache: *ValidationCacheEXT) -> Result #c_call;
PFN_vkDestroyValidationCacheEXT :: #type (device: Device, validationCache: ValidationCacheEXT, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkMergeValidationCachesEXT :: #type (device: Device, dstCache: ValidationCacheEXT, srcCacheCount: u32, pSrcCaches: *ValidationCacheEXT) -> Result #c_call;
PFN_vkGetValidationCacheDataEXT :: #type (device: Device, validationCache: ValidationCacheEXT, pDataSize: *u64, pData: *void) -> Result #c_call;

CreateValidationCacheEXT: #type (device: Device, pCreateInfo: *ValidationCacheCreateInfoEXT, pAllocator: *AllocationCallbacks, pValidationCache: *ValidationCacheEXT) -> Result #c_call;

DestroyValidationCacheEXT: #type (device: Device, validationCache: ValidationCacheEXT, pAllocator: *AllocationCallbacks) -> void #c_call;

MergeValidationCachesEXT: #type (device: Device, dstCache: ValidationCacheEXT, srcCacheCount: u32, pSrcCaches: *ValidationCacheEXT) -> Result #c_call;

GetValidationCacheDataEXT: #type (device: Device, validationCache: ValidationCacheEXT, pDataSize: *u64, pData: *void) -> Result #c_call;

DescriptorBindingFlagBitsEXT :: DescriptorBindingFlagBits;

DescriptorBindingFlagsEXT :: DescriptorBindingFlags;

DescriptorSetLayoutBindingFlagsCreateInfoEXT :: DescriptorSetLayoutBindingFlagsCreateInfo;

PhysicalDeviceDescriptorIndexingFeaturesEXT :: PhysicalDeviceDescriptorIndexingFeatures;

PhysicalDeviceDescriptorIndexingPropertiesEXT :: PhysicalDeviceDescriptorIndexingProperties;

DescriptorSetVariableDescriptorCountAllocateInfoEXT :: DescriptorSetVariableDescriptorCountAllocateInfo;

DescriptorSetVariableDescriptorCountLayoutSupportEXT :: DescriptorSetVariableDescriptorCountLayoutSupport;

ShadingRatePaletteEntryNV :: enum u32 {
    NO_INVOCATIONS_NV               :: 0;
    _16_INVOCATIONS_PER_PIXEL_NV    :: 1;
    _8_INVOCATIONS_PER_PIXEL_NV     :: 2;
    _4_INVOCATIONS_PER_PIXEL_NV     :: 3;
    _2_INVOCATIONS_PER_PIXEL_NV     :: 4;
    _1_INVOCATION_PER_PIXEL_NV      :: 5;
    _1_INVOCATION_PER_2X1_PIXELS_NV :: 6;
    _1_INVOCATION_PER_1X2_PIXELS_NV :: 7;
    _1_INVOCATION_PER_2X2_PIXELS_NV :: 8;
    _1_INVOCATION_PER_4X2_PIXELS_NV :: 9;
    _1_INVOCATION_PER_2X4_PIXELS_NV :: 10;
    _1_INVOCATION_PER_4X4_PIXELS_NV :: 11;
    MAX_ENUM_NV                     :: 2147483647;

    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV              :: NO_INVOCATIONS_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV    :: _16_INVOCATIONS_PER_PIXEL_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV     :: _8_INVOCATIONS_PER_PIXEL_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV     :: _4_INVOCATIONS_PER_PIXEL_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV     :: _2_INVOCATIONS_PER_PIXEL_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV      :: _1_INVOCATION_PER_PIXEL_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV :: _1_INVOCATION_PER_2X1_PIXELS_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV :: _1_INVOCATION_PER_1X2_PIXELS_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV :: _1_INVOCATION_PER_2X2_PIXELS_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV :: _1_INVOCATION_PER_4X2_PIXELS_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV :: _1_INVOCATION_PER_2X4_PIXELS_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV :: _1_INVOCATION_PER_4X4_PIXELS_NV;
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV                    :: MAX_ENUM_NV;
}

CoarseSampleOrderTypeNV :: enum u32 {
    DEFAULT_NV      :: 0;
    CUSTOM_NV       :: 1;
    PIXEL_MAJOR_NV  :: 2;
    SAMPLE_MAJOR_NV :: 3;
    MAX_ENUM_NV     :: 2147483647;

    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV      :: DEFAULT_NV;
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV       :: CUSTOM_NV;
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV  :: PIXEL_MAJOR_NV;
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV :: SAMPLE_MAJOR_NV;
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV     :: MAX_ENUM_NV;
}

ShadingRatePaletteNV :: struct {
    shadingRatePaletteEntryCount: u32;
    pShadingRatePaletteEntries:   *ShadingRatePaletteEntryNV;
}

PipelineViewportShadingRateImageStateCreateInfoNV :: struct {
    sType:                  StructureType = .PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
    pNext:                  *void;
    shadingRateImageEnable: Bool32;
    viewportCount:          u32;
    pShadingRatePalettes:   *ShadingRatePaletteNV;
}

PhysicalDeviceShadingRateImageFeaturesNV :: struct {
    sType:                        StructureType = .PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
    pNext:                        *void;
    shadingRateImage:             Bool32;
    shadingRateCoarseSampleOrder: Bool32;
}

PhysicalDeviceShadingRateImagePropertiesNV :: struct {
    sType:                       StructureType = .PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV;
    pNext:                       *void;
    shadingRateTexelSize:        Extent2D;
    shadingRatePaletteSize:      u32;
    shadingRateMaxCoarseSamples: u32;
}

CoarseSampleLocationNV :: struct {
    pixelX: u32;
    pixelY: u32;
    sample: u32;
}

CoarseSampleOrderCustomNV :: struct {
    shadingRate:         ShadingRatePaletteEntryNV;
    sampleCount:         u32;
    sampleLocationCount: u32;
    pSampleLocations:    *CoarseSampleLocationNV;
}

PipelineViewportCoarseSampleOrderStateCreateInfoNV :: struct {
    sType:                  StructureType = .PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
    pNext:                  *void;
    sampleOrderType:        CoarseSampleOrderTypeNV;
    customSampleOrderCount: u32;
    pCustomSampleOrders:    *CoarseSampleOrderCustomNV;
}

PFN_vkCmdBindShadingRateImageNV :: #type (commandBuffer: CommandBuffer, imageView: ImageView, imageLayout: ImageLayout) -> void #c_call;
PFN_vkCmdSetViewportShadingRatePaletteNV :: #type (commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: *ShadingRatePaletteNV) -> void #c_call;
PFN_vkCmdSetCoarseSampleOrderNV :: #type (commandBuffer: CommandBuffer, sampleOrderType: CoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: *CoarseSampleOrderCustomNV) -> void #c_call;

CmdBindShadingRateImageNV: #type (commandBuffer: CommandBuffer, imageView: ImageView, imageLayout: ImageLayout) -> void #c_call;

CmdSetViewportShadingRatePaletteNV: #type (commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: *ShadingRatePaletteNV) -> void #c_call;

CmdSetCoarseSampleOrderNV: #type (commandBuffer: CommandBuffer, sampleOrderType: CoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: *CoarseSampleOrderCustomNV) -> void #c_call;

AccelerationStructureNV_T :: struct {}
AccelerationStructureNV :: *AccelerationStructureNV_T;

RayTracingShaderGroupTypeKHR :: enum u32 {
    GENERAL_KHR              :: 0;
    TRIANGLES_HIT_GROUP_KHR  :: 1;
    PROCEDURAL_HIT_GROUP_KHR :: 2;
    GENERAL_NV               :: 0;
    TRIANGLES_HIT_GROUP_NV   :: 1;
    PROCEDURAL_HIT_GROUP_NV  :: 2;
    MAX_ENUM_KHR             :: 2147483647;

    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR              :: GENERAL_KHR;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR  :: TRIANGLES_HIT_GROUP_KHR;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR :: PROCEDURAL_HIT_GROUP_KHR;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV               :: GENERAL_NV;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV   :: TRIANGLES_HIT_GROUP_NV;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV  :: PROCEDURAL_HIT_GROUP_NV;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR             :: MAX_ENUM_KHR;
}

RayTracingShaderGroupTypeNV :: RayTracingShaderGroupTypeKHR;

GeometryTypeKHR :: enum u32 {
    TRIANGLES_KHR :: 0;
    AABBS_KHR     :: 1;
    INSTANCES_KHR :: 2;
    TRIANGLES_NV  :: 0;
    AABBS_NV      :: 1;
    MAX_ENUM_KHR  :: 2147483647;

    VK_GEOMETRY_TYPE_TRIANGLES_KHR :: TRIANGLES_KHR;
    VK_GEOMETRY_TYPE_AABBS_KHR     :: AABBS_KHR;
    VK_GEOMETRY_TYPE_INSTANCES_KHR :: INSTANCES_KHR;
    VK_GEOMETRY_TYPE_TRIANGLES_NV  :: TRIANGLES_NV;
    VK_GEOMETRY_TYPE_AABBS_NV      :: AABBS_NV;
    VK_GEOMETRY_TYPE_MAX_ENUM_KHR  :: MAX_ENUM_KHR;
}

GeometryTypeNV :: GeometryTypeKHR;

AccelerationStructureTypeKHR :: enum u32 {
    TOP_LEVEL_KHR    :: 0;
    BOTTOM_LEVEL_KHR :: 1;
    GENERIC_KHR      :: 2;
    TOP_LEVEL_NV     :: 0;
    BOTTOM_LEVEL_NV  :: 1;
    MAX_ENUM_KHR     :: 2147483647;

    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR    :: TOP_LEVEL_KHR;
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR :: BOTTOM_LEVEL_KHR;
    VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR      :: GENERIC_KHR;
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV     :: TOP_LEVEL_NV;
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV  :: BOTTOM_LEVEL_NV;
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR     :: MAX_ENUM_KHR;
}

AccelerationStructureTypeNV :: AccelerationStructureTypeKHR;

CopyAccelerationStructureModeKHR :: enum u32 {
    CLONE_KHR       :: 0;
    COMPACT_KHR     :: 1;
    SERIALIZE_KHR   :: 2;
    DESERIALIZE_KHR :: 3;
    CLONE_NV        :: 0;
    COMPACT_NV      :: 1;
    MAX_ENUM_KHR    :: 2147483647;

    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR       :: CLONE_KHR;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR     :: COMPACT_KHR;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR   :: SERIALIZE_KHR;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR :: DESERIALIZE_KHR;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV        :: CLONE_NV;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV      :: COMPACT_NV;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR    :: MAX_ENUM_KHR;
}

CopyAccelerationStructureModeNV :: CopyAccelerationStructureModeKHR;

AccelerationStructureMemoryRequirementsTypeNV :: enum u32 {
    OBJECT_NV         :: 0;
    BUILD_SCRATCH_NV  :: 1;
    UPDATE_SCRATCH_NV :: 2;
    MAX_ENUM_NV       :: 2147483647;

    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV         :: OBJECT_NV;
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV  :: BUILD_SCRATCH_NV;
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV :: UPDATE_SCRATCH_NV;
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV       :: MAX_ENUM_NV;
}

GeometryFlagBitsKHR :: enum_flags u32 {
    OPAQUE_KHR                          :: 0x1;
    NO_DUPLICATE_ANY_HIT_INVOCATION_KHR :: 0x2;
    OPAQUE_NV                           :: 0x1;
    NO_DUPLICATE_ANY_HIT_INVOCATION_NV  :: 0x2;
    FLAG_BITS_MAX_ENUM_KHR              :: 0x7fffffff;

    VK_GEOMETRY_OPAQUE_BIT_KHR                          :: OPAQUE_KHR;
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR :: NO_DUPLICATE_ANY_HIT_INVOCATION_KHR;
    VK_GEOMETRY_OPAQUE_BIT_NV                           :: OPAQUE_NV;
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV  :: NO_DUPLICATE_ANY_HIT_INVOCATION_NV;
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR                  :: FLAG_BITS_MAX_ENUM_KHR;
}

GeometryFlagsKHR :: GeometryFlagBitsKHR;
GeometryFlagsNV :: GeometryFlagsKHR;

GeometryFlagBitsNV :: GeometryFlagBitsKHR;

GeometryInstanceFlagBitsKHR :: enum_flags u32 {
    TRIANGLE_FACING_CULL_DISABLE_KHR    :: 0x1;
    TRIANGLE_FLIP_FACING_KHR            :: 0x2;
    FORCE_OPAQUE_KHR                    :: 0x4;
    FORCE_NO_OPAQUE_KHR                 :: 0x8;
    FORCE_OPACITY_MICROMAP_2_STATE_EXT  :: 0x10;
    DISABLE_OPACITY_MICROMAPS_EXT       :: 0x20;
    TRIANGLE_FRONT_COUNTERCLOCKWISE_KHR :: 0x2;
    TRIANGLE_CULL_DISABLE_NV            :: 0x1;
    TRIANGLE_FRONT_COUNTERCLOCKWISE_NV  :: 0x2;
    FORCE_OPAQUE_NV                     :: 0x4;
    FORCE_NO_OPAQUE_NV                  :: 0x8;
    FLAG_BITS_MAX_ENUM_KHR              :: 0x7fffffff;

    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR    :: TRIANGLE_FACING_CULL_DISABLE_KHR;
    VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR            :: TRIANGLE_FLIP_FACING_KHR;
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR                    :: FORCE_OPAQUE_KHR;
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR                 :: FORCE_NO_OPAQUE_KHR;
    VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT      :: FORCE_OPACITY_MICROMAP_2_STATE_EXT;
    VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT           :: DISABLE_OPACITY_MICROMAPS_EXT;
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR :: TRIANGLE_FRONT_COUNTERCLOCKWISE_KHR;
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV            :: TRIANGLE_CULL_DISABLE_NV;
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV  :: TRIANGLE_FRONT_COUNTERCLOCKWISE_NV;
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV                     :: FORCE_OPAQUE_NV;
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV                  :: FORCE_NO_OPAQUE_NV;
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR                  :: FLAG_BITS_MAX_ENUM_KHR;
}

GeometryInstanceFlagsKHR :: GeometryInstanceFlagBitsKHR;
GeometryInstanceFlagsNV :: GeometryInstanceFlagsKHR;

GeometryInstanceFlagBitsNV :: GeometryInstanceFlagBitsKHR;

BuildAccelerationStructureFlagBitsKHR :: enum_flags u32 {
    ALLOW_UPDATE_KHR                       :: 0x1;
    ALLOW_COMPACTION_KHR                   :: 0x2;
    PREFER_FAST_TRACE_KHR                  :: 0x4;
    PREFER_FAST_BUILD_KHR                  :: 0x8;
    LOW_MEMORY_KHR                         :: 0x10;
    MOTION_NV                              :: 0x20;
    ALLOW_OPACITY_MICROMAP_UPDATE_EXT      :: 0x40;
    ALLOW_DISABLE_OPACITY_MICROMAPS_EXT    :: 0x80;
    ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT :: 0x100;

    ALLOW_DATA_ACCESS_KHR                  :: 0x800;
    ALLOW_UPDATE_NV                        :: 0x1;
    ALLOW_COMPACTION_NV                    :: 0x2;
    PREFER_FAST_TRACE_NV                   :: 0x4;
    PREFER_FAST_BUILD_NV                   :: 0x8;
    LOW_MEMORY_NV                          :: 0x10;
    FLAG_BITS_MAX_ENUM_KHR                 :: 0x7fffffff;

    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR                   :: ALLOW_UPDATE_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR               :: ALLOW_COMPACTION_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR              :: PREFER_FAST_TRACE_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR              :: PREFER_FAST_BUILD_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR                     :: LOW_MEMORY_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV                          :: MOTION_NV;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT      :: ALLOW_OPACITY_MICROMAP_UPDATE_EXT;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT    :: ALLOW_DISABLE_OPACITY_MICROMAPS_EXT;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT :: ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT;

    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR                  :: ALLOW_DATA_ACCESS_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV                    :: ALLOW_UPDATE_NV;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV                :: ALLOW_COMPACTION_NV;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV               :: PREFER_FAST_TRACE_NV;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV               :: PREFER_FAST_BUILD_NV;
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV                      :: LOW_MEMORY_NV;
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR                 :: FLAG_BITS_MAX_ENUM_KHR;
}

BuildAccelerationStructureFlagsKHR :: BuildAccelerationStructureFlagBitsKHR;
BuildAccelerationStructureFlagsNV :: BuildAccelerationStructureFlagsKHR;

BuildAccelerationStructureFlagBitsNV :: BuildAccelerationStructureFlagBitsKHR;

RayTracingShaderGroupCreateInfoNV :: struct {
    sType:              StructureType = .RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;
    pNext:              *void;
    type:               RayTracingShaderGroupTypeKHR;
    generalShader:      u32;
    closestHitShader:   u32;
    anyHitShader:       u32;
    intersectionShader: u32;
}

RayTracingPipelineCreateInfoNV :: struct {
    sType:              StructureType = .RAY_TRACING_PIPELINE_CREATE_INFO_NV;
    pNext:              *void;
    flags:              PipelineCreateFlags;
    stageCount:         u32;
    pStages:            *PipelineShaderStageCreateInfo;
    groupCount:         u32;
    pGroups:            *RayTracingShaderGroupCreateInfoNV;
    maxRecursionDepth:  u32;
    layout:             PipelineLayout;
    basePipelineHandle: Pipeline;
    basePipelineIndex:  s32;
}

GeometryTrianglesNV :: struct {
    sType:           StructureType = .GEOMETRY_TRIANGLES_NV;
    pNext:           *void;
    vertexData:      Buffer;
    vertexOffset:    DeviceSize;
    vertexCount:     u32;
    vertexStride:    DeviceSize;
    vertexFormat:    Format;
    indexData:       Buffer;
    indexOffset:     DeviceSize;
    indexCount:      u32;
    indexType:       IndexType;
    transformData:   Buffer;
    transformOffset: DeviceSize;
}

GeometryAABBNV :: struct {
    sType:    StructureType = .GEOMETRY_AABB_NV;
    pNext:    *void;
    aabbData: Buffer;
    numAABBs: u32;
    stride:   u32;
    offset:   DeviceSize;
}

GeometryDataNV :: struct {
    triangles: GeometryTrianglesNV;
    aabbs:     GeometryAABBNV;
}

GeometryNV :: struct {
    sType:        StructureType = .GEOMETRY_NV;
    pNext:        *void;
    geometryType: GeometryTypeKHR;
    geometry:     GeometryDataNV;
    flags:        GeometryFlagsKHR;
}

AccelerationStructureInfoNV :: struct {
    sType:         StructureType = .ACCELERATION_STRUCTURE_INFO_NV;
    pNext:         *void;
    type:          AccelerationStructureTypeNV;
    flags:         BuildAccelerationStructureFlagsNV;
    instanceCount: u32;
    geometryCount: u32;
    pGeometries:   *GeometryNV;
}

AccelerationStructureCreateInfoNV :: struct {
    sType:         StructureType = .ACCELERATION_STRUCTURE_CREATE_INFO_NV;
    pNext:         *void;
    compactedSize: DeviceSize;
    info:          AccelerationStructureInfoNV;
}

BindAccelerationStructureMemoryInfoNV :: struct {
    sType:                 StructureType = .BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
    pNext:                 *void;
    accelerationStructure: AccelerationStructureNV;
    memory:                DeviceMemory;
    memoryOffset:          DeviceSize;
    deviceIndexCount:      u32;
    pDeviceIndices:        *u32;
}

WriteDescriptorSetAccelerationStructureNV :: struct {
    sType:                      StructureType = .WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
    pNext:                      *void;
    accelerationStructureCount: u32;
    pAccelerationStructures:    *AccelerationStructureNV;
}

AccelerationStructureMemoryRequirementsInfoNV :: struct {
    sType:                 StructureType = .ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
    pNext:                 *void;
    type:                  AccelerationStructureMemoryRequirementsTypeNV;
    accelerationStructure: AccelerationStructureNV;
}

PhysicalDeviceRayTracingPropertiesNV :: struct {
    sType:                                  StructureType = .PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV;
    pNext:                                  *void;
    shaderGroupHandleSize:                  u32;
    maxRecursionDepth:                      u32;
    maxShaderGroupStride:                   u32;
    shaderGroupBaseAlignment:               u32;
    maxGeometryCount:                       u64;
    maxInstanceCount:                       u64;
    maxTriangleCount:                       u64;
    maxDescriptorSetAccelerationStructures: u32;
}

TransformMatrixKHR :: struct {
    matrix: [3] [4] float;
}

TransformMatrixNV :: TransformMatrixKHR;

AabbPositionsKHR :: struct {
    minX: float;
    minY: float;
    minZ: float;
    maxX: float;
    maxY: float;
    maxZ: float;
}

AabbPositionsNV :: AabbPositionsKHR;

AccelerationStructureInstanceKHR :: struct {
    transform:                              TransformMatrixKHR;
    instanceCustomIndex:                    u32;
    #place instanceCustomIndex; /*bitfield 24*/ mask:                                   u32;
    instanceShaderBindingTableRecordOffset: u32;
    #place instanceShaderBindingTableRecordOffset; /*bitfield 24*/ flags:                                  GeometryInstanceFlagsKHR;
    accelerationStructureReference:         u64;
}

AccelerationStructureInstanceNV :: AccelerationStructureInstanceKHR;

PFN_vkCreateAccelerationStructureNV :: #type (device: Device, pCreateInfo: *AccelerationStructureCreateInfoNV, pAllocator: *AllocationCallbacks, pAccelerationStructure: *AccelerationStructureNV) -> Result #c_call;
PFN_vkDestroyAccelerationStructureNV :: #type (device: Device, accelerationStructure: AccelerationStructureNV, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkGetAccelerationStructureMemoryRequirementsNV :: #type (device: Device, pInfo: *AccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: *MemoryRequirements2KHR) -> void #c_call;
PFN_vkBindAccelerationStructureMemoryNV :: #type (device: Device, bindInfoCount: u32, pBindInfos: *BindAccelerationStructureMemoryInfoNV) -> Result #c_call;
PFN_vkCmdBuildAccelerationStructureNV :: #type (commandBuffer: CommandBuffer, pInfo: *AccelerationStructureInfoNV, instanceData: Buffer, instanceOffset: DeviceSize, update: Bool32, dst: AccelerationStructureNV, src: AccelerationStructureNV, scratch: Buffer, scratchOffset: DeviceSize) -> void #c_call;
PFN_vkCmdCopyAccelerationStructureNV :: #type (commandBuffer: CommandBuffer, dst: AccelerationStructureNV, src: AccelerationStructureNV, mode: CopyAccelerationStructureModeKHR) -> void #c_call;
PFN_vkCmdTraceRaysNV :: #type (commandBuffer: CommandBuffer, raygenShaderBindingTableBuffer: Buffer, raygenShaderBindingOffset: DeviceSize, missShaderBindingTableBuffer: Buffer, missShaderBindingOffset: DeviceSize, missShaderBindingStride: DeviceSize, hitShaderBindingTableBuffer: Buffer, hitShaderBindingOffset: DeviceSize, hitShaderBindingStride: DeviceSize, callableShaderBindingTableBuffer: Buffer, callableShaderBindingOffset: DeviceSize, callableShaderBindingStride: DeviceSize, width: u32, height: u32, depth: u32) -> void #c_call;
PFN_vkCreateRayTracingPipelinesNV :: #type (device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: *RayTracingPipelineCreateInfoNV, pAllocator: *AllocationCallbacks, pPipelines: *Pipeline) -> Result #c_call;
PFN_vkGetRayTracingShaderGroupHandlesKHR :: #type (device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: u64, pData: *void) -> Result #c_call;
PFN_vkGetRayTracingShaderGroupHandlesNV :: #type (device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: u64, pData: *void) -> Result #c_call;
PFN_vkGetAccelerationStructureHandleNV :: #type (device: Device, accelerationStructure: AccelerationStructureNV, dataSize: u64, pData: *void) -> Result #c_call;
PFN_vkCmdWriteAccelerationStructuresPropertiesNV :: #type (commandBuffer: CommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: *AccelerationStructureNV, queryType: QueryType, queryPool: QueryPool, firstQuery: u32) -> void #c_call;
PFN_vkCompileDeferredNV :: #type (device: Device, pipeline: Pipeline, shader: u32) -> Result #c_call;

CreateAccelerationStructureNV: #type (device: Device, pCreateInfo: *AccelerationStructureCreateInfoNV, pAllocator: *AllocationCallbacks, pAccelerationStructure: *AccelerationStructureNV) -> Result #c_call;

DestroyAccelerationStructureNV: #type (device: Device, accelerationStructure: AccelerationStructureNV, pAllocator: *AllocationCallbacks) -> void #c_call;

GetAccelerationStructureMemoryRequirementsNV: #type (device: Device, pInfo: *AccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: *MemoryRequirements2KHR) -> void #c_call;

BindAccelerationStructureMemoryNV: #type (device: Device, bindInfoCount: u32, pBindInfos: *BindAccelerationStructureMemoryInfoNV) -> Result #c_call;

CmdBuildAccelerationStructureNV: #type (commandBuffer: CommandBuffer, pInfo: *AccelerationStructureInfoNV, instanceData: Buffer, instanceOffset: DeviceSize, update: Bool32, dst: AccelerationStructureNV, src: AccelerationStructureNV, scratch: Buffer, scratchOffset: DeviceSize) -> void #c_call;

CmdCopyAccelerationStructureNV: #type (commandBuffer: CommandBuffer, dst: AccelerationStructureNV, src: AccelerationStructureNV, mode: CopyAccelerationStructureModeKHR) -> void #c_call;

CmdTraceRaysNV: #type (commandBuffer: CommandBuffer, raygenShaderBindingTableBuffer: Buffer, raygenShaderBindingOffset: DeviceSize, missShaderBindingTableBuffer: Buffer, missShaderBindingOffset: DeviceSize, missShaderBindingStride: DeviceSize, hitShaderBindingTableBuffer: Buffer, hitShaderBindingOffset: DeviceSize, hitShaderBindingStride: DeviceSize, callableShaderBindingTableBuffer: Buffer, callableShaderBindingOffset: DeviceSize, callableShaderBindingStride: DeviceSize, width: u32, height: u32, depth: u32) -> void #c_call;

CreateRayTracingPipelinesNV: #type (device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: *RayTracingPipelineCreateInfoNV, pAllocator: *AllocationCallbacks, pPipelines: *Pipeline) -> Result #c_call;

GetRayTracingShaderGroupHandlesKHR: #type (device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: u64, pData: *void) -> Result #c_call;

GetRayTracingShaderGroupHandlesNV: #type (device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: u64, pData: *void) -> Result #c_call;

GetAccelerationStructureHandleNV: #type (device: Device, accelerationStructure: AccelerationStructureNV, dataSize: u64, pData: *void) -> Result #c_call;

CmdWriteAccelerationStructuresPropertiesNV: #type (commandBuffer: CommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: *AccelerationStructureNV, queryType: QueryType, queryPool: QueryPool, firstQuery: u32) -> void #c_call;

CompileDeferredNV: #type (device: Device, pipeline: Pipeline, shader: u32) -> Result #c_call;

PhysicalDeviceRepresentativeFragmentTestFeaturesNV :: struct {
    sType:                      StructureType = .PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
    pNext:                      *void;
    representativeFragmentTest: Bool32;
}

PipelineRepresentativeFragmentTestStateCreateInfoNV :: struct {
    sType:                            StructureType = .PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
    pNext:                            *void;
    representativeFragmentTestEnable: Bool32;
}

PhysicalDeviceImageViewImageFormatInfoEXT :: struct {
    sType:         StructureType = .PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
    pNext:         *void;
    imageViewType: ImageViewType;
}

FilterCubicImageViewImageFormatPropertiesEXT :: struct {
    sType:             StructureType = .FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;
    pNext:             *void;
    filterCubic:       Bool32;
    filterCubicMinmax: Bool32;
}

QueueGlobalPriorityEXT :: QueueGlobalPriorityKHR;

DeviceQueueGlobalPriorityCreateInfoEXT :: DeviceQueueGlobalPriorityCreateInfoKHR;

ImportMemoryHostPointerInfoEXT :: struct {
    sType:        StructureType = .IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
    pNext:        *void;
    handleType:   ExternalMemoryHandleTypeFlagBits;
    pHostPointer: *void;
}

MemoryHostPointerPropertiesEXT :: struct {
    sType:          StructureType = .MEMORY_HOST_POINTER_PROPERTIES_EXT;
    pNext:          *void;
    memoryTypeBits: u32;
}

PhysicalDeviceExternalMemoryHostPropertiesEXT :: struct {
    sType:                           StructureType = .PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;
    pNext:                           *void;
    minImportedHostPointerAlignment: DeviceSize;
}

PFN_vkGetMemoryHostPointerPropertiesEXT :: #type (device: Device, handleType: ExternalMemoryHandleTypeFlagBits, pHostPointer: *void, pMemoryHostPointerProperties: *MemoryHostPointerPropertiesEXT) -> Result #c_call;

GetMemoryHostPointerPropertiesEXT: #type (device: Device, handleType: ExternalMemoryHandleTypeFlagBits, pHostPointer: *void, pMemoryHostPointerProperties: *MemoryHostPointerPropertiesEXT) -> Result #c_call;

PFN_vkCmdWriteBufferMarkerAMD :: #type (commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlagBits, dstBuffer: Buffer, dstOffset: DeviceSize, marker: u32) -> void #c_call;

CmdWriteBufferMarkerAMD: #type (commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlagBits, dstBuffer: Buffer, dstOffset: DeviceSize, marker: u32) -> void #c_call;

PipelineCompilerControlFlagBitsAMD :: enum_flags u32 {
    PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD :: 0x7fffffff;
    VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD :: PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD;
}

PipelineCompilerControlFlagsAMD :: PipelineCompilerControlFlagBitsAMD;
PipelineCompilerControlCreateInfoAMD :: struct {
    sType:                StructureType = .PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;
    pNext:                *void;
    compilerControlFlags: PipelineCompilerControlFlagsAMD;
}

TimeDomainEXT :: enum u32 {
    DEVICE_EXT                    :: 0;
    CLOCK_MONOTONIC_EXT           :: 1;
    CLOCK_MONOTONIC_RAW_EXT       :: 2;
    QUERY_PERFORMANCE_COUNTER_EXT :: 3;
    MAX_ENUM_EXT                  :: 2147483647;

    VK_TIME_DOMAIN_DEVICE_EXT                    :: DEVICE_EXT;
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT           :: CLOCK_MONOTONIC_EXT;
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT       :: CLOCK_MONOTONIC_RAW_EXT;
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT :: QUERY_PERFORMANCE_COUNTER_EXT;
    VK_TIME_DOMAIN_MAX_ENUM_EXT                  :: MAX_ENUM_EXT;
}

CalibratedTimestampInfoEXT :: struct {
    sType:      StructureType = .CALIBRATED_TIMESTAMP_INFO_EXT;
    pNext:      *void;
    timeDomain: TimeDomainEXT;
}

PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT :: #type (physicalDevice: PhysicalDevice, pTimeDomainCount: *u32, pTimeDomains: *TimeDomainEXT) -> Result #c_call;
PFN_vkGetCalibratedTimestampsEXT :: #type (device: Device, timestampCount: u32, pTimestampInfos: *CalibratedTimestampInfoEXT, pTimestamps: *u64, pMaxDeviation: *u64) -> Result #c_call;

GetPhysicalDeviceCalibrateableTimeDomainsEXT: #type (physicalDevice: PhysicalDevice, pTimeDomainCount: *u32, pTimeDomains: *TimeDomainEXT) -> Result #c_call;

GetCalibratedTimestampsEXT: #type (device: Device, timestampCount: u32, pTimestampInfos: *CalibratedTimestampInfoEXT, pTimestamps: *u64, pMaxDeviation: *u64) -> Result #c_call;

PhysicalDeviceShaderCorePropertiesAMD :: struct {
    sType:                      StructureType = .PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;
    pNext:                      *void;
    shaderEngineCount:          u32;
    shaderArraysPerEngineCount: u32;
    computeUnitsPerShaderArray: u32;
    simdPerComputeUnit:         u32;
    wavefrontsPerSimd:          u32;
    wavefrontSize:              u32;
    sgprsPerSimd:               u32;
    minSgprAllocation:          u32;
    maxSgprAllocation:          u32;
    sgprAllocationGranularity:  u32;
    vgprsPerSimd:               u32;
    minVgprAllocation:          u32;
    maxVgprAllocation:          u32;
    vgprAllocationGranularity:  u32;
}

MemoryOverallocationBehaviorAMD :: enum u32 {
    DEFAULT_AMD    :: 0;
    ALLOWED_AMD    :: 1;
    DISALLOWED_AMD :: 2;
    MAX_ENUM_AMD   :: 2147483647;

    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD    :: DEFAULT_AMD;
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD    :: ALLOWED_AMD;
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD :: DISALLOWED_AMD;
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD   :: MAX_ENUM_AMD;
}

DeviceMemoryOverallocationCreateInfoAMD :: struct {
    sType:                  StructureType = .DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
    pNext:                  *void;
    overallocationBehavior: MemoryOverallocationBehaviorAMD;
}

PhysicalDeviceVertexAttributeDivisorPropertiesEXT :: struct {
    sType:                  StructureType = .PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;
    pNext:                  *void;
    maxVertexAttribDivisor: u32;
}

VertexInputBindingDivisorDescriptionEXT :: struct {
    binding: u32;
    divisor: u32;
}

PipelineVertexInputDivisorStateCreateInfoEXT :: struct {
    sType:                     StructureType = .PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
    pNext:                     *void;
    vertexBindingDivisorCount: u32;
    pVertexBindingDivisors:    *VertexInputBindingDivisorDescriptionEXT;
}

PhysicalDeviceVertexAttributeDivisorFeaturesEXT :: struct {
    sType:                                  StructureType = .PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
    pNext:                                  *void;
    vertexAttributeInstanceRateDivisor:     Bool32;
    vertexAttributeInstanceRateZeroDivisor: Bool32;
}

PipelineCreationFeedbackFlagBitsEXT :: PipelineCreationFeedbackFlagBits;

PipelineCreationFeedbackFlagsEXT :: PipelineCreationFeedbackFlags;

PipelineCreationFeedbackCreateInfoEXT :: PipelineCreationFeedbackCreateInfo;

PipelineCreationFeedbackEXT :: PipelineCreationFeedback;

PhysicalDeviceComputeShaderDerivativesFeaturesNV :: struct {
    sType:                        StructureType = .PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
    pNext:                        *void;
    computeDerivativeGroupQuads:  Bool32;
    computeDerivativeGroupLinear: Bool32;
}

PhysicalDeviceMeshShaderFeaturesNV :: struct {
    sType:      StructureType = .PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
    pNext:      *void;
    taskShader: Bool32;
    meshShader: Bool32;
}

PhysicalDeviceMeshShaderPropertiesNV :: struct {
    sType:                             StructureType = .PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;
    pNext:                             *void;
    maxDrawMeshTasksCount:             u32;
    maxTaskWorkGroupInvocations:       u32;
    maxTaskWorkGroupSize:              [3] u32;
    maxTaskTotalMemorySize:            u32;
    maxTaskOutputCount:                u32;
    maxMeshWorkGroupInvocations:       u32;
    maxMeshWorkGroupSize:              [3] u32;
    maxMeshTotalMemorySize:            u32;
    maxMeshOutputVertices:             u32;
    maxMeshOutputPrimitives:           u32;
    maxMeshMultiviewViewCount:         u32;
    meshOutputPerVertexGranularity:    u32;
    meshOutputPerPrimitiveGranularity: u32;
}

DrawMeshTasksIndirectCommandNV :: struct {
    taskCount: u32;
    firstTask: u32;
}

PFN_vkCmdDrawMeshTasksNV :: #type (commandBuffer: CommandBuffer, taskCount: u32, firstTask: u32) -> void #c_call;
PFN_vkCmdDrawMeshTasksIndirectNV :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32) -> void #c_call;
PFN_vkCmdDrawMeshTasksIndirectCountNV :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

CmdDrawMeshTasksNV: #type (commandBuffer: CommandBuffer, taskCount: u32, firstTask: u32) -> void #c_call;

CmdDrawMeshTasksIndirectNV: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32) -> void #c_call;

CmdDrawMeshTasksIndirectCountNV: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

PhysicalDeviceFragmentShaderBarycentricFeaturesNV :: PhysicalDeviceFragmentShaderBarycentricFeaturesKHR;

PhysicalDeviceShaderImageFootprintFeaturesNV :: struct {
    sType:          StructureType = .PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
    pNext:          *void;
    imageFootprint: Bool32;
}

PipelineViewportExclusiveScissorStateCreateInfoNV :: struct {
    sType:                 StructureType = .PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
    pNext:                 *void;
    exclusiveScissorCount: u32;
    pExclusiveScissors:    *Rect2D;
}

PhysicalDeviceExclusiveScissorFeaturesNV :: struct {
    sType:            StructureType = .PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
    pNext:            *void;
    exclusiveScissor: Bool32;
}

PFN_vkCmdSetExclusiveScissorEnableNV :: #type (commandBuffer: CommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissorEnables: *Bool32) -> void #c_call;
PFN_vkCmdSetExclusiveScissorNV :: #type (commandBuffer: CommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: *Rect2D) -> void #c_call;

CmdSetExclusiveScissorEnableNV: #type (commandBuffer: CommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissorEnables: *Bool32) -> void #c_call;

CmdSetExclusiveScissorNV: #type (commandBuffer: CommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: *Rect2D) -> void #c_call;

QueueFamilyCheckpointPropertiesNV :: struct {
    sType:                        StructureType = .QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV;
    pNext:                        *void;
    checkpointExecutionStageMask: PipelineStageFlags;
}

CheckpointDataNV :: struct {
    sType:             StructureType = .CHECKPOINT_DATA_NV;
    pNext:             *void;
    stage:             PipelineStageFlagBits;
    pCheckpointMarker: *void;
}

PFN_vkCmdSetCheckpointNV :: #type (commandBuffer: CommandBuffer, pCheckpointMarker: *void) -> void #c_call;
PFN_vkGetQueueCheckpointDataNV :: #type (queue: Queue, pCheckpointDataCount: *u32, pCheckpointData: *CheckpointDataNV) -> void #c_call;

CmdSetCheckpointNV: #type (commandBuffer: CommandBuffer, pCheckpointMarker: *void) -> void #c_call;

GetQueueCheckpointDataNV: #type (queue: Queue, pCheckpointDataCount: *u32, pCheckpointData: *CheckpointDataNV) -> void #c_call;

PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL :: struct {
    sType:                   StructureType = .PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;
    pNext:                   *void;
    shaderIntegerFunctions2: Bool32;
}

PerformanceConfigurationINTEL_T :: struct {}
PerformanceConfigurationINTEL :: *PerformanceConfigurationINTEL_T;

PerformanceConfigurationTypeINTEL :: enum u32 {
    COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL :: 0;
    MAX_ENUM_INTEL                                  :: 2147483647;

    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL :: COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL;
    VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL                                  :: MAX_ENUM_INTEL;
}

QueryPoolSamplingModeINTEL :: enum u32 {
    MANUAL_INTEL   :: 0;
    MAX_ENUM_INTEL :: 2147483647;

    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL   :: MANUAL_INTEL;
    VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL :: MAX_ENUM_INTEL;
}

PerformanceOverrideTypeINTEL :: enum u32 {
    NULL_HARDWARE_INTEL    :: 0;
    FLUSH_GPU_CACHES_INTEL :: 1;
    MAX_ENUM_INTEL         :: 2147483647;

    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL    :: NULL_HARDWARE_INTEL;
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL :: FLUSH_GPU_CACHES_INTEL;
    VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL         :: MAX_ENUM_INTEL;
}

PerformanceParameterTypeINTEL :: enum u32 {
    HW_COUNTERS_SUPPORTED_INTEL    :: 0;
    STREAM_MARKER_VALID_BITS_INTEL :: 1;
    MAX_ENUM_INTEL                 :: 2147483647;

    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL    :: HW_COUNTERS_SUPPORTED_INTEL;
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL :: STREAM_MARKER_VALID_BITS_INTEL;
    VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL                 :: MAX_ENUM_INTEL;
}

PerformanceValueTypeINTEL :: enum u32 {
    UINT32_INTEL   :: 0;
    UINT64_INTEL   :: 1;
    FLOAT_INTEL    :: 2;
    BOOL_INTEL     :: 3;
    STRING_INTEL   :: 4;
    MAX_ENUM_INTEL :: 2147483647;

    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL   :: UINT32_INTEL;
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL   :: UINT64_INTEL;
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL    :: FLOAT_INTEL;
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL     :: BOOL_INTEL;
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL   :: STRING_INTEL;
    VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL :: MAX_ENUM_INTEL;
}

PerformanceValueDataINTEL :: union {
    value32:     u32;
    value64:     u64;
    valueFloat:  float;
    valueBool:   Bool32;
    valueString: *u8;
}

PerformanceValueINTEL :: struct {
    type: PerformanceValueTypeINTEL;
    data: PerformanceValueDataINTEL;
}

InitializePerformanceApiInfoINTEL :: struct {
    sType:     StructureType = .INITIALIZE_PERFORMANCE_API_INFO_INTEL;
    pNext:     *void;
    pUserData: *void;
}

QueryPoolPerformanceQueryCreateInfoINTEL :: struct {
    sType:                       StructureType = .QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
    pNext:                       *void;
    performanceCountersSampling: QueryPoolSamplingModeINTEL;
}

QueryPoolCreateInfoINTEL :: QueryPoolPerformanceQueryCreateInfoINTEL;

PerformanceMarkerInfoINTEL :: struct {
    sType:  StructureType = .PERFORMANCE_MARKER_INFO_INTEL;
    pNext:  *void;
    marker: u64;
}

PerformanceStreamMarkerInfoINTEL :: struct {
    sType:  StructureType = .PERFORMANCE_STREAM_MARKER_INFO_INTEL;
    pNext:  *void;
    marker: u32;
}

PerformanceOverrideInfoINTEL :: struct {
    sType:     StructureType = .PERFORMANCE_OVERRIDE_INFO_INTEL;
    pNext:     *void;
    type:      PerformanceOverrideTypeINTEL;
    enable:    Bool32;
    parameter: u64;
}

PerformanceConfigurationAcquireInfoINTEL :: struct {
    sType: StructureType = .PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;
    pNext: *void;
    type:  PerformanceConfigurationTypeINTEL;
}

PFN_vkInitializePerformanceApiINTEL :: #type (device: Device, pInitializeInfo: *InitializePerformanceApiInfoINTEL) -> Result #c_call;
PFN_vkUninitializePerformanceApiINTEL :: #type (device: Device) -> void #c_call;
PFN_vkCmdSetPerformanceMarkerINTEL :: #type (commandBuffer: CommandBuffer, pMarkerInfo: *PerformanceMarkerInfoINTEL) -> Result #c_call;
PFN_vkCmdSetPerformanceStreamMarkerINTEL :: #type (commandBuffer: CommandBuffer, pMarkerInfo: *PerformanceStreamMarkerInfoINTEL) -> Result #c_call;
PFN_vkCmdSetPerformanceOverrideINTEL :: #type (commandBuffer: CommandBuffer, pOverrideInfo: *PerformanceOverrideInfoINTEL) -> Result #c_call;
PFN_vkAcquirePerformanceConfigurationINTEL :: #type (device: Device, pAcquireInfo: *PerformanceConfigurationAcquireInfoINTEL, pConfiguration: *PerformanceConfigurationINTEL) -> Result #c_call;
PFN_vkReleasePerformanceConfigurationINTEL :: #type (device: Device, configuration: PerformanceConfigurationINTEL) -> Result #c_call;
PFN_vkQueueSetPerformanceConfigurationINTEL :: #type (queue: Queue, configuration: PerformanceConfigurationINTEL) -> Result #c_call;
PFN_vkGetPerformanceParameterINTEL :: #type (device: Device, parameter: PerformanceParameterTypeINTEL, pValue: *PerformanceValueINTEL) -> Result #c_call;

InitializePerformanceApiINTEL: #type (device: Device, pInitializeInfo: *InitializePerformanceApiInfoINTEL) -> Result #c_call;

UninitializePerformanceApiINTEL: #type (device: Device) -> void #c_call;

CmdSetPerformanceMarkerINTEL: #type (commandBuffer: CommandBuffer, pMarkerInfo: *PerformanceMarkerInfoINTEL) -> Result #c_call;

CmdSetPerformanceStreamMarkerINTEL: #type (commandBuffer: CommandBuffer, pMarkerInfo: *PerformanceStreamMarkerInfoINTEL) -> Result #c_call;

CmdSetPerformanceOverrideINTEL: #type (commandBuffer: CommandBuffer, pOverrideInfo: *PerformanceOverrideInfoINTEL) -> Result #c_call;

AcquirePerformanceConfigurationINTEL: #type (device: Device, pAcquireInfo: *PerformanceConfigurationAcquireInfoINTEL, pConfiguration: *PerformanceConfigurationINTEL) -> Result #c_call;

ReleasePerformanceConfigurationINTEL: #type (device: Device, configuration: PerformanceConfigurationINTEL) -> Result #c_call;

QueueSetPerformanceConfigurationINTEL: #type (queue: Queue, configuration: PerformanceConfigurationINTEL) -> Result #c_call;

GetPerformanceParameterINTEL: #type (device: Device, parameter: PerformanceParameterTypeINTEL, pValue: *PerformanceValueINTEL) -> Result #c_call;

PhysicalDevicePCIBusInfoPropertiesEXT :: struct {
    sType:       StructureType = .PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
    pNext:       *void;
    pciDomain:   u32;
    pciBus:      u32;
    pciDevice:   u32;
    pciFunction: u32;
}

DisplayNativeHdrSurfaceCapabilitiesAMD :: struct {
    sType:               StructureType = .DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD;
    pNext:               *void;
    localDimmingSupport: Bool32;
}

SwapchainDisplayNativeHdrCreateInfoAMD :: struct {
    sType:              StructureType = .SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;
    pNext:              *void;
    localDimmingEnable: Bool32;
}

PFN_vkSetLocalDimmingAMD :: #type (device: Device, swapChain: SwapchainKHR, localDimmingEnable: Bool32) -> void #c_call;

SetLocalDimmingAMD: #type (device: Device, swapChain: SwapchainKHR, localDimmingEnable: Bool32) -> void #c_call;

PhysicalDeviceFragmentDensityMapFeaturesEXT :: struct {
    sType:                                 StructureType = .PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
    pNext:                                 *void;
    fragmentDensityMap:                    Bool32;
    fragmentDensityMapDynamic:             Bool32;
    fragmentDensityMapNonSubsampledImages: Bool32;
}

PhysicalDeviceFragmentDensityMapPropertiesEXT :: struct {
    sType:                       StructureType = .PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT;
    pNext:                       *void;
    minFragmentDensityTexelSize: Extent2D;
    maxFragmentDensityTexelSize: Extent2D;
    fragmentDensityInvocations:  Bool32;
}

RenderPassFragmentDensityMapCreateInfoEXT :: struct {
    sType:                        StructureType = .RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
    pNext:                        *void;
    fragmentDensityMapAttachment: AttachmentReference;
}

PhysicalDeviceScalarBlockLayoutFeaturesEXT :: PhysicalDeviceScalarBlockLayoutFeatures;

PhysicalDeviceSubgroupSizeControlFeaturesEXT :: PhysicalDeviceSubgroupSizeControlFeatures;

PhysicalDeviceSubgroupSizeControlPropertiesEXT :: PhysicalDeviceSubgroupSizeControlProperties;

PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT :: PipelineShaderStageRequiredSubgroupSizeCreateInfo;

ShaderCorePropertiesFlagBitsAMD :: enum_flags u32 {
    SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD :: 0x7fffffff;
    VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD :: SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD;
}

ShaderCorePropertiesFlagsAMD :: ShaderCorePropertiesFlagBitsAMD;
PhysicalDeviceShaderCoreProperties2AMD :: struct {
    sType:                  StructureType = .PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD;
    pNext:                  *void;
    shaderCoreFeatures:     ShaderCorePropertiesFlagsAMD;
    activeComputeUnitCount: u32;
}

PhysicalDeviceCoherentMemoryFeaturesAMD :: struct {
    sType:                StructureType = .PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;
    pNext:                *void;
    deviceCoherentMemory: Bool32;
}

PhysicalDeviceShaderImageAtomicInt64FeaturesEXT :: struct {
    sType:                   StructureType = .PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;
    pNext:                   *void;
    shaderImageInt64Atomics: Bool32;
    sparseImageInt64Atomics: Bool32;
}

PhysicalDeviceMemoryBudgetPropertiesEXT :: struct {
    sType:      StructureType = .PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
    pNext:      *void;
    heapBudget: [16] DeviceSize;
    heapUsage:  [16] DeviceSize;
}

PhysicalDeviceMemoryPriorityFeaturesEXT :: struct {
    sType:          StructureType = .PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
    pNext:          *void;
    memoryPriority: Bool32;
}

MemoryPriorityAllocateInfoEXT :: struct {
    sType:    StructureType = .MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
    pNext:    *void;
    priority: float;
}

PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV :: struct {
    sType:                            StructureType = .PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
    pNext:                            *void;
    dedicatedAllocationImageAliasing: Bool32;
}

PhysicalDeviceBufferDeviceAddressFeaturesEXT :: struct {
    sType:                            StructureType = .PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
    pNext:                            *void;
    bufferDeviceAddress:              Bool32;
    bufferDeviceAddressCaptureReplay: Bool32;
    bufferDeviceAddressMultiDevice:   Bool32;
}

PhysicalDeviceBufferAddressFeaturesEXT :: PhysicalDeviceBufferDeviceAddressFeaturesEXT;

BufferDeviceAddressInfoEXT :: BufferDeviceAddressInfo;

BufferDeviceAddressCreateInfoEXT :: struct {
    sType:         StructureType = .BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
    pNext:         *void;
    deviceAddress: DeviceAddress;
}

PFN_vkGetBufferDeviceAddressEXT :: #type (device: Device, pInfo: *BufferDeviceAddressInfo) -> DeviceAddress #c_call;

GetBufferDeviceAddressEXT: #type (device: Device, pInfo: *BufferDeviceAddressInfo) -> DeviceAddress #c_call;

ToolPurposeFlagBitsEXT :: ToolPurposeFlagBits;

ToolPurposeFlagsEXT :: ToolPurposeFlags;

PhysicalDeviceToolPropertiesEXT :: PhysicalDeviceToolProperties;

PFN_vkGetPhysicalDeviceToolPropertiesEXT :: #type (physicalDevice: PhysicalDevice, pToolCount: *u32, pToolProperties: *PhysicalDeviceToolProperties) -> Result #c_call;

GetPhysicalDeviceToolPropertiesEXT: #type (physicalDevice: PhysicalDevice, pToolCount: *u32, pToolProperties: *PhysicalDeviceToolProperties) -> Result #c_call;

ImageStencilUsageCreateInfoEXT :: ImageStencilUsageCreateInfo;

ValidationFeatureEnableEXT :: enum u32 {
    GPU_ASSISTED_EXT                      :: 0;
    GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT :: 1;
    BEST_PRACTICES_EXT                    :: 2;
    DEBUG_PRINTF_EXT                      :: 3;
    SYNCHRONIZATION_VALIDATION_EXT        :: 4;
    MAX_ENUM_EXT                          :: 2147483647;

    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT                      :: GPU_ASSISTED_EXT;
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT :: GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT;
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT                    :: BEST_PRACTICES_EXT;
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT                      :: DEBUG_PRINTF_EXT;
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT        :: SYNCHRONIZATION_VALIDATION_EXT;
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT                          :: MAX_ENUM_EXT;
}

ValidationFeatureDisableEXT :: enum u32 {
    ALL_EXT                     :: 0;
    SHADERS_EXT                 :: 1;
    THREAD_SAFETY_EXT           :: 2;
    API_PARAMETERS_EXT          :: 3;
    OBJECT_LIFETIMES_EXT        :: 4;
    CORE_CHECKS_EXT             :: 5;
    UNIQUE_HANDLES_EXT          :: 6;
    SHADER_VALIDATION_CACHE_EXT :: 7;
    MAX_ENUM_EXT                :: 2147483647;

    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT                     :: ALL_EXT;
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT                 :: SHADERS_EXT;
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT           :: THREAD_SAFETY_EXT;
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT          :: API_PARAMETERS_EXT;
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT        :: OBJECT_LIFETIMES_EXT;
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT             :: CORE_CHECKS_EXT;
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT          :: UNIQUE_HANDLES_EXT;
    VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT :: SHADER_VALIDATION_CACHE_EXT;
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT                :: MAX_ENUM_EXT;
}

ValidationFeaturesEXT :: struct {
    sType:                          StructureType = .VALIDATION_FEATURES_EXT;
    pNext:                          *void;
    enabledValidationFeatureCount:  u32;
    pEnabledValidationFeatures:     *ValidationFeatureEnableEXT;
    disabledValidationFeatureCount: u32;
    pDisabledValidationFeatures:    *ValidationFeatureDisableEXT;
}

ComponentTypeNV :: enum u32 {
    FLOAT16_NV  :: 0;
    FLOAT32_NV  :: 1;
    FLOAT64_NV  :: 2;
    SINT8_NV    :: 3;
    SINT16_NV   :: 4;
    SINT32_NV   :: 5;
    SINT64_NV   :: 6;
    UINT8_NV    :: 7;
    UINT16_NV   :: 8;
    UINT32_NV   :: 9;
    UINT64_NV   :: 10;
    MAX_ENUM_NV :: 2147483647;

    VK_COMPONENT_TYPE_FLOAT16_NV  :: FLOAT16_NV;
    VK_COMPONENT_TYPE_FLOAT32_NV  :: FLOAT32_NV;
    VK_COMPONENT_TYPE_FLOAT64_NV  :: FLOAT64_NV;
    VK_COMPONENT_TYPE_SINT8_NV    :: SINT8_NV;
    VK_COMPONENT_TYPE_SINT16_NV   :: SINT16_NV;
    VK_COMPONENT_TYPE_SINT32_NV   :: SINT32_NV;
    VK_COMPONENT_TYPE_SINT64_NV   :: SINT64_NV;
    VK_COMPONENT_TYPE_UINT8_NV    :: UINT8_NV;
    VK_COMPONENT_TYPE_UINT16_NV   :: UINT16_NV;
    VK_COMPONENT_TYPE_UINT32_NV   :: UINT32_NV;
    VK_COMPONENT_TYPE_UINT64_NV   :: UINT64_NV;
    VK_COMPONENT_TYPE_MAX_ENUM_NV :: MAX_ENUM_NV;
}

ScopeNV :: enum u32 {
    DEVICE_NV       :: 1;
    WORKGROUP_NV    :: 2;
    SUBGROUP_NV     :: 3;
    QUEUE_FAMILY_NV :: 5;
    MAX_ENUM_NV     :: 2147483647;

    VK_SCOPE_DEVICE_NV       :: DEVICE_NV;
    VK_SCOPE_WORKGROUP_NV    :: WORKGROUP_NV;
    VK_SCOPE_SUBGROUP_NV     :: SUBGROUP_NV;
    VK_SCOPE_QUEUE_FAMILY_NV :: QUEUE_FAMILY_NV;
    VK_SCOPE_MAX_ENUM_NV     :: MAX_ENUM_NV;
}

CooperativeMatrixPropertiesNV :: struct {
    sType: StructureType = .COOPERATIVE_MATRIX_PROPERTIES_NV;
    pNext: *void;
    MSize: u32;
    NSize: u32;
    KSize: u32;
    AType: ComponentTypeNV;
    BType: ComponentTypeNV;
    CType: ComponentTypeNV;
    DType: ComponentTypeNV;
    scope: ScopeNV;
}

PhysicalDeviceCooperativeMatrixFeaturesNV :: struct {
    sType:                               StructureType = .PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
    pNext:                               *void;
    cooperativeMatrix:                   Bool32;
    cooperativeMatrixRobustBufferAccess: Bool32;
}

PhysicalDeviceCooperativeMatrixPropertiesNV :: struct {
    sType:                            StructureType = .PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV;
    pNext:                            *void;
    cooperativeMatrixSupportedStages: ShaderStageFlags;
}

PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV :: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *CooperativeMatrixPropertiesNV) -> Result #c_call;

GetPhysicalDeviceCooperativeMatrixPropertiesNV: #type (physicalDevice: PhysicalDevice, pPropertyCount: *u32, pProperties: *CooperativeMatrixPropertiesNV) -> Result #c_call;

CoverageReductionModeNV :: enum u32 {
    MERGE_NV    :: 0;
    TRUNCATE_NV :: 1;
    MAX_ENUM_NV :: 2147483647;

    VK_COVERAGE_REDUCTION_MODE_MERGE_NV    :: MERGE_NV;
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV :: TRUNCATE_NV;
    VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV :: MAX_ENUM_NV;
}

PipelineCoverageReductionStateCreateFlagsNV :: Flags;
PhysicalDeviceCoverageReductionModeFeaturesNV :: struct {
    sType:                 StructureType = .PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;
    pNext:                 *void;
    coverageReductionMode: Bool32;
}

PipelineCoverageReductionStateCreateInfoNV :: struct {
    sType:                 StructureType = .PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;
    pNext:                 *void;
    flags:                 PipelineCoverageReductionStateCreateFlagsNV;
    coverageReductionMode: CoverageReductionModeNV;
}

FramebufferMixedSamplesCombinationNV :: struct {
    sType:                 StructureType = .FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV;
    pNext:                 *void;
    coverageReductionMode: CoverageReductionModeNV;
    rasterizationSamples:  SampleCountFlagBits;
    depthStencilSamples:   SampleCountFlags;
    colorSamples:          SampleCountFlags;
}

PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV :: #type (physicalDevice: PhysicalDevice, pCombinationCount: *u32, pCombinations: *FramebufferMixedSamplesCombinationNV) -> Result #c_call;

GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV: #type (physicalDevice: PhysicalDevice, pCombinationCount: *u32, pCombinations: *FramebufferMixedSamplesCombinationNV) -> Result #c_call;

PhysicalDeviceFragmentShaderInterlockFeaturesEXT :: struct {
    sType:                              StructureType = .PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
    pNext:                              *void;
    fragmentShaderSampleInterlock:      Bool32;
    fragmentShaderPixelInterlock:       Bool32;
    fragmentShaderShadingRateInterlock: Bool32;
}

PhysicalDeviceYcbcrImageArraysFeaturesEXT :: struct {
    sType:            StructureType = .PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
    pNext:            *void;
    ycbcrImageArrays: Bool32;
}

ProvokingVertexModeEXT :: enum u32 {
    FIRST_VERTEX_EXT :: 0;
    LAST_VERTEX_EXT  :: 1;
    MAX_ENUM_EXT     :: 2147483647;

    VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT :: FIRST_VERTEX_EXT;
    VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT  :: LAST_VERTEX_EXT;
    VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT     :: MAX_ENUM_EXT;
}

PhysicalDeviceProvokingVertexFeaturesEXT :: struct {
    sType:                                     StructureType = .PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT;
    pNext:                                     *void;
    provokingVertexLast:                       Bool32;
    transformFeedbackPreservesProvokingVertex: Bool32;
}

PhysicalDeviceProvokingVertexPropertiesEXT :: struct {
    sType:                                                StructureType = .PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT;
    pNext:                                                *void;
    provokingVertexModePerPipeline:                       Bool32;
    transformFeedbackPreservesTriangleFanProvokingVertex: Bool32;
}

PipelineRasterizationProvokingVertexStateCreateInfoEXT :: struct {
    sType:               StructureType = .PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT;
    pNext:               *void;
    provokingVertexMode: ProvokingVertexModeEXT;
}

HeadlessSurfaceCreateFlagsEXT :: Flags;
HeadlessSurfaceCreateInfoEXT :: struct {
    sType: StructureType = .HEADLESS_SURFACE_CREATE_INFO_EXT;
    pNext: *void;
    flags: HeadlessSurfaceCreateFlagsEXT;
}

PFN_vkCreateHeadlessSurfaceEXT :: #type (instance: Instance, pCreateInfo: *HeadlessSurfaceCreateInfoEXT, pAllocator: *AllocationCallbacks, pSurface: *SurfaceKHR) -> Result #c_call;

CreateHeadlessSurfaceEXT: #type (instance: Instance, pCreateInfo: *HeadlessSurfaceCreateInfoEXT, pAllocator: *AllocationCallbacks, pSurface: *SurfaceKHR) -> Result #c_call;

LineRasterizationModeEXT :: enum u32 {
    DEFAULT_EXT            :: 0;
    RECTANGULAR_EXT        :: 1;
    BRESENHAM_EXT          :: 2;
    RECTANGULAR_SMOOTH_EXT :: 3;
    MAX_ENUM_EXT           :: 2147483647;

    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT            :: DEFAULT_EXT;
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT        :: RECTANGULAR_EXT;
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT          :: BRESENHAM_EXT;
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT :: RECTANGULAR_SMOOTH_EXT;
    VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT           :: MAX_ENUM_EXT;
}

PhysicalDeviceLineRasterizationFeaturesEXT :: struct {
    sType:                    StructureType = .PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT;
    pNext:                    *void;
    rectangularLines:         Bool32;
    bresenhamLines:           Bool32;
    smoothLines:              Bool32;
    stippledRectangularLines: Bool32;
    stippledBresenhamLines:   Bool32;
    stippledSmoothLines:      Bool32;
}

PhysicalDeviceLineRasterizationPropertiesEXT :: struct {
    sType:                     StructureType = .PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT;
    pNext:                     *void;
    lineSubPixelPrecisionBits: u32;
}

PipelineRasterizationLineStateCreateInfoEXT :: struct {
    sType:                 StructureType = .PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;
    pNext:                 *void;
    lineRasterizationMode: LineRasterizationModeEXT;
    stippledLineEnable:    Bool32;
    lineStippleFactor:     u32;
    lineStipplePattern:    u16;
}

PFN_vkCmdSetLineStippleEXT :: #type (commandBuffer: CommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16) -> void #c_call;

CmdSetLineStippleEXT: #type (commandBuffer: CommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16) -> void #c_call;

PhysicalDeviceShaderAtomicFloatFeaturesEXT :: struct {
    sType:                        StructureType = .PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;
    pNext:                        *void;
    shaderBufferFloat32Atomics:   Bool32;
    shaderBufferFloat32AtomicAdd: Bool32;
    shaderBufferFloat64Atomics:   Bool32;
    shaderBufferFloat64AtomicAdd: Bool32;
    shaderSharedFloat32Atomics:   Bool32;
    shaderSharedFloat32AtomicAdd: Bool32;
    shaderSharedFloat64Atomics:   Bool32;
    shaderSharedFloat64AtomicAdd: Bool32;
    shaderImageFloat32Atomics:    Bool32;
    shaderImageFloat32AtomicAdd:  Bool32;
    sparseImageFloat32Atomics:    Bool32;
    sparseImageFloat32AtomicAdd:  Bool32;
}

PhysicalDeviceHostQueryResetFeaturesEXT :: PhysicalDeviceHostQueryResetFeatures;

PFN_vkResetQueryPoolEXT :: #type (device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32) -> void #c_call;

ResetQueryPoolEXT: #type (device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32) -> void #c_call;

PhysicalDeviceIndexTypeUint8FeaturesEXT :: struct {
    sType:          StructureType = .PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT;
    pNext:          *void;
    indexTypeUint8: Bool32;
}

PhysicalDeviceExtendedDynamicStateFeaturesEXT :: struct {
    sType:                StructureType = .PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;
    pNext:                *void;
    extendedDynamicState: Bool32;
}

PFN_vkCmdSetCullModeEXT :: #type (commandBuffer: CommandBuffer, cullMode: CullModeFlags) -> void #c_call;
PFN_vkCmdSetFrontFaceEXT :: #type (commandBuffer: CommandBuffer, frontFace: FrontFace) -> void #c_call;
PFN_vkCmdSetPrimitiveTopologyEXT :: #type (commandBuffer: CommandBuffer, primitiveTopology: PrimitiveTopology) -> void #c_call;
PFN_vkCmdSetViewportWithCountEXT :: #type (commandBuffer: CommandBuffer, viewportCount: u32, pViewports: *Viewport) -> void #c_call;
PFN_vkCmdSetScissorWithCountEXT :: #type (commandBuffer: CommandBuffer, scissorCount: u32, pScissors: *Rect2D) -> void #c_call;
PFN_vkCmdBindVertexBuffers2EXT :: #type (commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *Buffer, pOffsets: *DeviceSize, pSizes: *DeviceSize, pStrides: *DeviceSize) -> void #c_call;
PFN_vkCmdSetDepthTestEnableEXT :: #type (commandBuffer: CommandBuffer, depthTestEnable: Bool32) -> void #c_call;
PFN_vkCmdSetDepthWriteEnableEXT :: #type (commandBuffer: CommandBuffer, depthWriteEnable: Bool32) -> void #c_call;
PFN_vkCmdSetDepthCompareOpEXT :: #type (commandBuffer: CommandBuffer, depthCompareOp: CompareOp) -> void #c_call;
PFN_vkCmdSetDepthBoundsTestEnableEXT :: #type (commandBuffer: CommandBuffer, depthBoundsTestEnable: Bool32) -> void #c_call;
PFN_vkCmdSetStencilTestEnableEXT :: #type (commandBuffer: CommandBuffer, stencilTestEnable: Bool32) -> void #c_call;
PFN_vkCmdSetStencilOpEXT :: #type (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, failOp: StencilOp, passOp: StencilOp, depthFailOp: StencilOp, compareOp: CompareOp) -> void #c_call;

CmdSetCullModeEXT: #type (commandBuffer: CommandBuffer, cullMode: CullModeFlags) -> void #c_call;

CmdSetFrontFaceEXT: #type (commandBuffer: CommandBuffer, frontFace: FrontFace) -> void #c_call;

CmdSetPrimitiveTopologyEXT: #type (commandBuffer: CommandBuffer, primitiveTopology: PrimitiveTopology) -> void #c_call;

CmdSetViewportWithCountEXT: #type (commandBuffer: CommandBuffer, viewportCount: u32, pViewports: *Viewport) -> void #c_call;

CmdSetScissorWithCountEXT: #type (commandBuffer: CommandBuffer, scissorCount: u32, pScissors: *Rect2D) -> void #c_call;

CmdBindVertexBuffers2EXT: #type (commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *Buffer, pOffsets: *DeviceSize, pSizes: *DeviceSize, pStrides: *DeviceSize) -> void #c_call;

CmdSetDepthTestEnableEXT: #type (commandBuffer: CommandBuffer, depthTestEnable: Bool32) -> void #c_call;

CmdSetDepthWriteEnableEXT: #type (commandBuffer: CommandBuffer, depthWriteEnable: Bool32) -> void #c_call;

CmdSetDepthCompareOpEXT: #type (commandBuffer: CommandBuffer, depthCompareOp: CompareOp) -> void #c_call;

CmdSetDepthBoundsTestEnableEXT: #type (commandBuffer: CommandBuffer, depthBoundsTestEnable: Bool32) -> void #c_call;

CmdSetStencilTestEnableEXT: #type (commandBuffer: CommandBuffer, stencilTestEnable: Bool32) -> void #c_call;

CmdSetStencilOpEXT: #type (commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, failOp: StencilOp, passOp: StencilOp, depthFailOp: StencilOp, compareOp: CompareOp) -> void #c_call;

PhysicalDeviceShaderAtomicFloat2FeaturesEXT :: struct {
    sType:                           StructureType = .PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT;
    pNext:                           *void;
    shaderBufferFloat16Atomics:      Bool32;
    shaderBufferFloat16AtomicAdd:    Bool32;
    shaderBufferFloat16AtomicMinMax: Bool32;
    shaderBufferFloat32AtomicMinMax: Bool32;
    shaderBufferFloat64AtomicMinMax: Bool32;
    shaderSharedFloat16Atomics:      Bool32;
    shaderSharedFloat16AtomicAdd:    Bool32;
    shaderSharedFloat16AtomicMinMax: Bool32;
    shaderSharedFloat32AtomicMinMax: Bool32;
    shaderSharedFloat64AtomicMinMax: Bool32;
    shaderImageFloat32AtomicMinMax:  Bool32;
    sparseImageFloat32AtomicMinMax:  Bool32;
}

PresentScalingFlagBitsEXT :: enum_flags u32 {
    ONE_TO_ONE_EXT           :: 0x1;
    ASPECT_RATIO_STRETCH_EXT :: 0x2;
    STRETCH_EXT              :: 0x4;
    FLAG_BITS_MAX_ENUM_EXT   :: 0x7fffffff;

    VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT           :: ONE_TO_ONE_EXT;
    VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT :: ASPECT_RATIO_STRETCH_EXT;
    VK_PRESENT_SCALING_STRETCH_BIT_EXT              :: STRETCH_EXT;
    VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT       :: FLAG_BITS_MAX_ENUM_EXT;
}

PresentScalingFlagsEXT :: PresentScalingFlagBitsEXT;

PresentGravityFlagBitsEXT :: enum_flags u32 {
    MIN_EXT                :: 0x1;
    MAX_EXT                :: 0x2;
    CENTERED_EXT           :: 0x4;
    FLAG_BITS_MAX_ENUM_EXT :: 0x7fffffff;

    VK_PRESENT_GRAVITY_MIN_BIT_EXT            :: MIN_EXT;
    VK_PRESENT_GRAVITY_MAX_BIT_EXT            :: MAX_EXT;
    VK_PRESENT_GRAVITY_CENTERED_BIT_EXT       :: CENTERED_EXT;
    VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT :: FLAG_BITS_MAX_ENUM_EXT;
}

PresentGravityFlagsEXT :: PresentGravityFlagBitsEXT;
SurfacePresentModeEXT :: struct {
    sType:       StructureType = .SURFACE_PRESENT_MODE_EXT;
    pNext:       *void;
    presentMode: PresentModeKHR;
}

SurfacePresentScalingCapabilitiesEXT :: struct {
    sType:                    StructureType = .SURFACE_PRESENT_SCALING_CAPABILITIES_EXT;
    pNext:                    *void;
    supportedPresentScaling:  PresentScalingFlagsEXT;
    supportedPresentGravityX: PresentGravityFlagsEXT;
    supportedPresentGravityY: PresentGravityFlagsEXT;
    minScaledImageExtent:     Extent2D;
    maxScaledImageExtent:     Extent2D;
}

SurfacePresentModeCompatibilityEXT :: struct {
    sType:            StructureType = .SURFACE_PRESENT_MODE_COMPATIBILITY_EXT;
    pNext:            *void;
    presentModeCount: u32;
    pPresentModes:    *PresentModeKHR;
}

PhysicalDeviceSwapchainMaintenance1FeaturesEXT :: struct {
    sType:                 StructureType = .PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT;
    pNext:                 *void;
    swapchainMaintenance1: Bool32;
}

SwapchainPresentFenceInfoEXT :: struct {
    sType:          StructureType = .SWAPCHAIN_PRESENT_FENCE_INFO_EXT;
    pNext:          *void;
    swapchainCount: u32;
    pFences:        *Fence;
}

SwapchainPresentModesCreateInfoEXT :: struct {
    sType:            StructureType = .SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT;
    pNext:            *void;
    presentModeCount: u32;
    pPresentModes:    *PresentModeKHR;
}

SwapchainPresentModeInfoEXT :: struct {
    sType:          StructureType = .SWAPCHAIN_PRESENT_MODE_INFO_EXT;
    pNext:          *void;
    swapchainCount: u32;
    pPresentModes:  *PresentModeKHR;
}

SwapchainPresentScalingCreateInfoEXT :: struct {
    sType:           StructureType = .SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT;
    pNext:           *void;
    scalingBehavior: PresentScalingFlagsEXT;
    presentGravityX: PresentGravityFlagsEXT;
    presentGravityY: PresentGravityFlagsEXT;
}

ReleaseSwapchainImagesInfoEXT :: struct {
    sType:           StructureType = .RELEASE_SWAPCHAIN_IMAGES_INFO_EXT;
    pNext:           *void;
    swapchain:       SwapchainKHR;
    imageIndexCount: u32;
    pImageIndices:   *u32;
}

PFN_vkReleaseSwapchainImagesEXT :: #type (device: Device, pReleaseInfo: *ReleaseSwapchainImagesInfoEXT) -> Result #c_call;

ReleaseSwapchainImagesEXT: #type (device: Device, pReleaseInfo: *ReleaseSwapchainImagesInfoEXT) -> Result #c_call;

PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT :: PhysicalDeviceShaderDemoteToHelperInvocationFeatures;

IndirectCommandsLayoutNV_T :: struct {}
IndirectCommandsLayoutNV :: *IndirectCommandsLayoutNV_T;

IndirectCommandsTokenTypeNV :: enum u32 {
    SHADER_GROUP_NV    :: 0;
    STATE_FLAGS_NV     :: 1;
    INDEX_BUFFER_NV    :: 2;
    VERTEX_BUFFER_NV   :: 3;
    PUSH_CONSTANT_NV   :: 4;
    DRAW_INDEXED_NV    :: 5;
    DRAW_NV            :: 6;
    DRAW_TASKS_NV      :: 7;
    DRAW_MESH_TASKS_NV :: 1000328000;
    MAX_ENUM_NV        :: 2147483647;

    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV    :: SHADER_GROUP_NV;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV     :: STATE_FLAGS_NV;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV    :: INDEX_BUFFER_NV;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV   :: VERTEX_BUFFER_NV;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV   :: PUSH_CONSTANT_NV;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV    :: DRAW_INDEXED_NV;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV            :: DRAW_NV;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV      :: DRAW_TASKS_NV;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV :: DRAW_MESH_TASKS_NV;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV        :: MAX_ENUM_NV;
}

IndirectStateFlagBitsNV :: enum_flags u32 {
    FRONTFACE_NV     :: 0x1;
    BITS_MAX_ENUM_NV :: 0x7fffffff;

    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV :: FRONTFACE_NV;
    VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV :: BITS_MAX_ENUM_NV;
}

IndirectStateFlagsNV :: IndirectStateFlagBitsNV;

IndirectCommandsLayoutUsageFlagBitsNV :: enum_flags u32 {
    EXPLICIT_PREPROCESS_NV :: 0x1;
    INDEXED_SEQUENCES_NV   :: 0x2;
    UNORDERED_SEQUENCES_NV :: 0x4;
    FLAG_BITS_MAX_ENUM_NV  :: 0x7fffffff;

    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV :: EXPLICIT_PREPROCESS_NV;
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV   :: INDEXED_SEQUENCES_NV;
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV :: UNORDERED_SEQUENCES_NV;
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV      :: FLAG_BITS_MAX_ENUM_NV;
}

IndirectCommandsLayoutUsageFlagsNV :: IndirectCommandsLayoutUsageFlagBitsNV;
PhysicalDeviceDeviceGeneratedCommandsPropertiesNV :: struct {
    sType:                                    StructureType = .PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV;
    pNext:                                    *void;
    maxGraphicsShaderGroupCount:              u32;
    maxIndirectSequenceCount:                 u32;
    maxIndirectCommandsTokenCount:            u32;
    maxIndirectCommandsStreamCount:           u32;
    maxIndirectCommandsTokenOffset:           u32;
    maxIndirectCommandsStreamStride:          u32;
    minSequencesCountBufferOffsetAlignment:   u32;
    minSequencesIndexBufferOffsetAlignment:   u32;
    minIndirectCommandsBufferOffsetAlignment: u32;
}

PhysicalDeviceDeviceGeneratedCommandsFeaturesNV :: struct {
    sType:                   StructureType = .PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV;
    pNext:                   *void;
    deviceGeneratedCommands: Bool32;
}

GraphicsShaderGroupCreateInfoNV :: struct {
    sType:              StructureType = .GRAPHICS_SHADER_GROUP_CREATE_INFO_NV;
    pNext:              *void;
    stageCount:         u32;
    pStages:            *PipelineShaderStageCreateInfo;
    pVertexInputState:  *PipelineVertexInputStateCreateInfo;
    pTessellationState: *PipelineTessellationStateCreateInfo;
}

GraphicsPipelineShaderGroupsCreateInfoNV :: struct {
    sType:         StructureType = .GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV;
    pNext:         *void;
    groupCount:    u32;
    pGroups:       *GraphicsShaderGroupCreateInfoNV;
    pipelineCount: u32;
    pPipelines:    *Pipeline;
}

BindShaderGroupIndirectCommandNV :: struct {
    groupIndex: u32;
}

BindIndexBufferIndirectCommandNV :: struct {
    bufferAddress: DeviceAddress;
    size:          u32;
    indexType:     IndexType;
}

BindVertexBufferIndirectCommandNV :: struct {
    bufferAddress: DeviceAddress;
    size:          u32;
    stride:        u32;
}

SetStateFlagsIndirectCommandNV :: struct {
    data: u32;
}

IndirectCommandsStreamNV :: struct {
    buffer: Buffer;
    offset: DeviceSize;
}

IndirectCommandsLayoutTokenNV :: struct {
    sType:                        StructureType = .INDIRECT_COMMANDS_LAYOUT_TOKEN_NV;
    pNext:                        *void;
    tokenType:                    IndirectCommandsTokenTypeNV;
    stream:                       u32;
    offset:                       u32;
    vertexBindingUnit:            u32;
    vertexDynamicStride:          Bool32;
    pushconstantPipelineLayout:   PipelineLayout;
    pushconstantShaderStageFlags: ShaderStageFlags;
    pushconstantOffset:           u32;
    pushconstantSize:             u32;
    indirectStateFlags:           IndirectStateFlagsNV;
    indexTypeCount:               u32;
    pIndexTypes:                  *IndexType;
    pIndexTypeValues:             *u32;
}

IndirectCommandsLayoutCreateInfoNV :: struct {
    sType:             StructureType = .INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV;
    pNext:             *void;
    flags:             IndirectCommandsLayoutUsageFlagsNV;
    pipelineBindPoint: PipelineBindPoint;
    tokenCount:        u32;
    pTokens:           *IndirectCommandsLayoutTokenNV;
    streamCount:       u32;
    pStreamStrides:    *u32;
}

GeneratedCommandsInfoNV :: struct {
    sType:                  StructureType = .GENERATED_COMMANDS_INFO_NV;
    pNext:                  *void;
    pipelineBindPoint:      PipelineBindPoint;
    pipeline:               Pipeline;
    indirectCommandsLayout: IndirectCommandsLayoutNV;
    streamCount:            u32;
    pStreams:               *IndirectCommandsStreamNV;
    sequencesCount:         u32;
    preprocessBuffer:       Buffer;
    preprocessOffset:       DeviceSize;
    preprocessSize:         DeviceSize;
    sequencesCountBuffer:   Buffer;
    sequencesCountOffset:   DeviceSize;
    sequencesIndexBuffer:   Buffer;
    sequencesIndexOffset:   DeviceSize;
}

GeneratedCommandsMemoryRequirementsInfoNV :: struct {
    sType:                  StructureType = .GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV;
    pNext:                  *void;
    pipelineBindPoint:      PipelineBindPoint;
    pipeline:               Pipeline;
    indirectCommandsLayout: IndirectCommandsLayoutNV;
    maxSequencesCount:      u32;
}

PFN_vkGetGeneratedCommandsMemoryRequirementsNV :: #type (device: Device, pInfo: *GeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;
PFN_vkCmdPreprocessGeneratedCommandsNV :: #type (commandBuffer: CommandBuffer, pGeneratedCommandsInfo: *GeneratedCommandsInfoNV) -> void #c_call;
PFN_vkCmdExecuteGeneratedCommandsNV :: #type (commandBuffer: CommandBuffer, isPreprocessed: Bool32, pGeneratedCommandsInfo: *GeneratedCommandsInfoNV) -> void #c_call;
PFN_vkCmdBindPipelineShaderGroupNV :: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline, groupIndex: u32) -> void #c_call;
PFN_vkCreateIndirectCommandsLayoutNV :: #type (device: Device, pCreateInfo: *IndirectCommandsLayoutCreateInfoNV, pAllocator: *AllocationCallbacks, pIndirectCommandsLayout: *IndirectCommandsLayoutNV) -> Result #c_call;
PFN_vkDestroyIndirectCommandsLayoutNV :: #type (device: Device, indirectCommandsLayout: IndirectCommandsLayoutNV, pAllocator: *AllocationCallbacks) -> void #c_call;

GetGeneratedCommandsMemoryRequirementsNV: #type (device: Device, pInfo: *GeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: *MemoryRequirements2) -> void #c_call;

CmdPreprocessGeneratedCommandsNV: #type (commandBuffer: CommandBuffer, pGeneratedCommandsInfo: *GeneratedCommandsInfoNV) -> void #c_call;

CmdExecuteGeneratedCommandsNV: #type (commandBuffer: CommandBuffer, isPreprocessed: Bool32, pGeneratedCommandsInfo: *GeneratedCommandsInfoNV) -> void #c_call;

CmdBindPipelineShaderGroupNV: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline, groupIndex: u32) -> void #c_call;

CreateIndirectCommandsLayoutNV: #type (device: Device, pCreateInfo: *IndirectCommandsLayoutCreateInfoNV, pAllocator: *AllocationCallbacks, pIndirectCommandsLayout: *IndirectCommandsLayoutNV) -> Result #c_call;

DestroyIndirectCommandsLayoutNV: #type (device: Device, indirectCommandsLayout: IndirectCommandsLayoutNV, pAllocator: *AllocationCallbacks) -> void #c_call;

PhysicalDeviceInheritedViewportScissorFeaturesNV :: struct {
    sType:                      StructureType = .PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV;
    pNext:                      *void;
    inheritedViewportScissor2D: Bool32;
}

CommandBufferInheritanceViewportScissorInfoNV :: struct {
    sType:              StructureType = .COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV;
    pNext:              *void;
    viewportScissor2D:  Bool32;
    viewportDepthCount: u32;
    pViewportDepths:    *Viewport;
}

PhysicalDeviceTexelBufferAlignmentFeaturesEXT :: struct {
    sType:                StructureType = .PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
    pNext:                *void;
    texelBufferAlignment: Bool32;
}

PhysicalDeviceTexelBufferAlignmentPropertiesEXT :: PhysicalDeviceTexelBufferAlignmentProperties;

RenderPassTransformBeginInfoQCOM :: struct {
    sType:     StructureType = .RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM;
    pNext:     *void;
    transform: SurfaceTransformFlagBitsKHR;
}

CommandBufferInheritanceRenderPassTransformInfoQCOM :: struct {
    sType:      StructureType = .COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM;
    pNext:      *void;
    transform:  SurfaceTransformFlagBitsKHR;
    renderArea: Rect2D;
}

DeviceMemoryReportEventTypeEXT :: enum u32 {
    ALLOCATE_EXT          :: 0;
    FREE_EXT              :: 1;
    IMPORT_EXT            :: 2;
    UNIMPORT_EXT          :: 3;
    ALLOCATION_FAILED_EXT :: 4;
    MAX_ENUM_EXT          :: 2147483647;

    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT          :: ALLOCATE_EXT;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT              :: FREE_EXT;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT            :: IMPORT_EXT;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT          :: UNIMPORT_EXT;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT :: ALLOCATION_FAILED_EXT;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT          :: MAX_ENUM_EXT;
}

DeviceMemoryReportFlagsEXT :: Flags;
PhysicalDeviceDeviceMemoryReportFeaturesEXT :: struct {
    sType:              StructureType = .PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT;
    pNext:              *void;
    deviceMemoryReport: Bool32;
}

DeviceMemoryReportCallbackDataEXT :: struct {
    sType:          StructureType = .DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT;
    pNext:          *void;
    flags:          DeviceMemoryReportFlagsEXT;
    type:           DeviceMemoryReportEventTypeEXT;
    memoryObjectId: u64;
    size:           DeviceSize;
    objectType:     ObjectType;
    objectHandle:   u64;
    heapIndex:      u32;
}

PFN_vkDeviceMemoryReportCallbackEXT :: #type (pCallbackData: *DeviceMemoryReportCallbackDataEXT, pUserData: *void) -> void #c_call;

DeviceDeviceMemoryReportCreateInfoEXT :: struct {
    sType:           StructureType = .DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT;
    pNext:           *void;
    flags:           DeviceMemoryReportFlagsEXT;
    pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT;
    pUserData:       *void;
}

PFN_vkAcquireDrmDisplayEXT :: #type (physicalDevice: PhysicalDevice, drmFd: s32, display: DisplayKHR) -> Result #c_call;
PFN_vkGetDrmDisplayEXT :: #type (physicalDevice: PhysicalDevice, drmFd: s32, connectorId: u32, display: *DisplayKHR) -> Result #c_call;

AcquireDrmDisplayEXT: #type (physicalDevice: PhysicalDevice, drmFd: s32, display: DisplayKHR) -> Result #c_call;

GetDrmDisplayEXT: #type (physicalDevice: PhysicalDevice, drmFd: s32, connectorId: u32, display: *DisplayKHR) -> Result #c_call;

PhysicalDeviceRobustness2FeaturesEXT :: struct {
    sType:               StructureType = .PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;
    pNext:               *void;
    robustBufferAccess2: Bool32;
    robustImageAccess2:  Bool32;
    nullDescriptor:      Bool32;
}

PhysicalDeviceRobustness2PropertiesEXT :: struct {
    sType:                                  StructureType = .PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT;
    pNext:                                  *void;
    robustStorageBufferAccessSizeAlignment: DeviceSize;
    robustUniformBufferAccessSizeAlignment: DeviceSize;
}

SamplerCustomBorderColorCreateInfoEXT :: struct {
    sType:             StructureType = .SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;
    pNext:             *void;
    customBorderColor: ClearColorValue;
    format:            Format;
}

PhysicalDeviceCustomBorderColorPropertiesEXT :: struct {
    sType:                        StructureType = .PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT;
    pNext:                        *void;
    maxCustomBorderColorSamplers: u32;
}

PhysicalDeviceCustomBorderColorFeaturesEXT :: struct {
    sType:                          StructureType = .PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;
    pNext:                          *void;
    customBorderColors:             Bool32;
    customBorderColorWithoutFormat: Bool32;
}

PhysicalDevicePresentBarrierFeaturesNV :: struct {
    sType:          StructureType = .PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV;
    pNext:          *void;
    presentBarrier: Bool32;
}

SurfaceCapabilitiesPresentBarrierNV :: struct {
    sType:                   StructureType = .SURFACE_CAPABILITIES_PRESENT_BARRIER_NV;
    pNext:                   *void;
    presentBarrierSupported: Bool32;
}

SwapchainPresentBarrierCreateInfoNV :: struct {
    sType:                StructureType = .SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV;
    pNext:                *void;
    presentBarrierEnable: Bool32;
}

PrivateDataSlotEXT :: PrivateDataSlot;

PrivateDataSlotCreateFlagsEXT :: PrivateDataSlotCreateFlags;

PhysicalDevicePrivateDataFeaturesEXT :: PhysicalDevicePrivateDataFeatures;

DevicePrivateDataCreateInfoEXT :: DevicePrivateDataCreateInfo;

PrivateDataSlotCreateInfoEXT :: PrivateDataSlotCreateInfo;

PFN_vkCreatePrivateDataSlotEXT :: #type (device: Device, pCreateInfo: *PrivateDataSlotCreateInfo, pAllocator: *AllocationCallbacks, pPrivateDataSlot: *PrivateDataSlot) -> Result #c_call;
PFN_vkDestroyPrivateDataSlotEXT :: #type (device: Device, privateDataSlot: PrivateDataSlot, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkSetPrivateDataEXT :: #type (device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlot, data: u64) -> Result #c_call;
PFN_vkGetPrivateDataEXT :: #type (device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlot, pData: *u64) -> void #c_call;

CreatePrivateDataSlotEXT: #type (device: Device, pCreateInfo: *PrivateDataSlotCreateInfo, pAllocator: *AllocationCallbacks, pPrivateDataSlot: *PrivateDataSlot) -> Result #c_call;

DestroyPrivateDataSlotEXT: #type (device: Device, privateDataSlot: PrivateDataSlot, pAllocator: *AllocationCallbacks) -> void #c_call;

SetPrivateDataEXT: #type (device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlot, data: u64) -> Result #c_call;

GetPrivateDataEXT: #type (device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlot, pData: *u64) -> void #c_call;

PhysicalDevicePipelineCreationCacheControlFeaturesEXT :: PhysicalDevicePipelineCreationCacheControlFeatures;

DeviceDiagnosticsConfigFlagBitsNV :: enum_flags u32 {
    ENABLE_SHADER_DEBUG_INFO_NV      :: 0x1;
    ENABLE_RESOURCE_TRACKING_NV      :: 0x2;
    ENABLE_AUTOMATIC_CHECKPOINTS_NV  :: 0x4;
    ENABLE_SHADER_ERROR_REPORTING_NV :: 0x8;
    FLAG_BITS_MAX_ENUM_NV            :: 0x7fffffff;

    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV      :: ENABLE_SHADER_DEBUG_INFO_NV;
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV      :: ENABLE_RESOURCE_TRACKING_NV;
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV  :: ENABLE_AUTOMATIC_CHECKPOINTS_NV;
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV :: ENABLE_SHADER_ERROR_REPORTING_NV;
    VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV                :: FLAG_BITS_MAX_ENUM_NV;
}

DeviceDiagnosticsConfigFlagsNV :: DeviceDiagnosticsConfigFlagBitsNV;
PhysicalDeviceDiagnosticsConfigFeaturesNV :: struct {
    sType:             StructureType = .PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV;
    pNext:             *void;
    diagnosticsConfig: Bool32;
}

DeviceDiagnosticsConfigCreateInfoNV :: struct {
    sType: StructureType = .DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV;
    pNext: *void;
    flags: DeviceDiagnosticsConfigFlagsNV;
}

QueryLowLatencySupportNV :: struct {
    sType:                  StructureType = .QUERY_LOW_LATENCY_SUPPORT_NV;
    pNext:                  *void;
    pQueriedLowLatencyData: *void;
}

AccelerationStructureKHR_T :: struct {}
AccelerationStructureKHR :: *AccelerationStructureKHR_T;

PhysicalDeviceDescriptorBufferPropertiesEXT :: struct {
    sType:                                                StructureType = .PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT;
    pNext:                                                *void;
    combinedImageSamplerDescriptorSingleArray:            Bool32;
    bufferlessPushDescriptors:                            Bool32;
    allowSamplerImageViewPostSubmitCreation:              Bool32;
    descriptorBufferOffsetAlignment:                      DeviceSize;
    maxDescriptorBufferBindings:                          u32;
    maxResourceDescriptorBufferBindings:                  u32;
    maxSamplerDescriptorBufferBindings:                   u32;
    maxEmbeddedImmutableSamplerBindings:                  u32;
    maxEmbeddedImmutableSamplers:                         u32;
    bufferCaptureReplayDescriptorDataSize:                u64;
    imageCaptureReplayDescriptorDataSize:                 u64;
    imageViewCaptureReplayDescriptorDataSize:             u64;
    samplerCaptureReplayDescriptorDataSize:               u64;
    accelerationStructureCaptureReplayDescriptorDataSize: u64;
    samplerDescriptorSize:                                u64;
    combinedImageSamplerDescriptorSize:                   u64;
    sampledImageDescriptorSize:                           u64;
    storageImageDescriptorSize:                           u64;
    uniformTexelBufferDescriptorSize:                     u64;
    robustUniformTexelBufferDescriptorSize:               u64;
    storageTexelBufferDescriptorSize:                     u64;
    robustStorageTexelBufferDescriptorSize:               u64;
    uniformBufferDescriptorSize:                          u64;
    robustUniformBufferDescriptorSize:                    u64;
    storageBufferDescriptorSize:                          u64;
    robustStorageBufferDescriptorSize:                    u64;
    inputAttachmentDescriptorSize:                        u64;
    accelerationStructureDescriptorSize:                  u64;
    maxSamplerDescriptorBufferRange:                      DeviceSize;
    maxResourceDescriptorBufferRange:                     DeviceSize;
    samplerDescriptorBufferAddressSpaceSize:              DeviceSize;
    resourceDescriptorBufferAddressSpaceSize:             DeviceSize;
    descriptorBufferAddressSpaceSize:                     DeviceSize;
}

PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT :: struct {
    sType:                                        StructureType = .PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT;
    pNext:                                        *void;
    combinedImageSamplerDensityMapDescriptorSize: u64;
}

PhysicalDeviceDescriptorBufferFeaturesEXT :: struct {
    sType:                              StructureType = .PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT;
    pNext:                              *void;
    descriptorBuffer:                   Bool32;
    descriptorBufferCaptureReplay:      Bool32;
    descriptorBufferImageLayoutIgnored: Bool32;
    descriptorBufferPushDescriptors:    Bool32;
}

DescriptorAddressInfoEXT :: struct {
    sType:   StructureType = .DESCRIPTOR_ADDRESS_INFO_EXT;
    pNext:   *void;
    address: DeviceAddress;
    range:   DeviceSize;
    format:  Format;
}

DescriptorBufferBindingInfoEXT :: struct {
    sType:   StructureType = .DESCRIPTOR_BUFFER_BINDING_INFO_EXT;
    pNext:   *void;
    address: DeviceAddress;
    usage:   BufferUsageFlags;
}

DescriptorBufferBindingPushDescriptorBufferHandleEXT :: struct {
    sType:  StructureType = .DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT;
    pNext:  *void;
    buffer: Buffer;
}

DescriptorDataEXT :: union {
    pSampler:              *Sampler;
    pCombinedImageSampler: *DescriptorImageInfo;
    pInputAttachmentImage: *DescriptorImageInfo;
    pSampledImage:         *DescriptorImageInfo;
    pStorageImage:         *DescriptorImageInfo;
    pUniformTexelBuffer:   *DescriptorAddressInfoEXT;
    pStorageTexelBuffer:   *DescriptorAddressInfoEXT;
    pUniformBuffer:        *DescriptorAddressInfoEXT;
    pStorageBuffer:        *DescriptorAddressInfoEXT;
    accelerationStructure: DeviceAddress;
}

DescriptorGetInfoEXT :: struct {
    sType: StructureType = .DESCRIPTOR_GET_INFO_EXT;
    pNext: *void;
    type:  DescriptorType;
    data:  DescriptorDataEXT;
}

BufferCaptureDescriptorDataInfoEXT :: struct {
    sType:  StructureType = .BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    pNext:  *void;
    buffer: Buffer;
}

ImageCaptureDescriptorDataInfoEXT :: struct {
    sType: StructureType = .IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    pNext: *void;
    image: Image;
}

ImageViewCaptureDescriptorDataInfoEXT :: struct {
    sType:     StructureType = .IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    pNext:     *void;
    imageView: ImageView;
}

SamplerCaptureDescriptorDataInfoEXT :: struct {
    sType:   StructureType = .SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    pNext:   *void;
    sampler: Sampler;
}

OpaqueCaptureDescriptorDataCreateInfoEXT :: struct {
    sType:                       StructureType = .OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT;
    pNext:                       *void;
    opaqueCaptureDescriptorData: *void;
}

AccelerationStructureCaptureDescriptorDataInfoEXT :: struct {
    sType:                   StructureType = .ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    pNext:                   *void;
    accelerationStructure:   AccelerationStructureKHR;
    accelerationStructureNV: AccelerationStructureNV;
}

PFN_vkGetDescriptorSetLayoutSizeEXT :: #type (device: Device, layout: DescriptorSetLayout, pLayoutSizeInBytes: *DeviceSize) -> void #c_call;
PFN_vkGetDescriptorSetLayoutBindingOffsetEXT :: #type (device: Device, layout: DescriptorSetLayout, binding: u32, pOffset: *DeviceSize) -> void #c_call;
PFN_vkGetDescriptorEXT :: #type (device: Device, pDescriptorInfo: *DescriptorGetInfoEXT, dataSize: u64, pDescriptor: *void) -> void #c_call;
PFN_vkCmdBindDescriptorBuffersEXT :: #type (commandBuffer: CommandBuffer, bufferCount: u32, pBindingInfos: *DescriptorBufferBindingInfoEXT) -> void #c_call;
PFN_vkCmdSetDescriptorBufferOffsetsEXT :: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, firstSet: u32, setCount: u32, pBufferIndices: *u32, pOffsets: *DeviceSize) -> void #c_call;
PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT :: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, set: u32) -> void #c_call;
PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT :: #type (device: Device, pInfo: *BufferCaptureDescriptorDataInfoEXT, pData: *void) -> Result #c_call;
PFN_vkGetImageOpaqueCaptureDescriptorDataEXT :: #type (device: Device, pInfo: *ImageCaptureDescriptorDataInfoEXT, pData: *void) -> Result #c_call;
PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT :: #type (device: Device, pInfo: *ImageViewCaptureDescriptorDataInfoEXT, pData: *void) -> Result #c_call;
PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT :: #type (device: Device, pInfo: *SamplerCaptureDescriptorDataInfoEXT, pData: *void) -> Result #c_call;
PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT :: #type (device: Device, pInfo: *AccelerationStructureCaptureDescriptorDataInfoEXT, pData: *void) -> Result #c_call;

GetDescriptorSetLayoutSizeEXT: #type (device: Device, layout: DescriptorSetLayout, pLayoutSizeInBytes: *DeviceSize) -> void #c_call;

GetDescriptorSetLayoutBindingOffsetEXT: #type (device: Device, layout: DescriptorSetLayout, binding: u32, pOffset: *DeviceSize) -> void #c_call;

GetDescriptorEXT: #type (device: Device, pDescriptorInfo: *DescriptorGetInfoEXT, dataSize: u64, pDescriptor: *void) -> void #c_call;

CmdBindDescriptorBuffersEXT: #type (commandBuffer: CommandBuffer, bufferCount: u32, pBindingInfos: *DescriptorBufferBindingInfoEXT) -> void #c_call;

CmdSetDescriptorBufferOffsetsEXT: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, firstSet: u32, setCount: u32, pBufferIndices: *u32, pOffsets: *DeviceSize) -> void #c_call;

CmdBindDescriptorBufferEmbeddedSamplersEXT: #type (commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, set: u32) -> void #c_call;

GetBufferOpaqueCaptureDescriptorDataEXT: #type (device: Device, pInfo: *BufferCaptureDescriptorDataInfoEXT, pData: *void) -> Result #c_call;

GetImageOpaqueCaptureDescriptorDataEXT: #type (device: Device, pInfo: *ImageCaptureDescriptorDataInfoEXT, pData: *void) -> Result #c_call;

GetImageViewOpaqueCaptureDescriptorDataEXT: #type (device: Device, pInfo: *ImageViewCaptureDescriptorDataInfoEXT, pData: *void) -> Result #c_call;

GetSamplerOpaqueCaptureDescriptorDataEXT: #type (device: Device, pInfo: *SamplerCaptureDescriptorDataInfoEXT, pData: *void) -> Result #c_call;

GetAccelerationStructureOpaqueCaptureDescriptorDataEXT: #type (device: Device, pInfo: *AccelerationStructureCaptureDescriptorDataInfoEXT, pData: *void) -> Result #c_call;

GraphicsPipelineLibraryFlagBitsEXT :: enum_flags u32 {
    VERTEX_INPUT_INTERFACE_EXT    :: 0x1;
    PRE_RASTERIZATION_SHADERS_EXT :: 0x2;
    FRAGMENT_SHADER_EXT           :: 0x4;
    FRAGMENT_OUTPUT_INTERFACE_EXT :: 0x8;
    FLAG_BITS_MAX_ENUM_EXT        :: 0x7fffffff;

    VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT    :: VERTEX_INPUT_INTERFACE_EXT;
    VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT :: PRE_RASTERIZATION_SHADERS_EXT;
    VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT           :: FRAGMENT_SHADER_EXT;
    VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT :: FRAGMENT_OUTPUT_INTERFACE_EXT;
    VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT            :: FLAG_BITS_MAX_ENUM_EXT;
}

GraphicsPipelineLibraryFlagsEXT :: GraphicsPipelineLibraryFlagBitsEXT;
PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT :: struct {
    sType:                   StructureType = .PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT;
    pNext:                   *void;
    graphicsPipelineLibrary: Bool32;
}

PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT :: struct {
    sType:                                                     StructureType = .PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT;
    pNext:                                                     *void;
    graphicsPipelineLibraryFastLinking:                        Bool32;
    graphicsPipelineLibraryIndependentInterpolationDecoration: Bool32;
}

GraphicsPipelineLibraryCreateInfoEXT :: struct {
    sType: StructureType = .GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT;
    pNext: *void;
    flags: GraphicsPipelineLibraryFlagsEXT;
}

PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD :: struct {
    sType:                           StructureType = .PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD;
    pNext:                           *void;
    shaderEarlyAndLateFragmentTests: Bool32;
}

FragmentShadingRateTypeNV :: enum u32 {
    FRAGMENT_SIZE_NV :: 0;
    ENUMS_NV         :: 1;
    MAX_ENUM_NV      :: 2147483647;

    VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV :: FRAGMENT_SIZE_NV;
    VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV         :: ENUMS_NV;
    VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV      :: MAX_ENUM_NV;
}

FragmentShadingRateNV :: enum u32 {
    _1_INVOCATION_PER_PIXEL_NV      :: 0;
    _1_INVOCATION_PER_1X2_PIXELS_NV :: 1;
    _1_INVOCATION_PER_2X1_PIXELS_NV :: 4;
    _1_INVOCATION_PER_2X2_PIXELS_NV :: 5;
    _1_INVOCATION_PER_2X4_PIXELS_NV :: 6;
    _1_INVOCATION_PER_4X2_PIXELS_NV :: 9;
    _1_INVOCATION_PER_4X4_PIXELS_NV :: 10;
    _2_INVOCATIONS_PER_PIXEL_NV     :: 11;
    _4_INVOCATIONS_PER_PIXEL_NV     :: 12;
    _8_INVOCATIONS_PER_PIXEL_NV     :: 13;
    _16_INVOCATIONS_PER_PIXEL_NV    :: 14;
    NO_INVOCATIONS_NV               :: 15;
    MAX_ENUM_NV                     :: 2147483647;

    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV      :: _1_INVOCATION_PER_PIXEL_NV;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV :: _1_INVOCATION_PER_1X2_PIXELS_NV;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV :: _1_INVOCATION_PER_2X1_PIXELS_NV;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV :: _1_INVOCATION_PER_2X2_PIXELS_NV;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV :: _1_INVOCATION_PER_2X4_PIXELS_NV;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV :: _1_INVOCATION_PER_4X2_PIXELS_NV;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV :: _1_INVOCATION_PER_4X4_PIXELS_NV;
    VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV     :: _2_INVOCATIONS_PER_PIXEL_NV;
    VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV     :: _4_INVOCATIONS_PER_PIXEL_NV;
    VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV     :: _8_INVOCATIONS_PER_PIXEL_NV;
    VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV    :: _16_INVOCATIONS_PER_PIXEL_NV;
    VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV              :: NO_INVOCATIONS_NV;
    VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV                    :: MAX_ENUM_NV;
}

PhysicalDeviceFragmentShadingRateEnumsFeaturesNV :: struct {
    sType:                            StructureType = .PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV;
    pNext:                            *void;
    fragmentShadingRateEnums:         Bool32;
    supersampleFragmentShadingRates:  Bool32;
    noInvocationFragmentShadingRates: Bool32;
}

PhysicalDeviceFragmentShadingRateEnumsPropertiesNV :: struct {
    sType:                                 StructureType = .PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV;
    pNext:                                 *void;
    maxFragmentShadingRateInvocationCount: SampleCountFlagBits;
}

PipelineFragmentShadingRateEnumStateCreateInfoNV :: struct {
    sType:           StructureType = .PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV;
    pNext:           *void;
    shadingRateType: FragmentShadingRateTypeNV;
    shadingRate:     FragmentShadingRateNV;
    combinerOps:     [2] FragmentShadingRateCombinerOpKHR;
}

PFN_vkCmdSetFragmentShadingRateEnumNV :: #type (commandBuffer: CommandBuffer, shadingRate: FragmentShadingRateNV, combinerOps: *[2] FragmentShadingRateCombinerOpKHR) -> void #c_call;

CmdSetFragmentShadingRateEnumNV: #type (commandBuffer: CommandBuffer, shadingRate: FragmentShadingRateNV, combinerOps: *[2] FragmentShadingRateCombinerOpKHR) -> void #c_call;

AccelerationStructureMotionInstanceTypeNV :: enum u32 {
    STATIC_NV        :: 0;
    MATRIX_MOTION_NV :: 1;
    SRT_MOTION_NV    :: 2;
    MAX_ENUM_NV      :: 2147483647;

    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV        :: STATIC_NV;
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV :: MATRIX_MOTION_NV;
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV    :: SRT_MOTION_NV;
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV      :: MAX_ENUM_NV;
}

AccelerationStructureMotionInfoFlagsNV :: Flags;
AccelerationStructureMotionInstanceFlagsNV :: Flags;
DeviceOrHostAddressConstKHR :: union {
    deviceAddress: DeviceAddress;
    hostAddress:   *void;
}

AccelerationStructureGeometryMotionTrianglesDataNV :: struct {
    sType:      StructureType = .ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV;
    pNext:      *void;
    vertexData: DeviceOrHostAddressConstKHR;
}

AccelerationStructureMotionInfoNV :: struct {
    sType:        StructureType = .ACCELERATION_STRUCTURE_MOTION_INFO_NV;
    pNext:        *void;
    maxInstances: u32;
    flags:        AccelerationStructureMotionInfoFlagsNV;
}

AccelerationStructureMatrixMotionInstanceNV :: struct {
    transformT0:                            TransformMatrixKHR;
    transformT1:                            TransformMatrixKHR;
    instanceCustomIndex:                    u32;
    #place instanceCustomIndex; /*bitfield 24*/ mask:                                   u32;
    instanceShaderBindingTableRecordOffset: u32;
    #place instanceShaderBindingTableRecordOffset; /*bitfield 24*/ flags:                                  GeometryInstanceFlagsKHR;
    accelerationStructureReference:         u64;
}

SRTDataNV :: struct {
    sx:  float;
    a:   float;
    b:   float;
    pvx: float;
    sy:  float;
    c:   float;
    pvy: float;
    sz:  float;
    pvz: float;
    qx:  float;
    qy:  float;
    qz:  float;
    qw:  float;
    tx:  float;
    ty:  float;
    tz:  float;
}

AccelerationStructureSRTMotionInstanceNV :: struct {
    transformT0:                            SRTDataNV;
    transformT1:                            SRTDataNV;
    instanceCustomIndex:                    u32;
    #place instanceCustomIndex; /*bitfield 24*/ mask:                                   u32;
    instanceShaderBindingTableRecordOffset: u32;
    #place instanceShaderBindingTableRecordOffset; /*bitfield 24*/ flags:                                  GeometryInstanceFlagsKHR;
    accelerationStructureReference:         u64;
}

AccelerationStructureMotionInstanceDataNV :: union {
    staticInstance:       AccelerationStructureInstanceKHR;
    matrixMotionInstance: AccelerationStructureMatrixMotionInstanceNV;
    srtMotionInstance:    AccelerationStructureSRTMotionInstanceNV;
}

AccelerationStructureMotionInstanceNV :: struct {
    type:  AccelerationStructureMotionInstanceTypeNV;
    flags: AccelerationStructureMotionInstanceFlagsNV;
    data:  AccelerationStructureMotionInstanceDataNV;
}

PhysicalDeviceRayTracingMotionBlurFeaturesNV :: struct {
    sType:                                         StructureType = .PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV;
    pNext:                                         *void;
    rayTracingMotionBlur:                          Bool32;
    rayTracingMotionBlurPipelineTraceRaysIndirect: Bool32;
}

PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT :: struct {
    sType:                 StructureType = .PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT;
    pNext:                 *void;
    ycbcr2plane444Formats: Bool32;
}

PhysicalDeviceFragmentDensityMap2FeaturesEXT :: struct {
    sType:                      StructureType = .PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT;
    pNext:                      *void;
    fragmentDensityMapDeferred: Bool32;
}

PhysicalDeviceFragmentDensityMap2PropertiesEXT :: struct {
    sType:                                     StructureType = .PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT;
    pNext:                                     *void;
    subsampledLoads:                           Bool32;
    subsampledCoarseReconstructionEarlyAccess: Bool32;
    maxSubsampledArrayLayers:                  u32;
    maxDescriptorSetSubsampledSamplers:        u32;
}

CopyCommandTransformInfoQCOM :: struct {
    sType:     StructureType = .COPY_COMMAND_TRANSFORM_INFO_QCOM;
    pNext:     *void;
    transform: SurfaceTransformFlagBitsKHR;
}

PhysicalDeviceImageRobustnessFeaturesEXT :: PhysicalDeviceImageRobustnessFeatures;

ImageCompressionFlagBitsEXT :: enum_flags u32 {
    DEFAULT_EXT             :: 0x0;
    FIXED_RATE_DEFAULT_EXT  :: 0x1;
    FIXED_RATE_EXPLICIT_EXT :: 0x2;
    DISABLED_EXT            :: 0x4;
    FLAG_BITS_MAX_ENUM_EXT  :: 0x7fffffff;

    VK_IMAGE_COMPRESSION_DEFAULT_EXT             :: DEFAULT_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT  :: FIXED_RATE_DEFAULT_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT :: FIXED_RATE_EXPLICIT_EXT;
    VK_IMAGE_COMPRESSION_DISABLED_EXT            :: DISABLED_EXT;
    VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT  :: FLAG_BITS_MAX_ENUM_EXT;
}

ImageCompressionFlagsEXT :: ImageCompressionFlagBitsEXT;

ImageCompressionFixedRateFlagBitsEXT :: enum_flags u32 {
    NONE_EXT               :: 0x0;
    _1BPC_EXT              :: 0x1;
    _2BPC_EXT              :: 0x2;
    _3BPC_EXT              :: 0x4;
    _4BPC_EXT              :: 0x8;
    _5BPC_EXT              :: 0x10;
    _6BPC_EXT              :: 0x20;
    _7BPC_EXT              :: 0x40;
    _8BPC_EXT              :: 0x80;
    _9BPC_EXT              :: 0x100;
    _10BPC_EXT             :: 0x200;
    _11BPC_EXT             :: 0x400;
    _12BPC_EXT             :: 0x800;
    _13BPC_EXT             :: 0x1000;
    _14BPC_EXT             :: 0x2000;
    _15BPC_EXT             :: 0x4000;
    _16BPC_EXT             :: 0x8000;
    _17BPC_EXT             :: 0x10000;
    _18BPC_EXT             :: 0x20000;
    _19BPC_EXT             :: 0x40000;
    _20BPC_EXT             :: 0x80000;
    _21BPC_EXT             :: 0x100000;
    _22BPC_EXT             :: 0x200000;
    _23BPC_EXT             :: 0x400000;
    _24BPC_EXT             :: 0x800000;
    FLAG_BITS_MAX_ENUM_EXT :: 0x7fffffff;

    VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT               :: NONE_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT           :: _1BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT           :: _2BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT           :: _3BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT           :: _4BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT           :: _5BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT           :: _6BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT           :: _7BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT           :: _8BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT           :: _9BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT          :: _10BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT          :: _11BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT          :: _12BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT          :: _13BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT          :: _14BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT          :: _15BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT          :: _16BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT          :: _17BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT          :: _18BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT          :: _19BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT          :: _20BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT          :: _21BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT          :: _22BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT          :: _23BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT          :: _24BPC_EXT;
    VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT :: FLAG_BITS_MAX_ENUM_EXT;
}

ImageCompressionFixedRateFlagsEXT :: ImageCompressionFixedRateFlagBitsEXT;
PhysicalDeviceImageCompressionControlFeaturesEXT :: struct {
    sType:                   StructureType = .PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT;
    pNext:                   *void;
    imageCompressionControl: Bool32;
}

ImageCompressionControlEXT :: struct {
    sType:                        StructureType = .IMAGE_COMPRESSION_CONTROL_EXT;
    pNext:                        *void;
    flags:                        ImageCompressionFlagsEXT;
    compressionControlPlaneCount: u32;
    pFixedRateFlags:              *ImageCompressionFixedRateFlagsEXT;
}

SubresourceLayout2EXT :: struct {
    sType:             StructureType = .SUBRESOURCE_LAYOUT_2_EXT;
    pNext:             *void;
    subresourceLayout: SubresourceLayout;
}

ImageSubresource2EXT :: struct {
    sType:            StructureType = .IMAGE_SUBRESOURCE_2_EXT;
    pNext:            *void;
    imageSubresource: ImageSubresource;
}

ImageCompressionPropertiesEXT :: struct {
    sType:                          StructureType = .IMAGE_COMPRESSION_PROPERTIES_EXT;
    pNext:                          *void;
    imageCompressionFlags:          ImageCompressionFlagsEXT;
    imageCompressionFixedRateFlags: ImageCompressionFixedRateFlagsEXT;
}

PFN_vkGetImageSubresourceLayout2EXT :: #type (device: Device, image: Image, pSubresource: *ImageSubresource2EXT, pLayout: *SubresourceLayout2EXT) -> void #c_call;

GetImageSubresourceLayout2EXT: #type (device: Device, image: Image, pSubresource: *ImageSubresource2EXT, pLayout: *SubresourceLayout2EXT) -> void #c_call;

PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT :: struct {
    sType:                        StructureType = .PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT;
    pNext:                        *void;
    attachmentFeedbackLoopLayout: Bool32;
}

PhysicalDevice4444FormatsFeaturesEXT :: struct {
    sType:          StructureType = .PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;
    pNext:          *void;
    formatA4R4G4B4: Bool32;
    formatA4B4G4R4: Bool32;
}

DeviceFaultAddressTypeEXT :: enum u32 {
    NONE_EXT                        :: 0;
    READ_INVALID_EXT                :: 1;
    WRITE_INVALID_EXT               :: 2;
    EXECUTE_INVALID_EXT             :: 3;
    INSTRUCTION_POINTER_UNKNOWN_EXT :: 4;
    INSTRUCTION_POINTER_INVALID_EXT :: 5;
    INSTRUCTION_POINTER_FAULT_EXT   :: 6;
    MAX_ENUM_EXT                    :: 2147483647;

    VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT                        :: NONE_EXT;
    VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT                :: READ_INVALID_EXT;
    VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT               :: WRITE_INVALID_EXT;
    VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT             :: EXECUTE_INVALID_EXT;
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT :: INSTRUCTION_POINTER_UNKNOWN_EXT;
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT :: INSTRUCTION_POINTER_INVALID_EXT;
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT   :: INSTRUCTION_POINTER_FAULT_EXT;
    VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT                    :: MAX_ENUM_EXT;
}

DeviceFaultVendorBinaryHeaderVersionEXT :: enum u32 {
    ONE_EXT      :: 1;
    MAX_ENUM_EXT :: 2147483647;

    VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT      :: ONE_EXT;
    VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT :: MAX_ENUM_EXT;
}

PhysicalDeviceFaultFeaturesEXT :: struct {
    sType:                   StructureType = .PHYSICAL_DEVICE_FAULT_FEATURES_EXT;
    pNext:                   *void;
    deviceFault:             Bool32;
    deviceFaultVendorBinary: Bool32;
}

DeviceFaultCountsEXT :: struct {
    sType:            StructureType = .DEVICE_FAULT_COUNTS_EXT;
    pNext:            *void;
    addressInfoCount: u32;
    vendorInfoCount:  u32;
    vendorBinarySize: DeviceSize;
}

DeviceFaultAddressInfoEXT :: struct {
    addressType:      DeviceFaultAddressTypeEXT;
    reportedAddress:  DeviceAddress;
    addressPrecision: DeviceSize;
}

DeviceFaultVendorInfoEXT :: struct {
    description:     [256] u8;
    vendorFaultCode: u64;
    vendorFaultData: u64;
}

DeviceFaultInfoEXT :: struct {
    sType:             StructureType = .DEVICE_FAULT_INFO_EXT;
    pNext:             *void;
    description:       [256] u8;
    pAddressInfos:     *DeviceFaultAddressInfoEXT;
    pVendorInfos:      *DeviceFaultVendorInfoEXT;
    pVendorBinaryData: *void;
}

DeviceFaultVendorBinaryHeaderVersionOneEXT :: struct {
    headerSize:            u32;
    headerVersion:         DeviceFaultVendorBinaryHeaderVersionEXT;
    vendorID:              u32;
    deviceID:              u32;
    driverVersion:         u32;
    pipelineCacheUUID:     [16] u8;
    applicationNameOffset: u32;
    applicationVersion:    u32;
    engineNameOffset:      u32;
    engineVersion:         u32;
    apiVersion:            u32;
}

PFN_vkGetDeviceFaultInfoEXT :: #type (device: Device, pFaultCounts: *DeviceFaultCountsEXT, pFaultInfo: *DeviceFaultInfoEXT) -> Result #c_call;

GetDeviceFaultInfoEXT: #type (device: Device, pFaultCounts: *DeviceFaultCountsEXT, pFaultInfo: *DeviceFaultInfoEXT) -> Result #c_call;

PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT :: struct {
    sType:                                     StructureType = .PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT;
    pNext:                                     *void;
    rasterizationOrderColorAttachmentAccess:   Bool32;
    rasterizationOrderDepthAttachmentAccess:   Bool32;
    rasterizationOrderStencilAttachmentAccess: Bool32;
}

PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM :: PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;

PhysicalDeviceRGBA10X6FormatsFeaturesEXT :: struct {
    sType:                             StructureType = .PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT;
    pNext:                             *void;
    formatRgba10x6WithoutYCbCrSampler: Bool32;
}

PhysicalDeviceMutableDescriptorTypeFeaturesEXT :: struct {
    sType:                 StructureType = .PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT;
    pNext:                 *void;
    mutableDescriptorType: Bool32;
}

PhysicalDeviceMutableDescriptorTypeFeaturesVALVE :: PhysicalDeviceMutableDescriptorTypeFeaturesEXT;

MutableDescriptorTypeListEXT :: struct {
    descriptorTypeCount: u32;
    pDescriptorTypes:    *DescriptorType;
}

MutableDescriptorTypeListVALVE :: MutableDescriptorTypeListEXT;

MutableDescriptorTypeCreateInfoEXT :: struct {
    sType:                          StructureType = .MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT;
    pNext:                          *void;
    mutableDescriptorTypeListCount: u32;
    pMutableDescriptorTypeLists:    *MutableDescriptorTypeListEXT;
}

MutableDescriptorTypeCreateInfoVALVE :: MutableDescriptorTypeCreateInfoEXT;

PhysicalDeviceVertexInputDynamicStateFeaturesEXT :: struct {
    sType:                   StructureType = .PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT;
    pNext:                   *void;
    vertexInputDynamicState: Bool32;
}

VertexInputBindingDescription2EXT :: struct {
    sType:     StructureType = .VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT;
    pNext:     *void;
    binding:   u32;
    stride:    u32;
    inputRate: VertexInputRate;
    divisor:   u32;
}

VertexInputAttributeDescription2EXT :: struct {
    sType:    StructureType = .VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT;
    pNext:    *void;
    location: u32;
    binding:  u32;
    format:   Format;
    offset:   u32;
}

PFN_vkCmdSetVertexInputEXT :: #type (commandBuffer: CommandBuffer, vertexBindingDescriptionCount: u32, pVertexBindingDescriptions: *VertexInputBindingDescription2EXT, vertexAttributeDescriptionCount: u32, pVertexAttributeDescriptions: *VertexInputAttributeDescription2EXT) -> void #c_call;

CmdSetVertexInputEXT: #type (commandBuffer: CommandBuffer, vertexBindingDescriptionCount: u32, pVertexBindingDescriptions: *VertexInputBindingDescription2EXT, vertexAttributeDescriptionCount: u32, pVertexAttributeDescriptions: *VertexInputAttributeDescription2EXT) -> void #c_call;

PhysicalDeviceDrmPropertiesEXT :: struct {
    sType:        StructureType = .PHYSICAL_DEVICE_DRM_PROPERTIES_EXT;
    pNext:        *void;
    hasPrimary:   Bool32;
    hasRender:    Bool32;
    primaryMajor: s64;
    primaryMinor: s64;
    renderMajor:  s64;
    renderMinor:  s64;
}

DeviceAddressBindingTypeEXT :: enum u32 {
    BIND_EXT     :: 0;
    UNBIND_EXT   :: 1;
    MAX_ENUM_EXT :: 2147483647;

    VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT     :: BIND_EXT;
    VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT   :: UNBIND_EXT;
    VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT :: MAX_ENUM_EXT;
}

DeviceAddressBindingFlagBitsEXT :: enum_flags u32 {
    INTERNAL_OBJECT_EXT    :: 0x1;
    FLAG_BITS_MAX_ENUM_EXT :: 0x7fffffff;

    VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT :: INTERNAL_OBJECT_EXT;
    VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT  :: FLAG_BITS_MAX_ENUM_EXT;
}

DeviceAddressBindingFlagsEXT :: DeviceAddressBindingFlagBitsEXT;
PhysicalDeviceAddressBindingReportFeaturesEXT :: struct {
    sType:                StructureType = .PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT;
    pNext:                *void;
    reportAddressBinding: Bool32;
}

DeviceAddressBindingCallbackDataEXT :: struct {
    sType:       StructureType = .DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT;
    pNext:       *void;
    flags:       DeviceAddressBindingFlagsEXT;
    baseAddress: DeviceAddress;
    size:        DeviceSize;
    bindingType: DeviceAddressBindingTypeEXT;
}

PhysicalDeviceDepthClipControlFeaturesEXT :: struct {
    sType:            StructureType = .PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT;
    pNext:            *void;
    depthClipControl: Bool32;
}

PipelineViewportDepthClipControlCreateInfoEXT :: struct {
    sType:            StructureType = .PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT;
    pNext:            *void;
    negativeOneToOne: Bool32;
}

PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT :: struct {
    sType:                             StructureType = .PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT;
    pNext:                             *void;
    primitiveTopologyListRestart:      Bool32;
    primitiveTopologyPatchListRestart: Bool32;
}

SubpassShadingPipelineCreateInfoHUAWEI :: struct {
    sType:      StructureType = .SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI;
    pNext:      *void;
    renderPass: RenderPass;
    subpass:    u32;
}

PhysicalDeviceSubpassShadingFeaturesHUAWEI :: struct {
    sType:          StructureType = .PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI;
    pNext:          *void;
    subpassShading: Bool32;
}

PhysicalDeviceSubpassShadingPropertiesHUAWEI :: struct {
    sType:                                     StructureType = .PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI;
    pNext:                                     *void;
    maxSubpassShadingWorkgroupSizeAspectRatio: u32;
}

PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI :: #type (device: Device, renderpass: RenderPass, pMaxWorkgroupSize: *Extent2D) -> Result #c_call;
PFN_vkCmdSubpassShadingHUAWEI :: #type (commandBuffer: CommandBuffer) -> void #c_call;

GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI: #type (device: Device, renderpass: RenderPass, pMaxWorkgroupSize: *Extent2D) -> Result #c_call;

CmdSubpassShadingHUAWEI: #type (commandBuffer: CommandBuffer) -> void #c_call;

PhysicalDeviceInvocationMaskFeaturesHUAWEI :: struct {
    sType:          StructureType = .PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI;
    pNext:          *void;
    invocationMask: Bool32;
}

PFN_vkCmdBindInvocationMaskHUAWEI :: #type (commandBuffer: CommandBuffer, imageView: ImageView, imageLayout: ImageLayout) -> void #c_call;

CmdBindInvocationMaskHUAWEI: #type (commandBuffer: CommandBuffer, imageView: ImageView, imageLayout: ImageLayout) -> void #c_call;

RemoteAddressNV :: *void;

MemoryGetRemoteAddressInfoNV :: struct {
    sType:      StructureType = .MEMORY_GET_REMOTE_ADDRESS_INFO_NV;
    pNext:      *void;
    memory:     DeviceMemory;
    handleType: ExternalMemoryHandleTypeFlagBits;
}

PhysicalDeviceExternalMemoryRDMAFeaturesNV :: struct {
    sType:              StructureType = .PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV;
    pNext:              *void;
    externalMemoryRDMA: Bool32;
}

PFN_vkGetMemoryRemoteAddressNV :: #type (device: Device, pMemoryGetRemoteAddressInfo: *MemoryGetRemoteAddressInfoNV, pAddress: *RemoteAddressNV) -> Result #c_call;

GetMemoryRemoteAddressNV: #type (device: Device, pMemoryGetRemoteAddressInfo: *MemoryGetRemoteAddressInfoNV, pAddress: *RemoteAddressNV) -> Result #c_call;

PipelineInfoEXT :: PipelineInfoKHR;

PipelinePropertiesIdentifierEXT :: struct {
    sType:              StructureType = .PIPELINE_PROPERTIES_IDENTIFIER_EXT;
    pNext:              *void;
    pipelineIdentifier: [16] u8;
}

PhysicalDevicePipelinePropertiesFeaturesEXT :: struct {
    sType:                        StructureType = .PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT;
    pNext:                        *void;
    pipelinePropertiesIdentifier: Bool32;
}

PFN_vkGetPipelinePropertiesEXT :: #type (device: Device, pPipelineInfo: *PipelineInfoEXT, pPipelineProperties: *BaseOutStructure) -> Result #c_call;

GetPipelinePropertiesEXT: #type (device: Device, pPipelineInfo: *PipelineInfoEXT, pPipelineProperties: *BaseOutStructure) -> Result #c_call;

PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT :: struct {
    sType:                             StructureType = .PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT;
    pNext:                             *void;
    multisampledRenderToSingleSampled: Bool32;
}

SubpassResolvePerformanceQueryEXT :: struct {
    sType:   StructureType = .SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT;
    pNext:   *void;
    optimal: Bool32;
}

MultisampledRenderToSingleSampledInfoEXT :: struct {
    sType:                                   StructureType = .MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT;
    pNext:                                   *void;
    multisampledRenderToSingleSampledEnable: Bool32;
    rasterizationSamples:                    SampleCountFlagBits;
}

PhysicalDeviceExtendedDynamicState2FeaturesEXT :: struct {
    sType:                                   StructureType = .PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT;
    pNext:                                   *void;
    extendedDynamicState2:                   Bool32;
    extendedDynamicState2LogicOp:            Bool32;
    extendedDynamicState2PatchControlPoints: Bool32;
}

PFN_vkCmdSetPatchControlPointsEXT :: #type (commandBuffer: CommandBuffer, patchControlPoints: u32) -> void #c_call;
PFN_vkCmdSetRasterizerDiscardEnableEXT :: #type (commandBuffer: CommandBuffer, rasterizerDiscardEnable: Bool32) -> void #c_call;
PFN_vkCmdSetDepthBiasEnableEXT :: #type (commandBuffer: CommandBuffer, depthBiasEnable: Bool32) -> void #c_call;
PFN_vkCmdSetLogicOpEXT :: #type (commandBuffer: CommandBuffer, logicOp: LogicOp) -> void #c_call;
PFN_vkCmdSetPrimitiveRestartEnableEXT :: #type (commandBuffer: CommandBuffer, primitiveRestartEnable: Bool32) -> void #c_call;

CmdSetPatchControlPointsEXT: #type (commandBuffer: CommandBuffer, patchControlPoints: u32) -> void #c_call;

CmdSetRasterizerDiscardEnableEXT: #type (commandBuffer: CommandBuffer, rasterizerDiscardEnable: Bool32) -> void #c_call;

CmdSetDepthBiasEnableEXT: #type (commandBuffer: CommandBuffer, depthBiasEnable: Bool32) -> void #c_call;

CmdSetLogicOpEXT: #type (commandBuffer: CommandBuffer, logicOp: LogicOp) -> void #c_call;

CmdSetPrimitiveRestartEnableEXT: #type (commandBuffer: CommandBuffer, primitiveRestartEnable: Bool32) -> void #c_call;

PhysicalDeviceColorWriteEnableFeaturesEXT :: struct {
    sType:            StructureType = .PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT;
    pNext:            *void;
    colorWriteEnable: Bool32;
}

PipelineColorWriteCreateInfoEXT :: struct {
    sType:              StructureType = .PIPELINE_COLOR_WRITE_CREATE_INFO_EXT;
    pNext:              *void;
    attachmentCount:    u32;
    pColorWriteEnables: *Bool32;
}

PFN_vkCmdSetColorWriteEnableEXT :: #type (commandBuffer: CommandBuffer, attachmentCount: u32, pColorWriteEnables: *Bool32) -> void #c_call;

CmdSetColorWriteEnableEXT: #type (commandBuffer: CommandBuffer, attachmentCount: u32, pColorWriteEnables: *Bool32) -> void #c_call;

PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT :: struct {
    sType:                                         StructureType = .PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT;
    pNext:                                         *void;
    primitivesGeneratedQuery:                      Bool32;
    primitivesGeneratedQueryWithRasterizerDiscard: Bool32;
    primitivesGeneratedQueryWithNonZeroStreams:    Bool32;
}

PhysicalDeviceGlobalPriorityQueryFeaturesEXT :: PhysicalDeviceGlobalPriorityQueryFeaturesKHR;

QueueFamilyGlobalPriorityPropertiesEXT :: QueueFamilyGlobalPriorityPropertiesKHR;

PhysicalDeviceImageViewMinLodFeaturesEXT :: struct {
    sType:  StructureType = .PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT;
    pNext:  *void;
    minLod: Bool32;
}

ImageViewMinLodCreateInfoEXT :: struct {
    sType:  StructureType = .IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT;
    pNext:  *void;
    minLod: float;
}

PhysicalDeviceMultiDrawFeaturesEXT :: struct {
    sType:     StructureType = .PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT;
    pNext:     *void;
    multiDraw: Bool32;
}

PhysicalDeviceMultiDrawPropertiesEXT :: struct {
    sType:             StructureType = .PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT;
    pNext:             *void;
    maxMultiDrawCount: u32;
}

MultiDrawInfoEXT :: struct {
    firstVertex: u32;
    vertexCount: u32;
}

MultiDrawIndexedInfoEXT :: struct {
    firstIndex:   u32;
    indexCount:   u32;
    vertexOffset: s32;
}

PFN_vkCmdDrawMultiEXT :: #type (commandBuffer: CommandBuffer, drawCount: u32, pVertexInfo: *MultiDrawInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32) -> void #c_call;
PFN_vkCmdDrawMultiIndexedEXT :: #type (commandBuffer: CommandBuffer, drawCount: u32, pIndexInfo: *MultiDrawIndexedInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32, pVertexOffset: *s32) -> void #c_call;

CmdDrawMultiEXT: #type (commandBuffer: CommandBuffer, drawCount: u32, pVertexInfo: *MultiDrawInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32) -> void #c_call;

CmdDrawMultiIndexedEXT: #type (commandBuffer: CommandBuffer, drawCount: u32, pIndexInfo: *MultiDrawIndexedInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32, pVertexOffset: *s32) -> void #c_call;

PhysicalDeviceImage2DViewOf3DFeaturesEXT :: struct {
    sType:             StructureType = .PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT;
    pNext:             *void;
    image2DViewOf3D:   Bool32;
    sampler2DViewOf3D: Bool32;
}

PhysicalDeviceShaderTileImageFeaturesEXT :: struct {
    sType:                            StructureType = .PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT;
    pNext:                            *void;
    shaderTileImageColorReadAccess:   Bool32;
    shaderTileImageDepthReadAccess:   Bool32;
    shaderTileImageStencilReadAccess: Bool32;
}

PhysicalDeviceShaderTileImagePropertiesEXT :: struct {
    sType:                                            StructureType = .PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT;
    pNext:                                            *void;
    shaderTileImageCoherentReadAccelerated:           Bool32;
    shaderTileImageReadSampleFromPixelRateInvocation: Bool32;
    shaderTileImageReadFromHelperInvocation:          Bool32;
}

MicromapEXT_T :: struct {}
MicromapEXT :: *MicromapEXT_T;

MicromapTypeEXT :: enum u32 {
    OPACITY_MICROMAP_EXT :: 0;

    MAX_ENUM_EXT         :: 2147483647;

    VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT :: OPACITY_MICROMAP_EXT;

    VK_MICROMAP_TYPE_MAX_ENUM_EXT         :: MAX_ENUM_EXT;
}

BuildMicromapModeEXT :: enum u32 {
    BUILD_EXT    :: 0;
    MAX_ENUM_EXT :: 2147483647;

    VK_BUILD_MICROMAP_MODE_BUILD_EXT    :: BUILD_EXT;
    VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT :: MAX_ENUM_EXT;
}

CopyMicromapModeEXT :: enum u32 {
    CLONE_EXT       :: 0;
    SERIALIZE_EXT   :: 1;
    DESERIALIZE_EXT :: 2;
    COMPACT_EXT     :: 3;
    MAX_ENUM_EXT    :: 2147483647;

    VK_COPY_MICROMAP_MODE_CLONE_EXT       :: CLONE_EXT;
    VK_COPY_MICROMAP_MODE_SERIALIZE_EXT   :: SERIALIZE_EXT;
    VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT :: DESERIALIZE_EXT;
    VK_COPY_MICROMAP_MODE_COMPACT_EXT     :: COMPACT_EXT;
    VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT    :: MAX_ENUM_EXT;
}

OpacityMicromapFormatEXT :: enum u32 {
    _2_STATE_EXT :: 1;
    _4_STATE_EXT :: 2;
    MAX_ENUM_EXT :: 2147483647;

    VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT  :: _2_STATE_EXT;
    VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT  :: _4_STATE_EXT;
    VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT :: MAX_ENUM_EXT;
}

OpacityMicromapSpecialIndexEXT :: enum u32 {
    FULLY_TRANSPARENT_EXT         :: 4294967295;
    FULLY_OPAQUE_EXT              :: 4294967294;
    FULLY_UNKNOWN_TRANSPARENT_EXT :: 4294967293;
    FULLY_UNKNOWN_OPAQUE_EXT      :: 4294967292;
    MAX_ENUM_EXT                  :: 2147483647;

    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT         :: FULLY_TRANSPARENT_EXT;
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT              :: FULLY_OPAQUE_EXT;
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT :: FULLY_UNKNOWN_TRANSPARENT_EXT;
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT      :: FULLY_UNKNOWN_OPAQUE_EXT;
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT                  :: MAX_ENUM_EXT;
}

AccelerationStructureCompatibilityKHR :: enum u32 {
    COMPATIBLE_KHR   :: 0;
    INCOMPATIBLE_KHR :: 1;
    MAX_ENUM_KHR     :: 2147483647;

    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR   :: COMPATIBLE_KHR;
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR :: INCOMPATIBLE_KHR;
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR     :: MAX_ENUM_KHR;
}

AccelerationStructureBuildTypeKHR :: enum u32 {
    HOST_KHR           :: 0;
    DEVICE_KHR         :: 1;
    HOST_OR_DEVICE_KHR :: 2;
    MAX_ENUM_KHR       :: 2147483647;

    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR           :: HOST_KHR;
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR         :: DEVICE_KHR;
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR :: HOST_OR_DEVICE_KHR;
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR       :: MAX_ENUM_KHR;
}

BuildMicromapFlagBitsEXT :: enum_flags u32 {
    PREFER_FAST_TRACE_EXT  :: 0x1;
    PREFER_FAST_BUILD_EXT  :: 0x2;
    ALLOW_COMPACTION_EXT   :: 0x4;
    FLAG_BITS_MAX_ENUM_EXT :: 0x7fffffff;

    VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT :: PREFER_FAST_TRACE_EXT;
    VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT :: PREFER_FAST_BUILD_EXT;
    VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT  :: ALLOW_COMPACTION_EXT;
    VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT    :: FLAG_BITS_MAX_ENUM_EXT;
}

BuildMicromapFlagsEXT :: BuildMicromapFlagBitsEXT;

MicromapCreateFlagBitsEXT :: enum_flags u32 {
    DEVICE_ADDRESS_CAPTURE_REPLAY_EXT :: 0x1;
    FLAG_BITS_MAX_ENUM_EXT            :: 0x7fffffff;

    VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT :: DEVICE_ADDRESS_CAPTURE_REPLAY_EXT;
    VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT                :: FLAG_BITS_MAX_ENUM_EXT;
}

MicromapCreateFlagsEXT :: MicromapCreateFlagBitsEXT;
MicromapUsageEXT :: struct {
    count:            u32;
    subdivisionLevel: u32;
    format:           u32;
}

DeviceOrHostAddressKHR :: union {
    deviceAddress: DeviceAddress;
    hostAddress:   *void;
}

MicromapBuildInfoEXT :: struct {
    sType:               StructureType = .MICROMAP_BUILD_INFO_EXT;
    pNext:               *void;
    type:                MicromapTypeEXT;
    flags:               BuildMicromapFlagsEXT;
    mode:                BuildMicromapModeEXT;
    dstMicromap:         MicromapEXT;
    usageCountsCount:    u32;
    pUsageCounts:        *MicromapUsageEXT;
    ppUsageCounts:       **MicromapUsageEXT;
    data:                DeviceOrHostAddressConstKHR;
    scratchData:         DeviceOrHostAddressKHR;
    triangleArray:       DeviceOrHostAddressConstKHR;
    triangleArrayStride: DeviceSize;
}

MicromapCreateInfoEXT :: struct {
    sType:         StructureType = .MICROMAP_CREATE_INFO_EXT;
    pNext:         *void;
    createFlags:   MicromapCreateFlagsEXT;
    buffer:        Buffer;
    offset:        DeviceSize;
    size:          DeviceSize;
    type:          MicromapTypeEXT;
    deviceAddress: DeviceAddress;
}

PhysicalDeviceOpacityMicromapFeaturesEXT :: struct {
    sType:                 StructureType = .PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT;
    pNext:                 *void;
    micromap:              Bool32;
    micromapCaptureReplay: Bool32;
    micromapHostCommands:  Bool32;
}

PhysicalDeviceOpacityMicromapPropertiesEXT :: struct {
    sType:                            StructureType = .PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT;
    pNext:                            *void;
    maxOpacity2StateSubdivisionLevel: u32;
    maxOpacity4StateSubdivisionLevel: u32;
}

MicromapVersionInfoEXT :: struct {
    sType:        StructureType = .MICROMAP_VERSION_INFO_EXT;
    pNext:        *void;
    pVersionData: *u8;
}

CopyMicromapToMemoryInfoEXT :: struct {
    sType: StructureType = .COPY_MICROMAP_TO_MEMORY_INFO_EXT;
    pNext: *void;
    src:   MicromapEXT;
    dst:   DeviceOrHostAddressKHR;
    mode:  CopyMicromapModeEXT;
}

CopyMemoryToMicromapInfoEXT :: struct {
    sType: StructureType = .COPY_MEMORY_TO_MICROMAP_INFO_EXT;
    pNext: *void;
    src:   DeviceOrHostAddressConstKHR;
    dst:   MicromapEXT;
    mode:  CopyMicromapModeEXT;
}

CopyMicromapInfoEXT :: struct {
    sType: StructureType = .COPY_MICROMAP_INFO_EXT;
    pNext: *void;
    src:   MicromapEXT;
    dst:   MicromapEXT;
    mode:  CopyMicromapModeEXT;
}

MicromapBuildSizesInfoEXT :: struct {
    sType:            StructureType = .MICROMAP_BUILD_SIZES_INFO_EXT;
    pNext:            *void;
    micromapSize:     DeviceSize;
    buildScratchSize: DeviceSize;
    discardable:      Bool32;
}

AccelerationStructureTrianglesOpacityMicromapEXT :: struct {
    sType:            StructureType = .ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT;
    pNext:            *void;
    indexType:        IndexType;
    indexBuffer:      DeviceOrHostAddressConstKHR;
    indexStride:      DeviceSize;
    baseTriangle:     u32;
    usageCountsCount: u32;
    pUsageCounts:     *MicromapUsageEXT;
    ppUsageCounts:    **MicromapUsageEXT;
    micromap:         MicromapEXT;
}

MicromapTriangleEXT :: struct {
    dataOffset:       u32;
    subdivisionLevel: u16;
    format:           u16;
}

PFN_vkCreateMicromapEXT :: #type (device: Device, pCreateInfo: *MicromapCreateInfoEXT, pAllocator: *AllocationCallbacks, pMicromap: *MicromapEXT) -> Result #c_call;
PFN_vkDestroyMicromapEXT :: #type (device: Device, micromap: MicromapEXT, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCmdBuildMicromapsEXT :: #type (commandBuffer: CommandBuffer, infoCount: u32, pInfos: *MicromapBuildInfoEXT) -> void #c_call;
PFN_vkBuildMicromapsEXT :: #type (device: Device, deferredOperation: DeferredOperationKHR, infoCount: u32, pInfos: *MicromapBuildInfoEXT) -> Result #c_call;
PFN_vkCopyMicromapEXT :: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyMicromapInfoEXT) -> Result #c_call;
PFN_vkCopyMicromapToMemoryEXT :: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyMicromapToMemoryInfoEXT) -> Result #c_call;
PFN_vkCopyMemoryToMicromapEXT :: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyMemoryToMicromapInfoEXT) -> Result #c_call;
PFN_vkWriteMicromapsPropertiesEXT :: #type (device: Device, micromapCount: u32, pMicromaps: *MicromapEXT, queryType: QueryType, dataSize: u64, pData: *void, stride: u64) -> Result #c_call;
PFN_vkCmdCopyMicromapEXT :: #type (commandBuffer: CommandBuffer, pInfo: *CopyMicromapInfoEXT) -> void #c_call;
PFN_vkCmdCopyMicromapToMemoryEXT :: #type (commandBuffer: CommandBuffer, pInfo: *CopyMicromapToMemoryInfoEXT) -> void #c_call;
PFN_vkCmdCopyMemoryToMicromapEXT :: #type (commandBuffer: CommandBuffer, pInfo: *CopyMemoryToMicromapInfoEXT) -> void #c_call;
PFN_vkCmdWriteMicromapsPropertiesEXT :: #type (commandBuffer: CommandBuffer, micromapCount: u32, pMicromaps: *MicromapEXT, queryType: QueryType, queryPool: QueryPool, firstQuery: u32) -> void #c_call;
PFN_vkGetDeviceMicromapCompatibilityEXT :: #type (device: Device, pVersionInfo: *MicromapVersionInfoEXT, pCompatibility: *AccelerationStructureCompatibilityKHR) -> void #c_call;
PFN_vkGetMicromapBuildSizesEXT :: #type (device: Device, buildType: AccelerationStructureBuildTypeKHR, pBuildInfo: *MicromapBuildInfoEXT, pSizeInfo: *MicromapBuildSizesInfoEXT) -> void #c_call;

CreateMicromapEXT: #type (device: Device, pCreateInfo: *MicromapCreateInfoEXT, pAllocator: *AllocationCallbacks, pMicromap: *MicromapEXT) -> Result #c_call;

DestroyMicromapEXT: #type (device: Device, micromap: MicromapEXT, pAllocator: *AllocationCallbacks) -> void #c_call;

CmdBuildMicromapsEXT: #type (commandBuffer: CommandBuffer, infoCount: u32, pInfos: *MicromapBuildInfoEXT) -> void #c_call;

BuildMicromapsEXT: #type (device: Device, deferredOperation: DeferredOperationKHR, infoCount: u32, pInfos: *MicromapBuildInfoEXT) -> Result #c_call;

CopyMicromapEXT: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyMicromapInfoEXT) -> Result #c_call;

CopyMicromapToMemoryEXT: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyMicromapToMemoryInfoEXT) -> Result #c_call;

CopyMemoryToMicromapEXT: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyMemoryToMicromapInfoEXT) -> Result #c_call;

WriteMicromapsPropertiesEXT: #type (device: Device, micromapCount: u32, pMicromaps: *MicromapEXT, queryType: QueryType, dataSize: u64, pData: *void, stride: u64) -> Result #c_call;

CmdCopyMicromapEXT: #type (commandBuffer: CommandBuffer, pInfo: *CopyMicromapInfoEXT) -> void #c_call;

CmdCopyMicromapToMemoryEXT: #type (commandBuffer: CommandBuffer, pInfo: *CopyMicromapToMemoryInfoEXT) -> void #c_call;

CmdCopyMemoryToMicromapEXT: #type (commandBuffer: CommandBuffer, pInfo: *CopyMemoryToMicromapInfoEXT) -> void #c_call;

CmdWriteMicromapsPropertiesEXT: #type (commandBuffer: CommandBuffer, micromapCount: u32, pMicromaps: *MicromapEXT, queryType: QueryType, queryPool: QueryPool, firstQuery: u32) -> void #c_call;

GetDeviceMicromapCompatibilityEXT: #type (device: Device, pVersionInfo: *MicromapVersionInfoEXT, pCompatibility: *AccelerationStructureCompatibilityKHR) -> void #c_call;

GetMicromapBuildSizesEXT: #type (device: Device, buildType: AccelerationStructureBuildTypeKHR, pBuildInfo: *MicromapBuildInfoEXT, pSizeInfo: *MicromapBuildSizesInfoEXT) -> void #c_call;

PhysicalDeviceClusterCullingShaderFeaturesHUAWEI :: struct {
    sType:                         StructureType = .PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI;
    pNext:                         *void;
    clustercullingShader:          Bool32;
    multiviewClusterCullingShader: Bool32;
}

PhysicalDeviceClusterCullingShaderPropertiesHUAWEI :: struct {
    sType:                         StructureType = .PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI;
    pNext:                         *void;
    maxWorkGroupCount:             [3] u32;
    maxWorkGroupSize:              [3] u32;
    maxOutputClusterCount:         u32;
    indirectBufferOffsetAlignment: DeviceSize;
}

PFN_vkCmdDrawClusterHUAWEI :: #type (commandBuffer: CommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #c_call;
PFN_vkCmdDrawClusterIndirectHUAWEI :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize) -> void #c_call;

CmdDrawClusterHUAWEI: #type (commandBuffer: CommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #c_call;

CmdDrawClusterIndirectHUAWEI: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize) -> void #c_call;

PhysicalDeviceBorderColorSwizzleFeaturesEXT :: struct {
    sType:                       StructureType = .PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT;
    pNext:                       *void;
    borderColorSwizzle:          Bool32;
    borderColorSwizzleFromImage: Bool32;
}

SamplerBorderColorComponentMappingCreateInfoEXT :: struct {
    sType:      StructureType = .SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT;
    pNext:      *void;
    components: ComponentMapping;
    srgb:       Bool32;
}

PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT :: struct {
    sType:                     StructureType = .PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT;
    pNext:                     *void;
    pageableDeviceLocalMemory: Bool32;
}

PFN_vkSetDeviceMemoryPriorityEXT :: #type (device: Device, memory: DeviceMemory, priority: float) -> void #c_call;

SetDeviceMemoryPriorityEXT: #type (device: Device, memory: DeviceMemory, priority: float) -> void #c_call;

PhysicalDeviceShaderCorePropertiesARM :: struct {
    sType:     StructureType = .PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM;
    pNext:     *void;
    pixelRate: u32;
    texelRate: u32;
    fmaRate:   u32;
}

PhysicalDeviceImageSlicedViewOf3DFeaturesEXT :: struct {
    sType:               StructureType = .PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT;
    pNext:               *void;
    imageSlicedViewOf3D: Bool32;
}

ImageViewSlicedCreateInfoEXT :: struct {
    sType:       StructureType = .IMAGE_VIEW_SLICED_CREATE_INFO_EXT;
    pNext:       *void;
    sliceOffset: u32;
    sliceCount:  u32;
}

PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE :: struct {
    sType:                    StructureType = .PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE;
    pNext:                    *void;
    descriptorSetHostMapping: Bool32;
}

DescriptorSetBindingReferenceVALVE :: struct {
    sType:               StructureType = .DESCRIPTOR_SET_BINDING_REFERENCE_VALVE;
    pNext:               *void;
    descriptorSetLayout: DescriptorSetLayout;
    binding:             u32;
}

DescriptorSetLayoutHostMappingInfoVALVE :: struct {
    sType:            StructureType = .DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE;
    pNext:            *void;
    descriptorOffset: u64;
    descriptorSize:   u32;
}

PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE :: #type (device: Device, pBindingReference: *DescriptorSetBindingReferenceVALVE, pHostMapping: *DescriptorSetLayoutHostMappingInfoVALVE) -> void #c_call;
PFN_vkGetDescriptorSetHostMappingVALVE :: #type (device: Device, descriptorSet: DescriptorSet, ppData: **void) -> void #c_call;

GetDescriptorSetLayoutHostMappingInfoVALVE: #type (device: Device, pBindingReference: *DescriptorSetBindingReferenceVALVE, pHostMapping: *DescriptorSetLayoutHostMappingInfoVALVE) -> void #c_call;

GetDescriptorSetHostMappingVALVE: #type (device: Device, descriptorSet: DescriptorSet, ppData: **void) -> void #c_call;

PhysicalDeviceDepthClampZeroOneFeaturesEXT :: struct {
    sType:             StructureType = .PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT;
    pNext:             *void;
    depthClampZeroOne: Bool32;
}

PhysicalDeviceNonSeamlessCubeMapFeaturesEXT :: struct {
    sType:              StructureType = .PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT;
    pNext:              *void;
    nonSeamlessCubeMap: Bool32;
}

PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM :: struct {
    sType:                    StructureType = .PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM;
    pNext:                    *void;
    fragmentDensityMapOffset: Bool32;
}

PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM :: struct {
    sType:                            StructureType = .PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM;
    pNext:                            *void;
    fragmentDensityOffsetGranularity: Extent2D;
}

SubpassFragmentDensityMapOffsetEndInfoQCOM :: struct {
    sType:                      StructureType = .SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM;
    pNext:                      *void;
    fragmentDensityOffsetCount: u32;
    pFragmentDensityOffsets:    *Offset2D;
}

CopyMemoryIndirectCommandNV :: struct {
    srcAddress: DeviceAddress;
    dstAddress: DeviceAddress;
    size:       DeviceSize;
}

CopyMemoryToImageIndirectCommandNV :: struct {
    srcAddress:        DeviceAddress;
    bufferRowLength:   u32;
    bufferImageHeight: u32;
    imageSubresource:  ImageSubresourceLayers;
    imageOffset:       Offset3D;
    imageExtent:       Extent3D;
}

PhysicalDeviceCopyMemoryIndirectFeaturesNV :: struct {
    sType:        StructureType = .PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV;
    pNext:        *void;
    indirectCopy: Bool32;
}

PhysicalDeviceCopyMemoryIndirectPropertiesNV :: struct {
    sType:           StructureType = .PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV;
    pNext:           *void;
    supportedQueues: QueueFlags;
}

PFN_vkCmdCopyMemoryIndirectNV :: #type (commandBuffer: CommandBuffer, copyBufferAddress: DeviceAddress, copyCount: u32, stride: u32) -> void #c_call;
PFN_vkCmdCopyMemoryToImageIndirectNV :: #type (commandBuffer: CommandBuffer, copyBufferAddress: DeviceAddress, copyCount: u32, stride: u32, dstImage: Image, dstImageLayout: ImageLayout, pImageSubresources: *ImageSubresourceLayers) -> void #c_call;

CmdCopyMemoryIndirectNV: #type (commandBuffer: CommandBuffer, copyBufferAddress: DeviceAddress, copyCount: u32, stride: u32) -> void #c_call;

CmdCopyMemoryToImageIndirectNV: #type (commandBuffer: CommandBuffer, copyBufferAddress: DeviceAddress, copyCount: u32, stride: u32, dstImage: Image, dstImageLayout: ImageLayout, pImageSubresources: *ImageSubresourceLayers) -> void #c_call;

MemoryDecompressionMethodFlagBitsNV :: enum_flags u64 {
    GDEFLATE_1_0_NV :: 0x1;
    VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV :: GDEFLATE_1_0_NV;
}

MemoryDecompressionMethodFlagsNV :: MemoryDecompressionMethodFlagBitsNV;
DecompressMemoryRegionNV :: struct {
    srcAddress:          DeviceAddress;
    dstAddress:          DeviceAddress;
    compressedSize:      DeviceSize;
    decompressedSize:    DeviceSize;
    decompressionMethod: MemoryDecompressionMethodFlagsNV;
}

PhysicalDeviceMemoryDecompressionFeaturesNV :: struct {
    sType:               StructureType = .PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV;
    pNext:               *void;
    memoryDecompression: Bool32;
}

PhysicalDeviceMemoryDecompressionPropertiesNV :: struct {
    sType:                         StructureType = .PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV;
    pNext:                         *void;
    decompressionMethods:          MemoryDecompressionMethodFlagsNV;
    maxDecompressionIndirectCount: u64;
}

PFN_vkCmdDecompressMemoryNV :: #type (commandBuffer: CommandBuffer, decompressRegionCount: u32, pDecompressMemoryRegions: *DecompressMemoryRegionNV) -> void #c_call;
PFN_vkCmdDecompressMemoryIndirectCountNV :: #type (commandBuffer: CommandBuffer, indirectCommandsAddress: DeviceAddress, indirectCommandsCountAddress: DeviceAddress, stride: u32) -> void #c_call;

CmdDecompressMemoryNV: #type (commandBuffer: CommandBuffer, decompressRegionCount: u32, pDecompressMemoryRegions: *DecompressMemoryRegionNV) -> void #c_call;

CmdDecompressMemoryIndirectCountNV: #type (commandBuffer: CommandBuffer, indirectCommandsAddress: DeviceAddress, indirectCommandsCountAddress: DeviceAddress, stride: u32) -> void #c_call;

PhysicalDeviceLinearColorAttachmentFeaturesNV :: struct {
    sType:                 StructureType = .PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV;
    pNext:                 *void;
    linearColorAttachment: Bool32;
}

PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT :: struct {
    sType:                            StructureType = .PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT;
    pNext:                            *void;
    imageCompressionControlSwapchain: Bool32;
}

ImageViewSampleWeightCreateInfoQCOM :: struct {
    sType:        StructureType = .IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM;
    pNext:        *void;
    filterCenter: Offset2D;
    filterSize:   Extent2D;
    numPhases:    u32;
}

PhysicalDeviceImageProcessingFeaturesQCOM :: struct {
    sType:                 StructureType = .PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM;
    pNext:                 *void;
    textureSampleWeighted: Bool32;
    textureBoxFilter:      Bool32;
    textureBlockMatch:     Bool32;
}

PhysicalDeviceImageProcessingPropertiesQCOM :: struct {
    sType:                    StructureType = .PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM;
    pNext:                    *void;
    maxWeightFilterPhases:    u32;
    maxWeightFilterDimension: Extent2D;
    maxBlockMatchRegion:      Extent2D;
    maxBoxFilterBlockSize:    Extent2D;
}

PhysicalDeviceExtendedDynamicState3FeaturesEXT :: struct {
    sType:                                                 StructureType = .PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT;
    pNext:                                                 *void;
    extendedDynamicState3TessellationDomainOrigin:         Bool32;
    extendedDynamicState3DepthClampEnable:                 Bool32;
    extendedDynamicState3PolygonMode:                      Bool32;
    extendedDynamicState3RasterizationSamples:             Bool32;
    extendedDynamicState3SampleMask:                       Bool32;
    extendedDynamicState3AlphaToCoverageEnable:            Bool32;
    extendedDynamicState3AlphaToOneEnable:                 Bool32;
    extendedDynamicState3LogicOpEnable:                    Bool32;
    extendedDynamicState3ColorBlendEnable:                 Bool32;
    extendedDynamicState3ColorBlendEquation:               Bool32;
    extendedDynamicState3ColorWriteMask:                   Bool32;
    extendedDynamicState3RasterizationStream:              Bool32;
    extendedDynamicState3ConservativeRasterizationMode:    Bool32;
    extendedDynamicState3ExtraPrimitiveOverestimationSize: Bool32;
    extendedDynamicState3DepthClipEnable:                  Bool32;
    extendedDynamicState3SampleLocationsEnable:            Bool32;
    extendedDynamicState3ColorBlendAdvanced:               Bool32;
    extendedDynamicState3ProvokingVertexMode:              Bool32;
    extendedDynamicState3LineRasterizationMode:            Bool32;
    extendedDynamicState3LineStippleEnable:                Bool32;
    extendedDynamicState3DepthClipNegativeOneToOne:        Bool32;
    extendedDynamicState3ViewportWScalingEnable:           Bool32;
    extendedDynamicState3ViewportSwizzle:                  Bool32;
    extendedDynamicState3CoverageToColorEnable:            Bool32;
    extendedDynamicState3CoverageToColorLocation:          Bool32;
    extendedDynamicState3CoverageModulationMode:           Bool32;
    extendedDynamicState3CoverageModulationTableEnable:    Bool32;
    extendedDynamicState3CoverageModulationTable:          Bool32;
    extendedDynamicState3CoverageReductionMode:            Bool32;
    extendedDynamicState3RepresentativeFragmentTestEnable: Bool32;
    extendedDynamicState3ShadingRateImageEnable:           Bool32;
}

PhysicalDeviceExtendedDynamicState3PropertiesEXT :: struct {
    sType:                                StructureType = .PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT;
    pNext:                                *void;
    dynamicPrimitiveTopologyUnrestricted: Bool32;
}

ColorBlendEquationEXT :: struct {
    srcColorBlendFactor: BlendFactor;
    dstColorBlendFactor: BlendFactor;
    colorBlendOp:        BlendOp;
    srcAlphaBlendFactor: BlendFactor;
    dstAlphaBlendFactor: BlendFactor;
    alphaBlendOp:        BlendOp;
}

ColorBlendAdvancedEXT :: struct {
    advancedBlendOp:  BlendOp;
    srcPremultiplied: Bool32;
    dstPremultiplied: Bool32;
    blendOverlap:     BlendOverlapEXT;
    clampResults:     Bool32;
}

PFN_vkCmdSetTessellationDomainOriginEXT :: #type (commandBuffer: CommandBuffer, domainOrigin: TessellationDomainOrigin) -> void #c_call;
PFN_vkCmdSetDepthClampEnableEXT :: #type (commandBuffer: CommandBuffer, depthClampEnable: Bool32) -> void #c_call;
PFN_vkCmdSetPolygonModeEXT :: #type (commandBuffer: CommandBuffer, polygonMode: PolygonMode) -> void #c_call;
PFN_vkCmdSetRasterizationSamplesEXT :: #type (commandBuffer: CommandBuffer, rasterizationSamples: SampleCountFlagBits) -> void #c_call;
PFN_vkCmdSetSampleMaskEXT :: #type (commandBuffer: CommandBuffer, samples: SampleCountFlagBits, pSampleMask: *SampleMask) -> void #c_call;
PFN_vkCmdSetAlphaToCoverageEnableEXT :: #type (commandBuffer: CommandBuffer, alphaToCoverageEnable: Bool32) -> void #c_call;
PFN_vkCmdSetAlphaToOneEnableEXT :: #type (commandBuffer: CommandBuffer, alphaToOneEnable: Bool32) -> void #c_call;
PFN_vkCmdSetLogicOpEnableEXT :: #type (commandBuffer: CommandBuffer, logicOpEnable: Bool32) -> void #c_call;
PFN_vkCmdSetColorBlendEnableEXT :: #type (commandBuffer: CommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendEnables: *Bool32) -> void #c_call;
PFN_vkCmdSetColorBlendEquationEXT :: #type (commandBuffer: CommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendEquations: *ColorBlendEquationEXT) -> void #c_call;
PFN_vkCmdSetColorWriteMaskEXT :: #type (commandBuffer: CommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorWriteMasks: *ColorComponentFlags) -> void #c_call;
PFN_vkCmdSetRasterizationStreamEXT :: #type (commandBuffer: CommandBuffer, rasterizationStream: u32) -> void #c_call;
PFN_vkCmdSetConservativeRasterizationModeEXT :: #type (commandBuffer: CommandBuffer, conservativeRasterizationMode: ConservativeRasterizationModeEXT) -> void #c_call;
PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT :: #type (commandBuffer: CommandBuffer, extraPrimitiveOverestimationSize: float) -> void #c_call;
PFN_vkCmdSetDepthClipEnableEXT :: #type (commandBuffer: CommandBuffer, depthClipEnable: Bool32) -> void #c_call;
PFN_vkCmdSetSampleLocationsEnableEXT :: #type (commandBuffer: CommandBuffer, sampleLocationsEnable: Bool32) -> void #c_call;
PFN_vkCmdSetColorBlendAdvancedEXT :: #type (commandBuffer: CommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendAdvanced: *ColorBlendAdvancedEXT) -> void #c_call;
PFN_vkCmdSetProvokingVertexModeEXT :: #type (commandBuffer: CommandBuffer, provokingVertexMode: ProvokingVertexModeEXT) -> void #c_call;
PFN_vkCmdSetLineRasterizationModeEXT :: #type (commandBuffer: CommandBuffer, lineRasterizationMode: LineRasterizationModeEXT) -> void #c_call;
PFN_vkCmdSetLineStippleEnableEXT :: #type (commandBuffer: CommandBuffer, stippledLineEnable: Bool32) -> void #c_call;
PFN_vkCmdSetDepthClipNegativeOneToOneEXT :: #type (commandBuffer: CommandBuffer, negativeOneToOne: Bool32) -> void #c_call;
PFN_vkCmdSetViewportWScalingEnableNV :: #type (commandBuffer: CommandBuffer, viewportWScalingEnable: Bool32) -> void #c_call;
PFN_vkCmdSetViewportSwizzleNV :: #type (commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewportSwizzles: *ViewportSwizzleNV) -> void #c_call;
PFN_vkCmdSetCoverageToColorEnableNV :: #type (commandBuffer: CommandBuffer, coverageToColorEnable: Bool32) -> void #c_call;
PFN_vkCmdSetCoverageToColorLocationNV :: #type (commandBuffer: CommandBuffer, coverageToColorLocation: u32) -> void #c_call;
PFN_vkCmdSetCoverageModulationModeNV :: #type (commandBuffer: CommandBuffer, coverageModulationMode: CoverageModulationModeNV) -> void #c_call;
PFN_vkCmdSetCoverageModulationTableEnableNV :: #type (commandBuffer: CommandBuffer, coverageModulationTableEnable: Bool32) -> void #c_call;
PFN_vkCmdSetCoverageModulationTableNV :: #type (commandBuffer: CommandBuffer, coverageModulationTableCount: u32, pCoverageModulationTable: *float) -> void #c_call;
PFN_vkCmdSetShadingRateImageEnableNV :: #type (commandBuffer: CommandBuffer, shadingRateImageEnable: Bool32) -> void #c_call;
PFN_vkCmdSetRepresentativeFragmentTestEnableNV :: #type (commandBuffer: CommandBuffer, representativeFragmentTestEnable: Bool32) -> void #c_call;
PFN_vkCmdSetCoverageReductionModeNV :: #type (commandBuffer: CommandBuffer, coverageReductionMode: CoverageReductionModeNV) -> void #c_call;

CmdSetTessellationDomainOriginEXT: #type (commandBuffer: CommandBuffer, domainOrigin: TessellationDomainOrigin) -> void #c_call;

CmdSetDepthClampEnableEXT: #type (commandBuffer: CommandBuffer, depthClampEnable: Bool32) -> void #c_call;

CmdSetPolygonModeEXT: #type (commandBuffer: CommandBuffer, polygonMode: PolygonMode) -> void #c_call;

CmdSetRasterizationSamplesEXT: #type (commandBuffer: CommandBuffer, rasterizationSamples: SampleCountFlagBits) -> void #c_call;

CmdSetSampleMaskEXT: #type (commandBuffer: CommandBuffer, samples: SampleCountFlagBits, pSampleMask: *SampleMask) -> void #c_call;

CmdSetAlphaToCoverageEnableEXT: #type (commandBuffer: CommandBuffer, alphaToCoverageEnable: Bool32) -> void #c_call;

CmdSetAlphaToOneEnableEXT: #type (commandBuffer: CommandBuffer, alphaToOneEnable: Bool32) -> void #c_call;

CmdSetLogicOpEnableEXT: #type (commandBuffer: CommandBuffer, logicOpEnable: Bool32) -> void #c_call;

CmdSetColorBlendEnableEXT: #type (commandBuffer: CommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendEnables: *Bool32) -> void #c_call;

CmdSetColorBlendEquationEXT: #type (commandBuffer: CommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendEquations: *ColorBlendEquationEXT) -> void #c_call;

CmdSetColorWriteMaskEXT: #type (commandBuffer: CommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorWriteMasks: *ColorComponentFlags) -> void #c_call;

CmdSetRasterizationStreamEXT: #type (commandBuffer: CommandBuffer, rasterizationStream: u32) -> void #c_call;

CmdSetConservativeRasterizationModeEXT: #type (commandBuffer: CommandBuffer, conservativeRasterizationMode: ConservativeRasterizationModeEXT) -> void #c_call;

CmdSetExtraPrimitiveOverestimationSizeEXT: #type (commandBuffer: CommandBuffer, extraPrimitiveOverestimationSize: float) -> void #c_call;

CmdSetDepthClipEnableEXT: #type (commandBuffer: CommandBuffer, depthClipEnable: Bool32) -> void #c_call;

CmdSetSampleLocationsEnableEXT: #type (commandBuffer: CommandBuffer, sampleLocationsEnable: Bool32) -> void #c_call;

CmdSetColorBlendAdvancedEXT: #type (commandBuffer: CommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendAdvanced: *ColorBlendAdvancedEXT) -> void #c_call;

CmdSetProvokingVertexModeEXT: #type (commandBuffer: CommandBuffer, provokingVertexMode: ProvokingVertexModeEXT) -> void #c_call;

CmdSetLineRasterizationModeEXT: #type (commandBuffer: CommandBuffer, lineRasterizationMode: LineRasterizationModeEXT) -> void #c_call;

CmdSetLineStippleEnableEXT: #type (commandBuffer: CommandBuffer, stippledLineEnable: Bool32) -> void #c_call;

CmdSetDepthClipNegativeOneToOneEXT: #type (commandBuffer: CommandBuffer, negativeOneToOne: Bool32) -> void #c_call;

CmdSetViewportWScalingEnableNV: #type (commandBuffer: CommandBuffer, viewportWScalingEnable: Bool32) -> void #c_call;

CmdSetViewportSwizzleNV: #type (commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewportSwizzles: *ViewportSwizzleNV) -> void #c_call;

CmdSetCoverageToColorEnableNV: #type (commandBuffer: CommandBuffer, coverageToColorEnable: Bool32) -> void #c_call;

CmdSetCoverageToColorLocationNV: #type (commandBuffer: CommandBuffer, coverageToColorLocation: u32) -> void #c_call;

CmdSetCoverageModulationModeNV: #type (commandBuffer: CommandBuffer, coverageModulationMode: CoverageModulationModeNV) -> void #c_call;

CmdSetCoverageModulationTableEnableNV: #type (commandBuffer: CommandBuffer, coverageModulationTableEnable: Bool32) -> void #c_call;

CmdSetCoverageModulationTableNV: #type (commandBuffer: CommandBuffer, coverageModulationTableCount: u32, pCoverageModulationTable: *float) -> void #c_call;

CmdSetShadingRateImageEnableNV: #type (commandBuffer: CommandBuffer, shadingRateImageEnable: Bool32) -> void #c_call;

CmdSetRepresentativeFragmentTestEnableNV: #type (commandBuffer: CommandBuffer, representativeFragmentTestEnable: Bool32) -> void #c_call;

CmdSetCoverageReductionModeNV: #type (commandBuffer: CommandBuffer, coverageReductionMode: CoverageReductionModeNV) -> void #c_call;

SubpassMergeStatusEXT :: enum u32 {
    MERGED_EXT                                   :: 0;
    DISALLOWED_EXT                               :: 1;
    NOT_MERGED_SIDE_EFFECTS_EXT                  :: 2;
    NOT_MERGED_SAMPLES_MISMATCH_EXT              :: 3;
    NOT_MERGED_VIEWS_MISMATCH_EXT                :: 4;
    NOT_MERGED_ALIASING_EXT                      :: 5;
    NOT_MERGED_DEPENDENCIES_EXT                  :: 6;
    NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT :: 7;
    NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT          :: 8;
    NOT_MERGED_INSUFFICIENT_STORAGE_EXT          :: 9;
    NOT_MERGED_DEPTH_STENCIL_COUNT_EXT           :: 10;
    NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT      :: 11;
    NOT_MERGED_SINGLE_SUBPASS_EXT                :: 12;
    NOT_MERGED_UNSPECIFIED_EXT                   :: 13;
    MAX_ENUM_EXT                                 :: 2147483647;

    VK_SUBPASS_MERGE_STATUS_MERGED_EXT                                   :: MERGED_EXT;
    VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT                               :: DISALLOWED_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT                  :: NOT_MERGED_SIDE_EFFECTS_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT              :: NOT_MERGED_SAMPLES_MISMATCH_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT                :: NOT_MERGED_VIEWS_MISMATCH_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT                      :: NOT_MERGED_ALIASING_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT                  :: NOT_MERGED_DEPENDENCIES_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT :: NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT          :: NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT          :: NOT_MERGED_INSUFFICIENT_STORAGE_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT           :: NOT_MERGED_DEPTH_STENCIL_COUNT_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT      :: NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT                :: NOT_MERGED_SINGLE_SUBPASS_EXT;
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT                   :: NOT_MERGED_UNSPECIFIED_EXT;
    VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT                                 :: MAX_ENUM_EXT;
}

PhysicalDeviceSubpassMergeFeedbackFeaturesEXT :: struct {
    sType:                StructureType = .PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT;
    pNext:                *void;
    subpassMergeFeedback: Bool32;
}

RenderPassCreationControlEXT :: struct {
    sType:           StructureType = .RENDER_PASS_CREATION_CONTROL_EXT;
    pNext:           *void;
    disallowMerging: Bool32;
}

RenderPassCreationFeedbackInfoEXT :: struct {
    postMergeSubpassCount: u32;
}

RenderPassCreationFeedbackCreateInfoEXT :: struct {
    sType:               StructureType = .RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT;
    pNext:               *void;
    pRenderPassFeedback: *RenderPassCreationFeedbackInfoEXT;
}

RenderPassSubpassFeedbackInfoEXT :: struct {
    subpassMergeStatus: SubpassMergeStatusEXT;
    description:        [256] u8;
    postMergeIndex:     u32;
}

RenderPassSubpassFeedbackCreateInfoEXT :: struct {
    sType:            StructureType = .RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT;
    pNext:            *void;
    pSubpassFeedback: *RenderPassSubpassFeedbackInfoEXT;
}

DirectDriverLoadingModeLUNARG :: enum u32 {
    EXCLUSIVE_LUNARG :: 0;
    INCLUSIVE_LUNARG :: 1;
    MAX_ENUM_LUNARG  :: 2147483647;

    VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG :: EXCLUSIVE_LUNARG;
    VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG :: INCLUSIVE_LUNARG;
    VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG  :: MAX_ENUM_LUNARG;
}

DirectDriverLoadingFlagsLUNARG :: Flags;
PFN_vkGetInstanceProcAddrLUNARG :: #type (instance: Instance, pName: *u8) -> PFN_vkVoidFunction #c_call;

DirectDriverLoadingInfoLUNARG :: struct {
    sType:                  StructureType = .DIRECT_DRIVER_LOADING_INFO_LUNARG;
    pNext:                  *void;
    flags:                  DirectDriverLoadingFlagsLUNARG;
    pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddrLUNARG;
}

DirectDriverLoadingListLUNARG :: struct {
    sType:       StructureType = .DIRECT_DRIVER_LOADING_LIST_LUNARG;
    pNext:       *void;
    mode:        DirectDriverLoadingModeLUNARG;
    driverCount: u32;
    pDrivers:    *DirectDriverLoadingInfoLUNARG;
}

PhysicalDeviceShaderModuleIdentifierFeaturesEXT :: struct {
    sType:                  StructureType = .PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT;
    pNext:                  *void;
    shaderModuleIdentifier: Bool32;
}

PhysicalDeviceShaderModuleIdentifierPropertiesEXT :: struct {
    sType:                               StructureType = .PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT;
    pNext:                               *void;
    shaderModuleIdentifierAlgorithmUUID: [16] u8;
}

PipelineShaderStageModuleIdentifierCreateInfoEXT :: struct {
    sType:          StructureType = .PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT;
    pNext:          *void;
    identifierSize: u32;
    pIdentifier:    *u8;
}

ShaderModuleIdentifierEXT :: struct {
    sType:          StructureType = .SHADER_MODULE_IDENTIFIER_EXT;
    pNext:          *void;
    identifierSize: u32;
    identifier:     [32] u8;
}

PFN_vkGetShaderModuleIdentifierEXT :: #type (device: Device, shaderModule: ShaderModule, pIdentifier: *ShaderModuleIdentifierEXT) -> void #c_call;
PFN_vkGetShaderModuleCreateInfoIdentifierEXT :: #type (device: Device, pCreateInfo: *ShaderModuleCreateInfo, pIdentifier: *ShaderModuleIdentifierEXT) -> void #c_call;

GetShaderModuleIdentifierEXT: #type (device: Device, shaderModule: ShaderModule, pIdentifier: *ShaderModuleIdentifierEXT) -> void #c_call;

GetShaderModuleCreateInfoIdentifierEXT: #type (device: Device, pCreateInfo: *ShaderModuleCreateInfo, pIdentifier: *ShaderModuleIdentifierEXT) -> void #c_call;

OpticalFlowSessionNV_T :: struct {}
OpticalFlowSessionNV :: *OpticalFlowSessionNV_T;

OpticalFlowPerformanceLevelNV :: enum u32 {
    UNKNOWN_NV  :: 0;
    SLOW_NV     :: 1;
    MEDIUM_NV   :: 2;
    FAST_NV     :: 3;
    MAX_ENUM_NV :: 2147483647;

    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV  :: UNKNOWN_NV;
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV     :: SLOW_NV;
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV   :: MEDIUM_NV;
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV     :: FAST_NV;
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV :: MAX_ENUM_NV;
}

OpticalFlowSessionBindingPointNV :: enum u32 {
    UNKNOWN_NV              :: 0;
    INPUT_NV                :: 1;
    REFERENCE_NV            :: 2;
    HINT_NV                 :: 3;
    FLOW_VECTOR_NV          :: 4;
    BACKWARD_FLOW_VECTOR_NV :: 5;
    COST_NV                 :: 6;
    BACKWARD_COST_NV        :: 7;
    GLOBAL_FLOW_NV          :: 8;
    MAX_ENUM_NV             :: 2147483647;

    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV              :: UNKNOWN_NV;
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV                :: INPUT_NV;
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV            :: REFERENCE_NV;
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV                 :: HINT_NV;
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV          :: FLOW_VECTOR_NV;
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV :: BACKWARD_FLOW_VECTOR_NV;
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV                 :: COST_NV;
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV        :: BACKWARD_COST_NV;
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV          :: GLOBAL_FLOW_NV;
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV             :: MAX_ENUM_NV;
}

OpticalFlowGridSizeFlagBitsNV :: enum_flags u32 {
    UNKNOWN_NV            :: 0x0;
    _1X1_NV               :: 0x1;
    _2X2_NV               :: 0x2;
    _4X4_NV               :: 0x4;
    _8X8_NV               :: 0x8;
    FLAG_BITS_MAX_ENUM_NV :: 0x7fffffff;

    VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV            :: UNKNOWN_NV;
    VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV            :: _1X1_NV;
    VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV            :: _2X2_NV;
    VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV            :: _4X4_NV;
    VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV            :: _8X8_NV;
    VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV :: FLAG_BITS_MAX_ENUM_NV;
}

OpticalFlowGridSizeFlagsNV :: OpticalFlowGridSizeFlagBitsNV;

OpticalFlowUsageFlagBitsNV :: enum_flags u32 {
    UNKNOWN_NV            :: 0x0;
    INPUT_NV              :: 0x1;
    OUTPUT_NV             :: 0x2;
    HINT_NV               :: 0x4;
    COST_NV               :: 0x8;
    GLOBAL_FLOW_NV        :: 0x10;
    FLAG_BITS_MAX_ENUM_NV :: 0x7fffffff;

    VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV            :: UNKNOWN_NV;
    VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV          :: INPUT_NV;
    VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV         :: OUTPUT_NV;
    VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV           :: HINT_NV;
    VK_OPTICAL_FLOW_USAGE_COST_BIT_NV           :: COST_NV;
    VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV    :: GLOBAL_FLOW_NV;
    VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV :: FLAG_BITS_MAX_ENUM_NV;
}

OpticalFlowUsageFlagsNV :: OpticalFlowUsageFlagBitsNV;

OpticalFlowSessionCreateFlagBitsNV :: enum_flags u32 {
    ENABLE_HINT_NV        :: 0x1;
    ENABLE_COST_NV        :: 0x2;
    ENABLE_GLOBAL_FLOW_NV :: 0x4;
    ALLOW_REGIONS_NV      :: 0x8;
    BOTH_DIRECTIONS_NV    :: 0x10;
    FLAG_BITS_MAX_ENUM_NV :: 0x7fffffff;

    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV        :: ENABLE_HINT_NV;
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV        :: ENABLE_COST_NV;
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV :: ENABLE_GLOBAL_FLOW_NV;
    VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV      :: ALLOW_REGIONS_NV;
    VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV    :: BOTH_DIRECTIONS_NV;
    VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV     :: FLAG_BITS_MAX_ENUM_NV;
}

OpticalFlowSessionCreateFlagsNV :: OpticalFlowSessionCreateFlagBitsNV;

OpticalFlowExecuteFlagBitsNV :: enum_flags u32 {
    DISABLE_TEMPORAL_HINTS_NV :: 0x1;
    FLAG_BITS_MAX_ENUM_NV     :: 0x7fffffff;

    VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV :: DISABLE_TEMPORAL_HINTS_NV;
    VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV         :: FLAG_BITS_MAX_ENUM_NV;
}

OpticalFlowExecuteFlagsNV :: OpticalFlowExecuteFlagBitsNV;
PhysicalDeviceOpticalFlowFeaturesNV :: struct {
    sType:       StructureType = .PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV;
    pNext:       *void;
    opticalFlow: Bool32;
}

PhysicalDeviceOpticalFlowPropertiesNV :: struct {
    sType:                      StructureType = .PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV;
    pNext:                      *void;
    supportedOutputGridSizes:   OpticalFlowGridSizeFlagsNV;
    supportedHintGridSizes:     OpticalFlowGridSizeFlagsNV;
    hintSupported:              Bool32;
    costSupported:              Bool32;
    bidirectionalFlowSupported: Bool32;
    globalFlowSupported:        Bool32;
    minWidth:                   u32;
    minHeight:                  u32;
    maxWidth:                   u32;
    maxHeight:                  u32;
    maxNumRegionsOfInterest:    u32;
}

OpticalFlowImageFormatInfoNV :: struct {
    sType: StructureType = .OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV;
    pNext: *void;
    usage: OpticalFlowUsageFlagsNV;
}

OpticalFlowImageFormatPropertiesNV :: struct {
    sType:  StructureType = .OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV;
    pNext:  *void;
    format: Format;
}

OpticalFlowSessionCreateInfoNV :: struct {
    sType:            StructureType = .OPTICAL_FLOW_SESSION_CREATE_INFO_NV;
    pNext:            *void;
    width:            u32;
    height:           u32;
    imageFormat:      Format;
    flowVectorFormat: Format;
    costFormat:       Format;
    outputGridSize:   OpticalFlowGridSizeFlagsNV;
    hintGridSize:     OpticalFlowGridSizeFlagsNV;
    performanceLevel: OpticalFlowPerformanceLevelNV;
    flags:            OpticalFlowSessionCreateFlagsNV;
}

OpticalFlowSessionCreatePrivateDataInfoNV :: struct {
    sType:        StructureType = .OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV;
    pNext:        *void;
    id:           u32;
    size:         u32;
    pPrivateData: *void;
}

OpticalFlowExecuteInfoNV :: struct {
    sType:       StructureType = .OPTICAL_FLOW_EXECUTE_INFO_NV;
    pNext:       *void;
    flags:       OpticalFlowExecuteFlagsNV;
    regionCount: u32;
    pRegions:    *Rect2D;
}

PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV :: #type (physicalDevice: PhysicalDevice, pOpticalFlowImageFormatInfo: *OpticalFlowImageFormatInfoNV, pFormatCount: *u32, pImageFormatProperties: *OpticalFlowImageFormatPropertiesNV) -> Result #c_call;
PFN_vkCreateOpticalFlowSessionNV :: #type (device: Device, pCreateInfo: *OpticalFlowSessionCreateInfoNV, pAllocator: *AllocationCallbacks, pSession: *OpticalFlowSessionNV) -> Result #c_call;
PFN_vkDestroyOpticalFlowSessionNV :: #type (device: Device, session: OpticalFlowSessionNV, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkBindOpticalFlowSessionImageNV :: #type (device: Device, session: OpticalFlowSessionNV, bindingPoint: OpticalFlowSessionBindingPointNV, view: ImageView, layout: ImageLayout) -> Result #c_call;
PFN_vkCmdOpticalFlowExecuteNV :: #type (commandBuffer: CommandBuffer, session: OpticalFlowSessionNV, pExecuteInfo: *OpticalFlowExecuteInfoNV) -> void #c_call;

GetPhysicalDeviceOpticalFlowImageFormatsNV: #type (physicalDevice: PhysicalDevice, pOpticalFlowImageFormatInfo: *OpticalFlowImageFormatInfoNV, pFormatCount: *u32, pImageFormatProperties: *OpticalFlowImageFormatPropertiesNV) -> Result #c_call;

CreateOpticalFlowSessionNV: #type (device: Device, pCreateInfo: *OpticalFlowSessionCreateInfoNV, pAllocator: *AllocationCallbacks, pSession: *OpticalFlowSessionNV) -> Result #c_call;

DestroyOpticalFlowSessionNV: #type (device: Device, session: OpticalFlowSessionNV, pAllocator: *AllocationCallbacks) -> void #c_call;

BindOpticalFlowSessionImageNV: #type (device: Device, session: OpticalFlowSessionNV, bindingPoint: OpticalFlowSessionBindingPointNV, view: ImageView, layout: ImageLayout) -> Result #c_call;

CmdOpticalFlowExecuteNV: #type (commandBuffer: CommandBuffer, session: OpticalFlowSessionNV, pExecuteInfo: *OpticalFlowExecuteInfoNV) -> void #c_call;

PhysicalDeviceLegacyDitheringFeaturesEXT :: struct {
    sType:           StructureType = .PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT;
    pNext:           *void;
    legacyDithering: Bool32;
}

PhysicalDevicePipelineProtectedAccessFeaturesEXT :: struct {
    sType:                   StructureType = .PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT;
    pNext:                   *void;
    pipelineProtectedAccess: Bool32;
}

ShaderEXT_T :: struct {}
ShaderEXT :: *ShaderEXT_T;

ShaderCodeTypeEXT :: enum u32 {
    BINARY_EXT   :: 0;
    SPIRV_EXT    :: 1;
    MAX_ENUM_EXT :: 2147483647;

    VK_SHADER_CODE_TYPE_BINARY_EXT   :: BINARY_EXT;
    VK_SHADER_CODE_TYPE_SPIRV_EXT    :: SPIRV_EXT;
    VK_SHADER_CODE_TYPE_MAX_ENUM_EXT :: MAX_ENUM_EXT;
}

ShaderCreateFlagBitsEXT :: enum_flags u32 {
    LINK_STAGE_EXT                       :: 0x1;
    ALLOW_VARYING_SUBGROUP_SIZE_EXT      :: 0x2;
    REQUIRE_FULL_SUBGROUPS_EXT           :: 0x4;
    NO_TASK_SHADER_EXT                   :: 0x8;
    DISPATCH_BASE_EXT                    :: 0x10;
    FRAGMENT_SHADING_RATE_ATTACHMENT_EXT :: 0x20;
    FRAGMENT_DENSITY_MAP_ATTACHMENT_EXT  :: 0x40;
    FLAG_BITS_MAX_ENUM_EXT               :: 0x7fffffff;

    VK_SHADER_CREATE_LINK_STAGE_BIT_EXT                       :: LINK_STAGE_EXT;
    VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT      :: ALLOW_VARYING_SUBGROUP_SIZE_EXT;
    VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT           :: REQUIRE_FULL_SUBGROUPS_EXT;
    VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT                   :: NO_TASK_SHADER_EXT;
    VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT                    :: DISPATCH_BASE_EXT;
    VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT :: FRAGMENT_SHADING_RATE_ATTACHMENT_EXT;
    VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT  :: FRAGMENT_DENSITY_MAP_ATTACHMENT_EXT;
    VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT                   :: FLAG_BITS_MAX_ENUM_EXT;
}

ShaderCreateFlagsEXT :: ShaderCreateFlagBitsEXT;
PhysicalDeviceShaderObjectFeaturesEXT :: struct {
    sType:        StructureType = .PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT;
    pNext:        *void;
    shaderObject: Bool32;
}

PhysicalDeviceShaderObjectPropertiesEXT :: struct {
    sType:               StructureType = .PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT;
    pNext:               *void;
    shaderBinaryUUID:    [16] u8;
    shaderBinaryVersion: u32;
}

ShaderCreateInfoEXT :: struct {
    sType:                  StructureType = .SHADER_CREATE_INFO_EXT;
    pNext:                  *void;
    flags:                  ShaderCreateFlagsEXT;
    stage:                  ShaderStageFlagBits;
    nextStage:              ShaderStageFlags;
    codeType:               ShaderCodeTypeEXT;
    codeSize:               u64;
    pCode:                  *void;
    pName:                  *u8;
    setLayoutCount:         u32;
    pSetLayouts:            *DescriptorSetLayout;
    pushConstantRangeCount: u32;
    pPushConstantRanges:    *PushConstantRange;
    pSpecializationInfo:    *SpecializationInfo;
}

ShaderRequiredSubgroupSizeCreateInfoEXT :: PipelineShaderStageRequiredSubgroupSizeCreateInfo;

PFN_vkCreateShadersEXT :: #type (device: Device, createInfoCount: u32, pCreateInfos: *ShaderCreateInfoEXT, pAllocator: *AllocationCallbacks, pShaders: *ShaderEXT) -> Result #c_call;
PFN_vkDestroyShaderEXT :: #type (device: Device, shader: ShaderEXT, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkGetShaderBinaryDataEXT :: #type (device: Device, shader: ShaderEXT, pDataSize: *u64, pData: *void) -> Result #c_call;
PFN_vkCmdBindShadersEXT :: #type (commandBuffer: CommandBuffer, stageCount: u32, pStages: *ShaderStageFlagBits, pShaders: *ShaderEXT) -> void #c_call;

CreateShadersEXT: #type (device: Device, createInfoCount: u32, pCreateInfos: *ShaderCreateInfoEXT, pAllocator: *AllocationCallbacks, pShaders: *ShaderEXT) -> Result #c_call;

DestroyShaderEXT: #type (device: Device, shader: ShaderEXT, pAllocator: *AllocationCallbacks) -> void #c_call;

GetShaderBinaryDataEXT: #type (device: Device, shader: ShaderEXT, pDataSize: *u64, pData: *void) -> Result #c_call;

CmdBindShadersEXT: #type (commandBuffer: CommandBuffer, stageCount: u32, pStages: *ShaderStageFlagBits, pShaders: *ShaderEXT) -> void #c_call;

PhysicalDeviceTilePropertiesFeaturesQCOM :: struct {
    sType:          StructureType = .PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM;
    pNext:          *void;
    tileProperties: Bool32;
}

TilePropertiesQCOM :: struct {
    sType:     StructureType = .TILE_PROPERTIES_QCOM;
    pNext:     *void;
    tileSize:  Extent3D;
    apronSize: Extent2D;
    origin:    Offset2D;
}

PFN_vkGetFramebufferTilePropertiesQCOM :: #type (device: Device, framebuffer: Framebuffer, pPropertiesCount: *u32, pProperties: *TilePropertiesQCOM) -> Result #c_call;
PFN_vkGetDynamicRenderingTilePropertiesQCOM :: #type (device: Device, pRenderingInfo: *RenderingInfo, pProperties: *TilePropertiesQCOM) -> Result #c_call;

GetFramebufferTilePropertiesQCOM: #type (device: Device, framebuffer: Framebuffer, pPropertiesCount: *u32, pProperties: *TilePropertiesQCOM) -> Result #c_call;

GetDynamicRenderingTilePropertiesQCOM: #type (device: Device, pRenderingInfo: *RenderingInfo, pProperties: *TilePropertiesQCOM) -> Result #c_call;

PhysicalDeviceAmigoProfilingFeaturesSEC :: struct {
    sType:          StructureType = .PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC;
    pNext:          *void;
    amigoProfiling: Bool32;
}

AmigoProfilingSubmitInfoSEC :: struct {
    sType:               StructureType = .AMIGO_PROFILING_SUBMIT_INFO_SEC;
    pNext:               *void;
    firstDrawTimestamp:  u64;
    swapBufferTimestamp: u64;
}

PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM :: struct {
    sType:                     StructureType = .PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM;
    pNext:                     *void;
    multiviewPerViewViewports: Bool32;
}

RayTracingInvocationReorderModeNV :: enum u32 {
    NONE_NV     :: 0;
    REORDER_NV  :: 1;
    MAX_ENUM_NV :: 2147483647;

    VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV     :: NONE_NV;
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV  :: REORDER_NV;
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV :: MAX_ENUM_NV;
}

PhysicalDeviceRayTracingInvocationReorderPropertiesNV :: struct {
    sType:                                     StructureType = .PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV;
    pNext:                                     *void;
    rayTracingInvocationReorderReorderingHint: RayTracingInvocationReorderModeNV;
}

PhysicalDeviceRayTracingInvocationReorderFeaturesNV :: struct {
    sType:                       StructureType = .PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV;
    pNext:                       *void;
    rayTracingInvocationReorder: Bool32;
}

PhysicalDeviceShaderCoreBuiltinsFeaturesARM :: struct {
    sType:              StructureType = .PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM;
    pNext:              *void;
    shaderCoreBuiltins: Bool32;
}

PhysicalDeviceShaderCoreBuiltinsPropertiesARM :: struct {
    sType:              StructureType = .PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM;
    pNext:              *void;
    shaderCoreMask:     u64;
    shaderCoreCount:    u32;
    shaderWarpsPerCore: u32;
}

PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT :: struct {
    sType:                       StructureType = .PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT;
    pNext:                       *void;
    pipelineLibraryGroupHandles: Bool32;
}

PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM :: struct {
    sType:                       StructureType = .PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM;
    pNext:                       *void;
    multiviewPerViewRenderAreas: Bool32;
}

MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM :: struct {
    sType:                  StructureType = .MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM;
    pNext:                  *void;
    perViewRenderAreaCount: u32;
    pPerViewRenderAreas:    *Rect2D;
}

PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT :: struct {
    sType:                              StructureType = .PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT;
    pNext:                              *void;
    attachmentFeedbackLoopDynamicState: Bool32;
}

PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT :: #type (commandBuffer: CommandBuffer, aspectMask: ImageAspectFlags) -> void #c_call;

CmdSetAttachmentFeedbackLoopEnableEXT: #type (commandBuffer: CommandBuffer, aspectMask: ImageAspectFlags) -> void #c_call;

BuildAccelerationStructureModeKHR :: enum u32 {
    BUILD_KHR    :: 0;
    UPDATE_KHR   :: 1;
    MAX_ENUM_KHR :: 2147483647;

    VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR    :: BUILD_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR   :: UPDATE_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR :: MAX_ENUM_KHR;
}

AccelerationStructureCreateFlagBitsKHR :: enum_flags u32 {
    DEVICE_ADDRESS_CAPTURE_REPLAY_KHR    :: 0x1;
    DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT :: 0x8;
    MOTION_NV                            :: 0x4;
    FLAG_BITS_MAX_ENUM_KHR               :: 0x7fffffff;

    VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR    :: DEVICE_ADDRESS_CAPTURE_REPLAY_KHR;
    VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT :: DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT;
    VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV                            :: MOTION_NV;
    VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR                   :: FLAG_BITS_MAX_ENUM_KHR;
}

AccelerationStructureCreateFlagsKHR :: AccelerationStructureCreateFlagBitsKHR;
AccelerationStructureBuildRangeInfoKHR :: struct {
    primitiveCount:  u32;
    primitiveOffset: u32;
    firstVertex:     u32;
    transformOffset: u32;
}

AccelerationStructureGeometryTrianglesDataKHR :: struct {
    sType:         StructureType = .ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;
    pNext:         *void;
    vertexFormat:  Format;
    vertexData:    DeviceOrHostAddressConstKHR;
    vertexStride:  DeviceSize;
    maxVertex:     u32;
    indexType:     IndexType;
    indexData:     DeviceOrHostAddressConstKHR;
    transformData: DeviceOrHostAddressConstKHR;
}

AccelerationStructureGeometryAabbsDataKHR :: struct {
    sType:  StructureType = .ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR;
    pNext:  *void;
    data:   DeviceOrHostAddressConstKHR;
    stride: DeviceSize;
}

AccelerationStructureGeometryInstancesDataKHR :: struct {
    sType:           StructureType = .ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR;
    pNext:           *void;
    arrayOfPointers: Bool32;
    data:            DeviceOrHostAddressConstKHR;
}

AccelerationStructureGeometryDataKHR :: union {
    triangles: AccelerationStructureGeometryTrianglesDataKHR;
    aabbs:     AccelerationStructureGeometryAabbsDataKHR;
    instances: AccelerationStructureGeometryInstancesDataKHR;
}

AccelerationStructureGeometryKHR :: struct {
    sType:        StructureType = .ACCELERATION_STRUCTURE_GEOMETRY_KHR;
    pNext:        *void;
    geometryType: GeometryTypeKHR;
    geometry:     AccelerationStructureGeometryDataKHR;
    flags:        GeometryFlagsKHR;
}

AccelerationStructureBuildGeometryInfoKHR :: struct {
    sType:                    StructureType = .ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR;
    pNext:                    *void;
    type:                     AccelerationStructureTypeKHR;
    flags:                    BuildAccelerationStructureFlagsKHR;
    mode:                     BuildAccelerationStructureModeKHR;
    srcAccelerationStructure: AccelerationStructureKHR;
    dstAccelerationStructure: AccelerationStructureKHR;
    geometryCount:            u32;
    pGeometries:              *AccelerationStructureGeometryKHR;
    ppGeometries:             **AccelerationStructureGeometryKHR;
    scratchData:              DeviceOrHostAddressKHR;
}

AccelerationStructureCreateInfoKHR :: struct {
    sType:         StructureType = .ACCELERATION_STRUCTURE_CREATE_INFO_KHR;
    pNext:         *void;
    createFlags:   AccelerationStructureCreateFlagsKHR;
    buffer:        Buffer;
    offset:        DeviceSize;
    size:          DeviceSize;
    type:          AccelerationStructureTypeKHR;
    deviceAddress: DeviceAddress;
}

WriteDescriptorSetAccelerationStructureKHR :: struct {
    sType:                      StructureType = .WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
    pNext:                      *void;
    accelerationStructureCount: u32;
    pAccelerationStructures:    *AccelerationStructureKHR;
}

PhysicalDeviceAccelerationStructureFeaturesKHR :: struct {
    sType:                                                 StructureType = .PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR;
    pNext:                                                 *void;
    accelerationStructure:                                 Bool32;
    accelerationStructureCaptureReplay:                    Bool32;
    accelerationStructureIndirectBuild:                    Bool32;
    accelerationStructureHostCommands:                     Bool32;
    descriptorBindingAccelerationStructureUpdateAfterBind: Bool32;
}

PhysicalDeviceAccelerationStructurePropertiesKHR :: struct {
    sType:                                                      StructureType = .PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR;
    pNext:                                                      *void;
    maxGeometryCount:                                           u64;
    maxInstanceCount:                                           u64;
    maxPrimitiveCount:                                          u64;
    maxPerStageDescriptorAccelerationStructures:                u32;
    maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32;
    maxDescriptorSetAccelerationStructures:                     u32;
    maxDescriptorSetUpdateAfterBindAccelerationStructures:      u32;
    minAccelerationStructureScratchOffsetAlignment:             u32;
}

AccelerationStructureDeviceAddressInfoKHR :: struct {
    sType:                 StructureType = .ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR;
    pNext:                 *void;
    accelerationStructure: AccelerationStructureKHR;
}

AccelerationStructureVersionInfoKHR :: struct {
    sType:        StructureType = .ACCELERATION_STRUCTURE_VERSION_INFO_KHR;
    pNext:        *void;
    pVersionData: *u8;
}

CopyAccelerationStructureToMemoryInfoKHR :: struct {
    sType: StructureType = .COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR;
    pNext: *void;
    src:   AccelerationStructureKHR;
    dst:   DeviceOrHostAddressKHR;
    mode:  CopyAccelerationStructureModeKHR;
}

CopyMemoryToAccelerationStructureInfoKHR :: struct {
    sType: StructureType = .COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR;
    pNext: *void;
    src:   DeviceOrHostAddressConstKHR;
    dst:   AccelerationStructureKHR;
    mode:  CopyAccelerationStructureModeKHR;
}

CopyAccelerationStructureInfoKHR :: struct {
    sType: StructureType = .COPY_ACCELERATION_STRUCTURE_INFO_KHR;
    pNext: *void;
    src:   AccelerationStructureKHR;
    dst:   AccelerationStructureKHR;
    mode:  CopyAccelerationStructureModeKHR;
}

AccelerationStructureBuildSizesInfoKHR :: struct {
    sType:                     StructureType = .ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
    pNext:                     *void;
    accelerationStructureSize: DeviceSize;
    updateScratchSize:         DeviceSize;
    buildScratchSize:          DeviceSize;
}

PFN_vkCreateAccelerationStructureKHR :: #type (device: Device, pCreateInfo: *AccelerationStructureCreateInfoKHR, pAllocator: *AllocationCallbacks, pAccelerationStructure: *AccelerationStructureKHR) -> Result #c_call;
PFN_vkDestroyAccelerationStructureKHR :: #type (device: Device, accelerationStructure: AccelerationStructureKHR, pAllocator: *AllocationCallbacks) -> void #c_call;
PFN_vkCmdBuildAccelerationStructuresKHR :: #type (commandBuffer: CommandBuffer, infoCount: u32, pInfos: *AccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: **AccelerationStructureBuildRangeInfoKHR) -> void #c_call;
PFN_vkCmdBuildAccelerationStructuresIndirectKHR :: #type (commandBuffer: CommandBuffer, infoCount: u32, pInfos: *AccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: *DeviceAddress, pIndirectStrides: *u32, ppMaxPrimitiveCounts: **u32) -> void #c_call;
PFN_vkBuildAccelerationStructuresKHR :: #type (device: Device, deferredOperation: DeferredOperationKHR, infoCount: u32, pInfos: *AccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: **AccelerationStructureBuildRangeInfoKHR) -> Result #c_call;
PFN_vkCopyAccelerationStructureKHR :: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyAccelerationStructureInfoKHR) -> Result #c_call;
PFN_vkCopyAccelerationStructureToMemoryKHR :: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyAccelerationStructureToMemoryInfoKHR) -> Result #c_call;
PFN_vkCopyMemoryToAccelerationStructureKHR :: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyMemoryToAccelerationStructureInfoKHR) -> Result #c_call;
PFN_vkWriteAccelerationStructuresPropertiesKHR :: #type (device: Device, accelerationStructureCount: u32, pAccelerationStructures: *AccelerationStructureKHR, queryType: QueryType, dataSize: u64, pData: *void, stride: u64) -> Result #c_call;
PFN_vkCmdCopyAccelerationStructureKHR :: #type (commandBuffer: CommandBuffer, pInfo: *CopyAccelerationStructureInfoKHR) -> void #c_call;
PFN_vkCmdCopyAccelerationStructureToMemoryKHR :: #type (commandBuffer: CommandBuffer, pInfo: *CopyAccelerationStructureToMemoryInfoKHR) -> void #c_call;
PFN_vkCmdCopyMemoryToAccelerationStructureKHR :: #type (commandBuffer: CommandBuffer, pInfo: *CopyMemoryToAccelerationStructureInfoKHR) -> void #c_call;
PFN_vkGetAccelerationStructureDeviceAddressKHR :: #type (device: Device, pInfo: *AccelerationStructureDeviceAddressInfoKHR) -> DeviceAddress #c_call;
PFN_vkCmdWriteAccelerationStructuresPropertiesKHR :: #type (commandBuffer: CommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: *AccelerationStructureKHR, queryType: QueryType, queryPool: QueryPool, firstQuery: u32) -> void #c_call;
PFN_vkGetDeviceAccelerationStructureCompatibilityKHR :: #type (device: Device, pVersionInfo: *AccelerationStructureVersionInfoKHR, pCompatibility: *AccelerationStructureCompatibilityKHR) -> void #c_call;
PFN_vkGetAccelerationStructureBuildSizesKHR :: #type (device: Device, buildType: AccelerationStructureBuildTypeKHR, pBuildInfo: *AccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: *u32, pSizeInfo: *AccelerationStructureBuildSizesInfoKHR) -> void #c_call;

CreateAccelerationStructureKHR: #type (device: Device, pCreateInfo: *AccelerationStructureCreateInfoKHR, pAllocator: *AllocationCallbacks, pAccelerationStructure: *AccelerationStructureKHR) -> Result #c_call;

DestroyAccelerationStructureKHR: #type (device: Device, accelerationStructure: AccelerationStructureKHR, pAllocator: *AllocationCallbacks) -> void #c_call;

CmdBuildAccelerationStructuresKHR: #type (commandBuffer: CommandBuffer, infoCount: u32, pInfos: *AccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: **AccelerationStructureBuildRangeInfoKHR) -> void #c_call;

CmdBuildAccelerationStructuresIndirectKHR: #type (commandBuffer: CommandBuffer, infoCount: u32, pInfos: *AccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: *DeviceAddress, pIndirectStrides: *u32, ppMaxPrimitiveCounts: **u32) -> void #c_call;

BuildAccelerationStructuresKHR: #type (device: Device, deferredOperation: DeferredOperationKHR, infoCount: u32, pInfos: *AccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: **AccelerationStructureBuildRangeInfoKHR) -> Result #c_call;

CopyAccelerationStructureKHR: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyAccelerationStructureInfoKHR) -> Result #c_call;

CopyAccelerationStructureToMemoryKHR: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyAccelerationStructureToMemoryInfoKHR) -> Result #c_call;

CopyMemoryToAccelerationStructureKHR: #type (device: Device, deferredOperation: DeferredOperationKHR, pInfo: *CopyMemoryToAccelerationStructureInfoKHR) -> Result #c_call;

WriteAccelerationStructuresPropertiesKHR: #type (device: Device, accelerationStructureCount: u32, pAccelerationStructures: *AccelerationStructureKHR, queryType: QueryType, dataSize: u64, pData: *void, stride: u64) -> Result #c_call;

CmdCopyAccelerationStructureKHR: #type (commandBuffer: CommandBuffer, pInfo: *CopyAccelerationStructureInfoKHR) -> void #c_call;

CmdCopyAccelerationStructureToMemoryKHR: #type (commandBuffer: CommandBuffer, pInfo: *CopyAccelerationStructureToMemoryInfoKHR) -> void #c_call;

CmdCopyMemoryToAccelerationStructureKHR: #type (commandBuffer: CommandBuffer, pInfo: *CopyMemoryToAccelerationStructureInfoKHR) -> void #c_call;

GetAccelerationStructureDeviceAddressKHR: #type (device: Device, pInfo: *AccelerationStructureDeviceAddressInfoKHR) -> DeviceAddress #c_call;

CmdWriteAccelerationStructuresPropertiesKHR: #type (commandBuffer: CommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: *AccelerationStructureKHR, queryType: QueryType, queryPool: QueryPool, firstQuery: u32) -> void #c_call;

GetDeviceAccelerationStructureCompatibilityKHR: #type (device: Device, pVersionInfo: *AccelerationStructureVersionInfoKHR, pCompatibility: *AccelerationStructureCompatibilityKHR) -> void #c_call;

GetAccelerationStructureBuildSizesKHR: #type (device: Device, buildType: AccelerationStructureBuildTypeKHR, pBuildInfo: *AccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: *u32, pSizeInfo: *AccelerationStructureBuildSizesInfoKHR) -> void #c_call;

ShaderGroupShaderKHR :: enum u32 {
    GENERAL_KHR      :: 0;
    CLOSEST_HIT_KHR  :: 1;
    ANY_HIT_KHR      :: 2;
    INTERSECTION_KHR :: 3;
    MAX_ENUM_KHR     :: 2147483647;

    VK_SHADER_GROUP_SHADER_GENERAL_KHR      :: GENERAL_KHR;
    VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR  :: CLOSEST_HIT_KHR;
    VK_SHADER_GROUP_SHADER_ANY_HIT_KHR      :: ANY_HIT_KHR;
    VK_SHADER_GROUP_SHADER_INTERSECTION_KHR :: INTERSECTION_KHR;
    VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR     :: MAX_ENUM_KHR;
}

RayTracingShaderGroupCreateInfoKHR :: struct {
    sType:                           StructureType = .RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;
    pNext:                           *void;
    type:                            RayTracingShaderGroupTypeKHR;
    generalShader:                   u32;
    closestHitShader:                u32;
    anyHitShader:                    u32;
    intersectionShader:              u32;
    pShaderGroupCaptureReplayHandle: *void;
}

RayTracingPipelineInterfaceCreateInfoKHR :: struct {
    sType:                          StructureType = .RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR;
    pNext:                          *void;
    maxPipelineRayPayloadSize:      u32;
    maxPipelineRayHitAttributeSize: u32;
}

RayTracingPipelineCreateInfoKHR :: struct {
    sType:                        StructureType = .RAY_TRACING_PIPELINE_CREATE_INFO_KHR;
    pNext:                        *void;
    flags:                        PipelineCreateFlags;
    stageCount:                   u32;
    pStages:                      *PipelineShaderStageCreateInfo;
    groupCount:                   u32;
    pGroups:                      *RayTracingShaderGroupCreateInfoKHR;
    maxPipelineRayRecursionDepth: u32;
    pLibraryInfo:                 *PipelineLibraryCreateInfoKHR;
    pLibraryInterface:            *RayTracingPipelineInterfaceCreateInfoKHR;
    pDynamicState:                *PipelineDynamicStateCreateInfo;
    layout:                       PipelineLayout;
    basePipelineHandle:           Pipeline;
    basePipelineIndex:            s32;
}

PhysicalDeviceRayTracingPipelineFeaturesKHR :: struct {
    sType:                                                 StructureType = .PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR;
    pNext:                                                 *void;
    rayTracingPipeline:                                    Bool32;
    rayTracingPipelineShaderGroupHandleCaptureReplay:      Bool32;
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed: Bool32;
    rayTracingPipelineTraceRaysIndirect:                   Bool32;
    rayTraversalPrimitiveCulling:                          Bool32;
}

PhysicalDeviceRayTracingPipelinePropertiesKHR :: struct {
    sType:                              StructureType = .PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR;
    pNext:                              *void;
    shaderGroupHandleSize:              u32;
    maxRayRecursionDepth:               u32;
    maxShaderGroupStride:               u32;
    shaderGroupBaseAlignment:           u32;
    shaderGroupHandleCaptureReplaySize: u32;
    maxRayDispatchInvocationCount:      u32;
    shaderGroupHandleAlignment:         u32;
    maxRayHitAttributeSize:             u32;
}

StridedDeviceAddressRegionKHR :: struct {
    deviceAddress: DeviceAddress;
    stride:        DeviceSize;
    size:          DeviceSize;
}

TraceRaysIndirectCommandKHR :: struct {
    width:  u32;
    height: u32;
    depth:  u32;
}

PFN_vkCmdTraceRaysKHR :: #type (commandBuffer: CommandBuffer, pRaygenShaderBindingTable: *StridedDeviceAddressRegionKHR, pMissShaderBindingTable: *StridedDeviceAddressRegionKHR, pHitShaderBindingTable: *StridedDeviceAddressRegionKHR, pCallableShaderBindingTable: *StridedDeviceAddressRegionKHR, width: u32, height: u32, depth: u32) -> void #c_call;
PFN_vkCreateRayTracingPipelinesKHR :: #type (device: Device, deferredOperation: DeferredOperationKHR, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: *RayTracingPipelineCreateInfoKHR, pAllocator: *AllocationCallbacks, pPipelines: *Pipeline) -> Result #c_call;
PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR :: #type (device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: u64, pData: *void) -> Result #c_call;
PFN_vkCmdTraceRaysIndirectKHR :: #type (commandBuffer: CommandBuffer, pRaygenShaderBindingTable: *StridedDeviceAddressRegionKHR, pMissShaderBindingTable: *StridedDeviceAddressRegionKHR, pHitShaderBindingTable: *StridedDeviceAddressRegionKHR, pCallableShaderBindingTable: *StridedDeviceAddressRegionKHR, indirectDeviceAddress: DeviceAddress) -> void #c_call;
PFN_vkGetRayTracingShaderGroupStackSizeKHR :: #type (device: Device, pipeline: Pipeline, group: u32, groupShader: ShaderGroupShaderKHR) -> DeviceSize #c_call;
PFN_vkCmdSetRayTracingPipelineStackSizeKHR :: #type (commandBuffer: CommandBuffer, pipelineStackSize: u32) -> void #c_call;

CmdTraceRaysKHR: #type (commandBuffer: CommandBuffer, pRaygenShaderBindingTable: *StridedDeviceAddressRegionKHR, pMissShaderBindingTable: *StridedDeviceAddressRegionKHR, pHitShaderBindingTable: *StridedDeviceAddressRegionKHR, pCallableShaderBindingTable: *StridedDeviceAddressRegionKHR, width: u32, height: u32, depth: u32) -> void #c_call;

CreateRayTracingPipelinesKHR: #type (device: Device, deferredOperation: DeferredOperationKHR, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: *RayTracingPipelineCreateInfoKHR, pAllocator: *AllocationCallbacks, pPipelines: *Pipeline) -> Result #c_call;

GetRayTracingCaptureReplayShaderGroupHandlesKHR: #type (device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: u64, pData: *void) -> Result #c_call;

CmdTraceRaysIndirectKHR: #type (commandBuffer: CommandBuffer, pRaygenShaderBindingTable: *StridedDeviceAddressRegionKHR, pMissShaderBindingTable: *StridedDeviceAddressRegionKHR, pHitShaderBindingTable: *StridedDeviceAddressRegionKHR, pCallableShaderBindingTable: *StridedDeviceAddressRegionKHR, indirectDeviceAddress: DeviceAddress) -> void #c_call;

GetRayTracingShaderGroupStackSizeKHR: #type (device: Device, pipeline: Pipeline, group: u32, groupShader: ShaderGroupShaderKHR) -> DeviceSize #c_call;

CmdSetRayTracingPipelineStackSizeKHR: #type (commandBuffer: CommandBuffer, pipelineStackSize: u32) -> void #c_call;

PhysicalDeviceRayQueryFeaturesKHR :: struct {
    sType:    StructureType = .PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR;
    pNext:    *void;
    rayQuery: Bool32;
}

PhysicalDeviceMeshShaderFeaturesEXT :: struct {
    sType:                                  StructureType = .PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT;
    pNext:                                  *void;
    taskShader:                             Bool32;
    meshShader:                             Bool32;
    multiviewMeshShader:                    Bool32;
    primitiveFragmentShadingRateMeshShader: Bool32;
    meshShaderQueries:                      Bool32;
}

PhysicalDeviceMeshShaderPropertiesEXT :: struct {
    sType:                                 StructureType = .PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT;
    pNext:                                 *void;
    maxTaskWorkGroupTotalCount:            u32;
    maxTaskWorkGroupCount:                 [3] u32;
    maxTaskWorkGroupInvocations:           u32;
    maxTaskWorkGroupSize:                  [3] u32;
    maxTaskPayloadSize:                    u32;
    maxTaskSharedMemorySize:               u32;
    maxTaskPayloadAndSharedMemorySize:     u32;
    maxMeshWorkGroupTotalCount:            u32;
    maxMeshWorkGroupCount:                 [3] u32;
    maxMeshWorkGroupInvocations:           u32;
    maxMeshWorkGroupSize:                  [3] u32;
    maxMeshSharedMemorySize:               u32;
    maxMeshPayloadAndSharedMemorySize:     u32;
    maxMeshOutputMemorySize:               u32;
    maxMeshPayloadAndOutputMemorySize:     u32;
    maxMeshOutputComponents:               u32;
    maxMeshOutputVertices:                 u32;
    maxMeshOutputPrimitives:               u32;
    maxMeshOutputLayers:                   u32;
    maxMeshMultiviewViewCount:             u32;
    meshOutputPerVertexGranularity:        u32;
    meshOutputPerPrimitiveGranularity:     u32;
    maxPreferredTaskWorkGroupInvocations:  u32;
    maxPreferredMeshWorkGroupInvocations:  u32;
    prefersLocalInvocationVertexOutput:    Bool32;
    prefersLocalInvocationPrimitiveOutput: Bool32;
    prefersCompactVertexOutput:            Bool32;
    prefersCompactPrimitiveOutput:         Bool32;
}

DrawMeshTasksIndirectCommandEXT :: struct {
    groupCountX: u32;
    groupCountY: u32;
    groupCountZ: u32;
}

PFN_vkCmdDrawMeshTasksEXT :: #type (commandBuffer: CommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #c_call;
PFN_vkCmdDrawMeshTasksIndirectEXT :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32) -> void #c_call;
PFN_vkCmdDrawMeshTasksIndirectCountEXT :: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

CmdDrawMeshTasksEXT: #type (commandBuffer: CommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #c_call;

CmdDrawMeshTasksIndirectEXT: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32) -> void #c_call;

CmdDrawMeshTasksIndirectCountEXT: #type (commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) -> void #c_call;

XlibSurfaceCreateFlagsKHR :: Flags;
XlibSurfaceCreateInfoKHR :: struct {
    sType:  StructureType = .XLIB_SURFACE_CREATE_INFO_KHR;
    pNext:  *void;
    flags:  XlibSurfaceCreateFlagsKHR;
    dpy:    *Display;
    window: Window;
}

PFN_vkCreateXlibSurfaceKHR :: #type (instance: Instance, pCreateInfo: *XlibSurfaceCreateInfoKHR, pAllocator: *AllocationCallbacks, pSurface: *SurfaceKHR) -> Result #c_call;
PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR :: #type (physicalDevice: PhysicalDevice, queueFamilyIndex: u32, dpy: *Display, visualID: VisualID) -> Bool32 #c_call;

CreateXlibSurfaceKHR: #type (instance: Instance, pCreateInfo: *XlibSurfaceCreateInfoKHR, pAllocator: *AllocationCallbacks, pSurface: *SurfaceKHR) -> Result #c_call;

GetPhysicalDeviceXlibPresentationSupportKHR: #type (physicalDevice: PhysicalDevice, queueFamilyIndex: u32, dpy: *Display, visualID: VisualID) -> Bool32 #c_call;

#scope_file

#import "X11";
